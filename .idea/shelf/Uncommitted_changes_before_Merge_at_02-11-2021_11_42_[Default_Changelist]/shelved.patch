Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/searchPatientActivity/SearchPatientActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.intelehealth.ekalhelpline.activities.searchPatientActivity;\r\n\r\nimport android.app.SearchManager;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.res.Configuration;\r\nimport android.database.Cursor;\r\nimport android.database.SQLException;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.provider.SearchRecentSuggestions;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.appcompat.widget.Toolbar;\r\n\r\nimport android.text.InputType;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.activities.identificationActivity.IdentificationActivity;\r\nimport org.intelehealth.ekalhelpline.activities.privacyNoticeActivity.PrivacyNotice_Activity;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.database.dao.ProviderDAO;\r\nimport org.intelehealth.ekalhelpline.models.dto.PatientDTO;\r\nimport org.intelehealth.ekalhelpline.utilities.ConfigUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\n\r\nimport org.intelehealth.ekalhelpline.activities.homeActivity.HomeActivity;\r\nimport org.intelehealth.ekalhelpline.utilities.StringUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.exception.DAOException;\r\n\r\npublic class SearchPatientActivity extends AppCompatActivity {\r\n    SearchView searchView;\r\n    String query;\r\n    private SearchPatientAdapter recycler;\r\n    RecyclerView recyclerView;\r\n    SessionManager sessionManager = null;\r\n    TextView msg;\r\n    MaterialAlertDialogBuilder dialogBuilder;\r\n    private String TAG = SearchPatientActivity.class.getSimpleName();\r\n    private SQLiteDatabase db;\r\n    FloatingActionButton new_patient;\r\n    int limit = 20, offset = 0;\r\n    boolean fullyLoaded = false;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_search_patient);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n\r\n        Drawable drawable = ContextCompat.getDrawable(getApplicationContext(),\r\n                R.drawable.ic_sort_white_24dp);\r\n//        toolbar.setOverflowIcon(drawable);\r\n\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setDisplayShowTitleEnabled(false);\r\n        // Get the intent, verify the action and get the query\r\n        sessionManager = new SessionManager(this);\r\n        String language = sessionManager.getAppLanguage();\r\n        //In case of crash still the app should hold the current lang fix.\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        db = AppConstants.inteleHealthDatabaseHelper.getWriteDb();\r\n        msg = findViewById(R.id.textviewmessage);\r\n        recyclerView = findViewById(R.id.recycle);\r\n        LinearLayoutManager reLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n        recyclerView.setLayoutManager(reLayoutManager);\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n                if (recycler.patients != null && recycler.patients.size() < limit) {\r\n                    return;\r\n                }\r\n                if (!fullyLoaded && newState == RecyclerView.SCROLL_STATE_IDLE && reLayoutManager.findLastVisibleItemPosition() == recycler.getItemCount() -1) {\r\n                    Toast.makeText(SearchPatientActivity.this, R.string.loading_more, Toast.LENGTH_SHORT).show();\r\n                    offset += limit;\r\n                    List<PatientDTO> allPatientsFromDB = getAllPatientsFromDB(offset);\r\n                    if (allPatientsFromDB.size() < limit) {\r\n                        fullyLoaded = true;\r\n                    }\r\n\r\n                    recycler.patients.addAll(allPatientsFromDB);\r\n                    recycler.notifyDataSetChanged();\r\n                }\r\n            }\r\n        });\r\n        new_patient = findViewById(R.id.new_patient);\r\n        Intent intent = getIntent();\r\n        if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r\n            query = intent.getStringExtra(SearchManager.QUERY);\r\n            SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this, SearchSuggestionProvider.AUTHORITY, SearchSuggestionProvider.MODE);\r\n            suggestions.saveRecentQuery(query, null);\r\n            if (sessionManager.isPullSyncFinished()) {\r\n                msg.setVisibility(View.GONE);\r\n                recyclerView.setVisibility(View.VISIBLE);\r\n                doQuery(query);\r\n            }\r\n\r\n        } else {\r\n            SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this,\r\n                    SearchSuggestionProvider.AUTHORITY, SearchSuggestionProvider.MODE);\r\n            suggestions.saveRecentQuery(query, null);\r\n            if (sessionManager.isPullSyncFinished()) {\r\n                msg.setVisibility(View.GONE);\r\n                recyclerView.setVisibility(View.VISIBLE);\r\n                firstQuery();\r\n            }\r\n\r\n        }\r\n\r\n        new_patient.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //Loads the config file values and check for the boolean value of privacy key.\r\n                ConfigUtils configUtils = new ConfigUtils(SearchPatientActivity.this);\r\n                if (configUtils.privacy_notice()) {\r\n                    Intent intent = new Intent(SearchPatientActivity.this, PrivacyNotice_Activity.class);\r\n                    startActivity(intent);\r\n                } else {\r\n                    //Clear HouseHold UUID from Session for new registration\r\n                  //  sessionManager.setHouseholdUuid(\"\");\r\n\r\n                    Intent intent = new Intent(SearchPatientActivity.this, IdentificationActivity.class);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        recyclerView.clearOnScrollListeners();\r\n    }\r\n\r\n    private void doQuery(String query) {\r\n        try {\r\n            recycler = new SearchPatientAdapter(getQueryPatients(query), SearchPatientActivity.this);\r\n//            RecyclerView.LayoutManager reLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n//            recyclerView.setLayoutManager(reLayoutManager);\r\n            fullyLoaded = true;\r\n\r\n           /* recyclerView.addItemDecoration(new\r\n                    DividerItemDecoration(this,\r\n                    DividerItemDecoration.VERTICAL));*/\r\n            recyclerView.setAdapter(recycler);\r\n\r\n            //If there is any data present against that search query than it will hide the FAB else will show the FAB...\r\n//            if(recycler.patients.size() == 0) {\r\n//                new_patient.setVisibility(View.VISIBLE);\r\n//            }\r\n//            else {\r\n//                new_patient.setVisibility(View.GONE);\r\n//            }\r\n\r\n        } catch (Exception e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Logger.logE(\"doquery\", \"doquery\", e);\r\n        }\r\n    }\r\n\r\n    private void firstQuery() {\r\n        try {\r\n//            getAllPatientsFromDB();\r\n\r\n            recycler = new SearchPatientAdapter(getAllPatientsFromDB(offset), SearchPatientActivity.this);\r\n\r\n\r\n//            Log.i(\"db data\", \"\" + getAllPatientsFromDB());\r\n//            RecyclerView.LayoutManager reLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n//            recyclerView.setLayoutManager(reLayoutManager);\r\n         /*   recyclerView.addItemDecoration(new\r\n                    DividerItemDecoration(this,\r\n                    DividerItemDecoration.VERTICAL));*/\r\n            recyclerView.setAdapter(recycler);\r\n\r\n        } catch (Exception e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Logger.logE(\"firstquery\", \"exception\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the options menu from XMLz\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n        inflater.inflate(R.menu.today_filter, menu);\r\n//        inflater.inflate(R.menu.today_filter, menu);\r\n        // Get the SearchView and set the searchable configuration\r\n        SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);\r\n        searchView = (SearchView) menu.findItem(R.id.action_search).getActionView();\r\n        searchView.setInputType(InputType.TYPE_CLASS_TEXT |\r\n                InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD); //to show numbers easily...\r\n\r\n        // Assumes current activity is the searchable activity\r\n        searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));\r\n\r\n        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String query) {\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String newText) {\r\n                Log.d(\"Hack\", \"in query text change\");\r\n                SearchRecentSuggestions suggestions = new SearchRecentSuggestions(SearchPatientActivity.this,\r\n                        SearchSuggestionProvider.AUTHORITY, SearchSuggestionProvider.MODE);\r\n                suggestions.clearHistory();\r\n                query = newText;\r\n                doQuery(newText);\r\n                return true;\r\n            }\r\n        });\r\n\r\n\r\n        return super.onCreateOptionsMenu(menu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case R.id.summary_endAllVisit:\r\n                endAllVisit();\r\n\r\n            case R.id.action_filter:\r\n                //alert box.\r\n                displaySingleSelectionDialog();    //function call\r\n            case R.id.action_search:\r\n\r\n\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is called when no search result is found for patient.\r\n     *\r\n     * @param lvItems variable of type ListView\r\n     * @param query   variable of type String\r\n     */\r\n    public void noneFound(ListView lvItems, String query) {\r\n        ArrayAdapter<String> searchAdapter = new ArrayAdapter<>(this,\r\n                R.layout.list_item_search,\r\n                R.id.list_item_head, new ArrayList<String>());\r\n        String errorMessage = getString(R.string.alert_none_found).replace(\"_\", query);\r\n        searchAdapter.add(errorMessage);\r\n        lvItems.setAdapter(searchAdapter);\r\n    }\r\n\r\n    public List<PatientDTO> getAllPatientsFromDB( int offset) {\r\n        List<PatientDTO> modelList = new ArrayList<PatientDTO>();\r\n        String table = \"tbl_patient\";\r\n        final Cursor searchCursor = db.rawQuery(\"SELECT * FROM \" + table + \" ORDER BY first_name ASC limit ? offset ?\", new String[]{String.valueOf(limit), String.valueOf(offset)});\r\n        try {\r\n            if (searchCursor.moveToFirst()) {\r\n                do {\r\n                    PatientDTO model = new PatientDTO();\r\n                    model.setOpenmrsId(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                    model.setFirstname(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"first_name\")));\r\n                    model.setLastname(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"last_name\")));\r\n                    model.setOpenmrsId(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                    model.setUuid(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"uuid\")));\r\n                    model.setDateofbirth(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"date_of_birth\")));\r\n                    model.setPhonenumber(StringUtils.mobileNumberEmpty(phoneNumber(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"uuid\")))));\r\n\r\n                    modelList.add(model);\r\n                } while (searchCursor.moveToNext());\r\n            }\r\n            searchCursor.close();\r\n        } catch (DAOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return modelList;\r\n\r\n    }\r\n\r\n    private void endAllVisit() {\r\n\r\n        int failedUploads = 0;\r\n\r\n        String query = \"SELECT tbl_visit.patientuuid, tbl_visit.enddate, tbl_visit.uuid,\" +\r\n                \"tbl_patient.first_name, tbl_patient.middle_name, tbl_patient.last_name FROM tbl_visit, tbl_patient WHERE\" +\r\n                \" tbl_visit.patientuid = tbl_patient.uuid AND tbl_visit.enddate IS NULL OR tbl_visit.enddate = ''\";\r\n\r\n        final Cursor cursor = db.rawQuery(query, null);\r\n\r\n        if (cursor != null) {\r\n            if (cursor.moveToFirst()) {\r\n                do {\r\n                    boolean result = endVisit(\r\n                            cursor.getString(cursor.getColumnIndexOrThrow(\"patientuuid\")),\r\n                            cursor.getString(cursor.getColumnIndexOrThrow(\"first_name\")) + \" \" +\r\n                                    cursor.getString(cursor.getColumnIndexOrThrow(\"last_name\")),\r\n                            cursor.getString(cursor.getColumnIndexOrThrow(\"uuid\"))\r\n                    );\r\n                    if (!result) failedUploads++;\r\n                } while (cursor.moveToNext());\r\n            }\r\n        }\r\n        if (cursor != null) {\r\n            cursor.close();\r\n        }\r\n\r\n        if (failedUploads == 0) {\r\n            Intent intent = new Intent(this, HomeActivity.class);\r\n            startActivity(intent);\r\n        } else {\r\n            MaterialAlertDialogBuilder alertDialogBuilder = new MaterialAlertDialogBuilder(this);\r\n            alertDialogBuilder.setMessage(\"Unable to end \" + failedUploads +\r\n                    \" visits.Please upload visit before attempting to end the visit.\");\r\n            alertDialogBuilder.setNeutralButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n            AlertDialog alertDialog = alertDialogBuilder.create();\r\n            alertDialog.show();\r\n            IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n        }\r\n\r\n    }\r\n\r\n    private boolean endVisit(String patientUuid, String patientName, String visitUUID) {\r\n\r\n        return visitUUID != null;\r\n\r\n    }\r\n\r\n    private void displaySingleSelectionDialog() {\r\n\r\n        ProviderDAO providerDAO = new ProviderDAO();\r\n        ArrayList selectedItems = new ArrayList<>();\r\n        String[] creator_names = null;\r\n        String[] creator_uuid = null;\r\n        try {\r\n            creator_names = providerDAO.getProvidersList().toArray(new String[0]);\r\n            creator_uuid = providerDAO.getProvidersUuidList().toArray(new String[0]);\r\n        } catch (DAOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        dialogBuilder = new MaterialAlertDialogBuilder(SearchPatientActivity.this);\r\n        dialogBuilder.setTitle(getString(R.string.filter_by_creator));\r\n\r\n        String[] finalCreator_names = creator_names;\r\n        String[] finalCreator_uuid = creator_uuid;\r\n        dialogBuilder.setMultiChoiceItems(creator_names, null, new DialogInterface.OnMultiChoiceClickListener() {\r\n\r\n\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int which, boolean isChecked) {\r\n                Logger.logD(TAG, \"multichoice\" + which + isChecked);\r\n                if (isChecked) {\r\n                    // If the user checked the item, add it to the selected items\r\n                    if (finalCreator_uuid != null) {\r\n                        selectedItems.add(finalCreator_uuid[which]);\r\n                    }\r\n\r\n                } else if (selectedItems.contains(which)) {\r\n                    // Else, if the item is already in the array, remove it\r\n                    if (finalCreator_uuid != null) {\r\n                        selectedItems.remove(finalCreator_uuid[which]);\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        dialogBuilder.setPositiveButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                //display filter query code on list menu\r\n                Logger.logD(TAG, \"onclick\" + i);\r\n                doQueryWithProviders(query, selectedItems);\r\n            }\r\n        });\r\n\r\n        dialogBuilder.setNegativeButton(R.string.generic_cancel, null);\r\n\r\n        //dialogBuilder.show();\r\n        AlertDialog alertDialog = dialogBuilder.create();\r\n        alertDialog.show();\r\n\r\n        Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n        Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n    }\r\n\r\n    public List<PatientDTO> getQueryPatients(String query) {\r\n        String search = query.trim().replaceAll(\"\\\\s\", \"\");\r\n        // search = StringUtils.mobileNumberEmpty(phoneNumber());\r\n        List<PatientDTO> modelList = new ArrayList<PatientDTO>();\r\n        SQLiteDatabase db = AppConstants.inteleHealthDatabaseHelper.getWritableDatabase();\r\n        String table = \"tbl_patient\";\r\n\r\n        List<String> patientUUID_List = new ArrayList<>();\r\n        \r\n        final Cursor search_mobile_cursor = db.rawQuery(\"SELECT DISTINCT patientuuid FROM tbl_patient_attribute WHERE value = ?\",\r\n                new String[] {search} );\r\n        /* DISTINCT will get remove the duplicate values. The duplicate value will come when you have created\r\n        * a patient with mobile no. 12345 and patient is pushed than later you edit the mobile no to\r\n        * 12344 or something. In this case, the local db maintains two separate rows both with value: 12344 */\r\n\r\n        //if no data is present against that corresponding cursor than cursor count returns = 0 ... i.e cursor_count = 0 ...\r\n        try {\r\n            if (search_mobile_cursor.moveToFirst()) {\r\n                do {\r\n                     patientUUID_List.add(search_mobile_cursor.getString\r\n                            (search_mobile_cursor.getColumnIndexOrThrow(\"patientuuid\")));\r\n                }\r\n                while (search_mobile_cursor.moveToNext());\r\n            }\r\n         } catch (Exception e) {\r\n                FirebaseCrashlytics.getInstance().recordException(e);\r\n            }\r\n\r\n        Log.d(\"patientUUID_list\", \"list: \"+ patientUUID_List.toString());\r\n\r\n        if(patientUUID_List.size() != 0) {\r\n            for (int i = 0; i < patientUUID_List.size(); i++) {\r\n\r\n                final Cursor searchCursor = db.rawQuery(\"SELECT * FROM \" + table + \" WHERE first_name LIKE \" + \"'%\" + search + \"%' OR first_name LIKE '%\" + query + \"%' OR last_name LIKE '%\" + query + \"%' OR middle_name LIKE '%\" + search + \"%' OR uuid = ? OR last_name LIKE '%\" + search + \"%' OR (first_name || middle_name) LIKE '%\" + search + \"%' OR (middle_name || last_name) LIKE '%\" + search + \"%' OR (first_name || last_name) LIKE '%\" + search + \"%' OR openmrs_id LIKE '%\" + search + \"%' \" + \"ORDER BY first_name ASC\",\r\n                        new String[]{patientUUID_List.get(i)});\r\n                //  if(searchCursor.getCount() != -1) { //all values are present as per the search text entered...\r\n                try {\r\n                    if (searchCursor.moveToFirst()) {\r\n                        do {\r\n                            PatientDTO model = new PatientDTO();\r\n                            model.setOpenmrsId(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                            model.setFirstname(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"first_name\")));\r\n                            model.setLastname(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"last_name\")));\r\n                            model.setOpenmrsId(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                            model.setMiddlename(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"middle_name\")));\r\n                            model.setUuid(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"uuid\")));\r\n                            model.setDateofbirth(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"date_of_birth\")));\r\n                            model.setPhonenumber(StringUtils.mobileNumberEmpty(phoneNumber(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"uuid\")))));\r\n                            modelList.add(model);\r\n                        } while (searchCursor.moveToNext());\r\n                    }\r\n                } catch (DAOException e) {\r\n                    FirebaseCrashlytics.getInstance().recordException(e);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        else {\r\n                final Cursor searchCursor = db.rawQuery(\"SELECT * FROM \" + table + \" WHERE first_name LIKE \" + \"'%\" + search + \"%' OR first_name LIKE \" + \"'%\" + query + \"%' OR last_name LIKE '%\" + query + \"%' OR middle_name LIKE '%\" + search + \"%' OR last_name LIKE '%\" + search + \"%' OR (first_name || middle_name) LIKE '%\" + search + \"%' OR (middle_name || last_name) LIKE '%\" + search + \"%' OR (first_name || last_name) LIKE '%\" + search + \"%' OR openmrs_id LIKE '%\" + search + \"%' \" + \"ORDER BY first_name ASC\",\r\n                        null);\r\n                //  if(searchCursor.getCount() != -1) { //all values are present as per the search text entered...\r\n                try {\r\n                    if (searchCursor.moveToFirst()) {\r\n                        do {\r\n                            PatientDTO model = new PatientDTO();\r\n                            model.setOpenmrsId(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                            model.setFirstname(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"first_name\")));\r\n                            model.setLastname(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"last_name\")));\r\n                            model.setOpenmrsId(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                            model.setMiddlename(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"middle_name\")));\r\n                            model.setUuid(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"uuid\")));\r\n                            model.setDateofbirth(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"date_of_birth\")));\r\n                            model.setPhonenumber(StringUtils.mobileNumberEmpty(phoneNumber(searchCursor.getString(searchCursor.getColumnIndexOrThrow(\"uuid\")))));\r\n                            modelList.add(model);\r\n                        } while (searchCursor.moveToNext());\r\n                    }\r\n                } catch (DAOException e) {\r\n                    FirebaseCrashlytics.getInstance().recordException(e);\r\n                }\r\n\r\n        }\r\n\r\n        return modelList;\r\n\r\n    }\r\n\r\n    private void doQueryWithProviders(String querytext, List<String> providersuuids) {\r\n        if (querytext == null) {\r\n            List<PatientDTO> modelListwihtoutQuery = new ArrayList<PatientDTO>();\r\n            String query =\r\n                    \"select b.openmrs_id,b.first_name,b.last_name,b.middle_name,b.uuid,b.date_of_birth from tbl_visit a, tbl_patient b, tbl_encounter c WHERE a.patientuuid = b.uuid  AND c.visituuid=a.uuid and c.provider_uuid in \" +\r\n                            \"('\" + StringUtils.convertUsingStringBuilder(providersuuids) + \"')  \" +\r\n                            \"group by a.uuid order by b.uuid ASC\";\r\n            Logger.logD(TAG, query);\r\n            final Cursor cursor = db.rawQuery(query, null);\r\n            Logger.logD(TAG, \"Cursour count\" + cursor.getCount());\r\n\r\n            try {\r\n                if (cursor != null) {\r\n                    if (cursor.moveToFirst()) {\r\n                        do {\r\n                            PatientDTO model = new PatientDTO();\r\n                            model.setOpenmrsId(cursor.getString(cursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                            model.setFirstname(cursor.getString(cursor.getColumnIndexOrThrow(\"first_name\")));\r\n                            model.setLastname(cursor.getString(cursor.getColumnIndexOrThrow(\"last_name\")));\r\n                            model.setMiddlename(cursor.getString(cursor.getColumnIndexOrThrow(\"middle_name\")));\r\n                            model.setUuid(cursor.getString(cursor.getColumnIndexOrThrow(\"uuid\")));\r\n                            model.setDateofbirth(cursor.getString(cursor.getColumnIndexOrThrow(\"date_of_birth\")));\r\n                            model.setPhonenumber(StringUtils.mobileNumberEmpty(phoneNumber(cursor.getString(cursor.getColumnIndexOrThrow(\"uuid\")))));\r\n                            modelListwihtoutQuery.add(model);\r\n\r\n                        } while (cursor.moveToNext());\r\n                    }\r\n                }\r\n                if (cursor != null) {\r\n                    cursor.close();\r\n                }\r\n\r\n            } catch (DAOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            try {\r\n                recycler = new SearchPatientAdapter(modelListwihtoutQuery, SearchPatientActivity.this);\r\n//            Log.i(\"db data\", \"\" + getQueryPatients(query));\r\n//                RecyclerView.LayoutManager reLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n//                recyclerView.setLayoutManager(reLayoutManager);\r\n            /*    recyclerView.addItemDecoration(new\r\n                        DividerItemDecoration(this,\r\n                        DividerItemDecoration.VERTICAL));*/\r\n                recyclerView.setAdapter(recycler);\r\n\r\n            } catch (Exception e) {\r\n                Logger.logE(\"doquery\", \"doquery\", e);\r\n            }\r\n        } else {\r\n            String search = querytext.trim().replaceAll(\"\\\\s\", \"\");\r\n            List<PatientDTO> modelList = new ArrayList<PatientDTO>();\r\n            String query =\r\n                    \"select   b.openmrs_id,b.firstname,b.last_name,b.middle_name,b.uuid,b.date_of_birth  from tbl_visit a, tbl_patient b, tbl_encounter c WHERE\" +\r\n                            \"first_name LIKE \" + \"'%\" + search +\r\n                            \"%' OR middle_name LIKE '%\" + search +\r\n                            \"%' OR last_name LIKE '%\" + search +\r\n                            \"%' OR openmrs_id LIKE '%\" + search +\r\n                            \"%' \" +\r\n                            \"AND a.provider_uuid in ('\" + StringUtils.convertUsingStringBuilder(providersuuids) + \"')  \" +\r\n                            \"AND  a.patientuuid = b.uuid  AND c.visituuid=a.uuid \" +\r\n                            \"group by a.uuid order by b.uuid ASC\";\r\n            Logger.logD(TAG, query);\r\n            final Cursor cursor = db.rawQuery(query, null);\r\n            Logger.logD(TAG, \"Cursour count\" + cursor.getCount());\r\n            try {\r\n                if (cursor != null) {\r\n                    if (cursor.moveToFirst()) {\r\n                        do {\r\n                            PatientDTO model = new PatientDTO();\r\n                            model.setOpenmrsId(cursor.getString(cursor.getColumnIndexOrThrow(\"openmrs_id\")));\r\n                            model.setFirstname(cursor.getString(cursor.getColumnIndexOrThrow(\"first_name\")));\r\n                            model.setLastname(cursor.getString(cursor.getColumnIndexOrThrow(\"last_name\")));\r\n                            model.setMiddlename(cursor.getString(cursor.getColumnIndexOrThrow(\"middle_name\")));\r\n                            model.setUuid(cursor.getString(cursor.getColumnIndexOrThrow(\"uuid\")));\r\n                            model.setDateofbirth(cursor.getString(cursor.getColumnIndexOrThrow(\"date_of_birth\")));\r\n                            model.setPhonenumber(StringUtils.mobileNumberEmpty(phoneNumber(cursor.getString(cursor.getColumnIndexOrThrow(\"uuid\")))));\r\n                            modelList.add(model);\r\n\r\n                        } while (cursor.moveToNext());\r\n                    }\r\n                }\r\n                cursor.close();\r\n            } catch (DAOException sql) {\r\n                FirebaseCrashlytics.getInstance().recordException(sql);\r\n            }\r\n\r\n\r\n            try {\r\n                recycler = new SearchPatientAdapter(modelList, SearchPatientActivity.this);\r\n//                RecyclerView.LayoutManager reLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n//                recyclerView.setLayoutManager(reLayoutManager);\r\n           /*     recyclerView.addItemDecoration(new\r\n                        DividerItemDecoration(this,\r\n                        DividerItemDecoration.HORIZONTAL));*/\r\n                recyclerView.setAdapter(recycler);\r\n\r\n            } catch (Exception e) {\r\n                FirebaseCrashlytics.getInstance().recordException(e);\r\n                Logger.logE(\"doquery\", \"doquery\", e);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private String phoneNumber(String patientuuid) throws DAOException {\r\n        String phone = null;\r\n        Cursor idCursor = db.rawQuery(\"SELECT value  FROM tbl_patient_attribute where patientuuid = ? AND person_attribute_type_uuid='14d4f066-15f5-102d-96e4-000c29c2a5d7' \", new String[]{patientuuid});\r\n        try {\r\n            if (idCursor.getCount() != 0) {\r\n                while (idCursor.moveToNext()) {\r\n\r\n                    phone = idCursor.getString(idCursor.getColumnIndexOrThrow(\"value\"));\r\n\r\n                }\r\n            }\r\n        } catch (SQLException s) {\r\n            FirebaseCrashlytics.getInstance().recordException(s);\r\n        }\r\n        idCursor.close();\r\n\r\n        return phone;\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/org/intelehealth/ekalhelpline/activities/searchPatientActivity/SearchPatientActivity.java b/app/src/main/java/org/intelehealth/ekalhelpline/activities/searchPatientActivity/SearchPatientActivity.java
--- a/app/src/main/java/org/intelehealth/ekalhelpline/activities/searchPatientActivity/SearchPatientActivity.java	(revision 9901776c07741cec971cf6bce268a28ca7033406)
+++ b/app/src/main/java/org/intelehealth/ekalhelpline/activities/searchPatientActivity/SearchPatientActivity.java	(date 1635769850707)
@@ -11,6 +11,7 @@
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
+import android.os.Handler;
 import android.provider.SearchRecentSuggestions;
 
 import androidx.annotation.NonNull;
@@ -71,6 +72,7 @@
     FloatingActionButton new_patient;
     int limit = 20, offset = 0;
     boolean fullyLoaded = false;
+    Handler mHandler;
 
 
     @Override
@@ -104,6 +106,7 @@
         db = AppConstants.inteleHealthDatabaseHelper.getWriteDb();
         msg = findViewById(R.id.textviewmessage);
         recyclerView = findViewById(R.id.recycle);
+        mHandler = new Handler();
         LinearLayoutManager reLayoutManager = new LinearLayoutManager(getApplicationContext());
         recyclerView.setLayoutManager(reLayoutManager);
         recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
@@ -249,11 +252,18 @@
             @Override
             public boolean onQueryTextChange(String newText) {
                 Log.d("Hack", "in query text change");
-                SearchRecentSuggestions suggestions = new SearchRecentSuggestions(SearchPatientActivity.this,
-                        SearchSuggestionProvider.AUTHORITY, SearchSuggestionProvider.MODE);
-                suggestions.clearHistory();
-                query = newText;
-                doQuery(newText);
+                mHandler.removeCallbacksAndMessages(null);
+                mHandler.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        //Put your call to the server here (with mQueryString)
+                        SearchRecentSuggestions suggestions = new SearchRecentSuggestions(SearchPatientActivity.this,
+                                SearchSuggestionProvider.AUTHORITY, SearchSuggestionProvider.MODE);
+                        suggestions.clearHistory();
+                        query = newText;
+                        doQuery(newText);
+                    }
+                }, 300);
                 return true;
             }
         });
@@ -277,6 +287,7 @@
             default:
                 return super.onOptionsItemSelected(item);
         }
+
     }
 
     /**
