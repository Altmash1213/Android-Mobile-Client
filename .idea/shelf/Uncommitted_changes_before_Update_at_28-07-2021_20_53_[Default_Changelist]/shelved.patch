Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14_[Default_Changelist]/shelved.patch	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,2 +0,0 @@
-diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_24-05-2021_17_25__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_24-05-2021_17_25__Default_Changelist_.xml
-diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_19-05-2021_11_52__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_19-05-2021_11_52__Default_Changelist_.xml
Index: .idea/shelf/Uncommitted_changes_before_Update_at_20-05-2021_11_53_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_20-05-2021_11_53_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_20-05-2021_11_53_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_20-05-2021_11_53_[Default_Changelist]/shelved.patch	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,18 +0,0 @@
-Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/privacyNoticeActivity/PrivacyNotice_Activity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package org.intelehealth.ekalhelpline.activities.privacyNoticeActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\n\r\nimport android.text.util.Linkify;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.google.android.material.checkbox.MaterialCheckBox;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.utilities.FileUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\n\r\nimport org.intelehealth.ekalhelpline.activities.identificationActivity.IdentificationActivity;\r\n\r\npublic class PrivacyNotice_Activity extends AppCompatActivity implements View.OnClickListener {\r\n    TextView privacy_textview;\r\n    SessionManager sessionManager = null;\r\n    private boolean hasLicense = false;\r\n    Button accept, reject;\r\n    MaterialCheckBox checkBox_cho;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        sessionManager = new SessionManager(this);\r\n        String language = sessionManager.getAppLanguage();\r\n        //In case of crash still the app should hold the current lang fix.\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_privacy_notice_2);\r\n        setTitle(getString(R.string.privacy_notice_title));\r\n\r\n        /*\r\n         * Toolbar which displays back arrow on action bar\r\n         * Add the below lines for every activity*/\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n\r\n        toolbar.setNavigationOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n\r\n\r\n        privacy_textview = findViewById(R.id.privacy_text);\r\n        privacy_textview.setAutoLinkMask(Linkify.ALL);\r\n        accept = findViewById(R.id.button_accept);\r\n        reject = findViewById(R.id.button_reject);\r\n        checkBox_cho = findViewById(R.id.checkbox_CHO);\r\n\r\n\r\n        if (!sessionManager.getLicenseKey().isEmpty())\r\n            hasLicense = true;\r\n\r\n        //Check for license key and load the correct config file\r\n        try {\r\n            JSONObject obj = null;\r\n            if (hasLicense) {\r\n                obj = new JSONObject(Objects.requireNonNullElse(\r\n                        FileUtils.readFileRoot(AppConstants.CONFIG_FILE_NAME, this),\r\n                        String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)))); //Load the config file\r\n\r\n            } else {\r\n                obj = new JSONObject(String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)));\r\n            }\r\n\r\n//            SharedPreferences sharedPreferences = getSharedPreferences(\"CommonPrefs\", Activity.MODE_PRIVATE);\r\n//            if(sharedPreferences.getAll().values().contains(\"cb\"))\r\n            Locale current = getResources().getConfiguration().locale;\r\n//            if (current.toString().equals(\"cb\")) {\r\n//                String privacy_string = obj.getString(\"privacyNoticeText_Cebuano\");\r\n//                if (privacy_string.isEmpty()) {\r\n//                    privacy_string = obj.getString(\"privacyNoticeText\");\r\n//                    privacy_textview.setText(privacy_string);\r\n//                } else {\r\n//                    privacy_textview.setText(privacy_string);\r\n//                }\r\n//\r\n//            } else\r\n            if (current.toString().equals(\"or\")) {\r\n                String privacy_string = obj.getString(\"privacyNoticeText_Odiya\");\r\n                if (privacy_string.isEmpty()) {\r\n                    privacy_string = obj.getString(\"privacyNoticeText\");\r\n                    privacy_textview.setText(privacy_string);\r\n                } else {\r\n                    privacy_textview.setText(privacy_string);\r\n                }\r\n\r\n            } else if (current.toString().equals(\"hi\")) {\r\n                String privacy_string = obj.getString(\"privacyNoticeText_Hindi\");\r\n                if (privacy_string.isEmpty()) {\r\n                    privacy_string = obj.getString(\"privacyNoticeText\");\r\n                    privacy_textview.setText(privacy_string);\r\n                } else {\r\n                    privacy_textview.setText(privacy_string);\r\n                }\r\n\r\n            } else if (current.toString().equals(\"kn\")) {          //Privacy text support for Kannada\r\n                String privacy_string = obj.getString(\"privacyNoticeText_Kannada\");\r\n                if (privacy_string.isEmpty()) {\r\n                    privacy_string = obj.getString(\"privacyNoticeText\");\r\n                    privacy_textview.setText(privacy_string);\r\n                } else {\r\n                    privacy_textview.setText(privacy_string);\r\n                }\r\n\r\n            } else if (current.toString().equals(\"mr\")) {\r\n                String privacy_string = obj.getString(\"privacyNoticeText_Marathi\");\r\n                if (privacy_string.isEmpty()) {\r\n                    privacy_string = obj.getString(\"privacyNoticeText\");\r\n                    privacy_textview.setText(privacy_string);\r\n                } else {\r\n                    privacy_textview.setText(privacy_string);\r\n                }\r\n\r\n            } else if (current.toString().equals(\"gu\")) {\r\n                String privacy_string = obj.getString(\"privacyNoticeText_Gujrathi\");\r\n                if (privacy_string.isEmpty()) {\r\n                    privacy_string = obj.getString(\"privacyNoticeText\");\r\n                    privacy_textview.setText(privacy_string);\r\n                } else {\r\n                    privacy_textview.setText(privacy_string);\r\n                }\r\n            } else {\r\n\r\n                String privacy_string = obj.getString(\"privacyNoticeText\");\r\n                privacy_textview.setText(privacy_string);\r\n            }\r\n\r\n            accept.setOnClickListener(this);\r\n            reject.setOnClickListener(this);\r\n\r\n        } catch (JSONException e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Toast.makeText(getApplicationContext(), \"JsonException\" + e, Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n\r\n        if (checkBox_cho.isChecked() && v.getId() == R.id.button_accept) {\r\n\r\n            //Clear HouseHold UUID from Session for new registration\r\n            sessionManager.setHouseholdUuid(\"\");\r\n\r\n            Intent intent = new Intent(getApplicationContext(), IdentificationActivity.class);\r\n            intent.putExtra(\"privacy\", accept.getText().toString()); //privacy value send to identificationActivity\r\n            Log.d(\"Privacy\", \"selected radio: \" + accept.getText().toString());\r\n            startActivity(intent);\r\n        } else if (checkBox_cho.isChecked() && v.getId() == R.id.button_reject) {\r\n            Toast.makeText(PrivacyNotice_Activity.this,\r\n                    getString(R.string.privacy_reject_toast), Toast.LENGTH_SHORT).show();\r\n            finish();\r\n        } else {\r\n            Toast.makeText(PrivacyNotice_Activity.this,\r\n                    getString(R.string.please_read_out_privacy_consent_first), Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/org/intelehealth/ekalhelpline/activities/privacyNoticeActivity/PrivacyNotice_Activity.java	(revision 79bb80ad7dd95dcedc1ce54949ffb365ecb0c5c6)
-+++ app/src/main/java/org/intelehealth/ekalhelpline/activities/privacyNoticeActivity/PrivacyNotice_Activity.java	(date 1621491808529)
-@@ -146,7 +146,7 @@
-                 }
- 
-             } else if (current.toString().equals("gu")) {
--                String privacy_string = obj.getString("privacyNoticeText_Gujrathi");
-+                String privacy_string = obj.getString("privacyNoticeText_Gujarati");
-                 if (privacy_string.isEmpty()) {
-                     privacy_string = obj.getString("privacyNoticeText");
-                     privacy_textview.setText(privacy_string);
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11_[Default_Changelist]/shelved.patch	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,2 +0,0 @@
-diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_24-05-2021_17_25__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_24-05-2021_17_25__Default_Changelist_.xml
-diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_19-05-2021_11_52__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_19-05-2021_11_52__Default_Changelist_.xml
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11__Default_Changelist_.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_22-06-2021_11_11_[Default_Changelist]" date="1624340508085" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_11_11_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 22-06-2021 11:11 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/runConfigurations.xml
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
deleted file mode 100644
--- a/.idea/runConfigurations.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RunConfigurationProducerService">
-    <option name="ignoredProducers">
-      <set>
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
-      </set>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14__Default_Changelist_.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_22-06-2021_19_14_[Default_Changelist]" date="1624369458900" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22-06-2021_19_14_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 22-06-2021 19:14 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/codeStyles/Project.xml
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
deleted file mode 100644
--- a/.idea/codeStyles/Project.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,116 +0,0 @@
-<component name="ProjectCodeStyleConfiguration">
-  <code_scheme name="Project" version="173">
-    <codeStyleSettings language="XML">
-      <indentOptions>
-        <option name="CONTINUATION_INDENT_SIZE" value="4" />
-      </indentOptions>
-      <arrangement>
-        <rules>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>xmlns:android</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>^$</XML_NAMESPACE>
-                </AND>
-              </match>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>xmlns:.*</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>^$</XML_NAMESPACE>
-                </AND>
-              </match>
-              <order>BY_NAME</order>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>.*:id</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                </AND>
-              </match>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>.*:name</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                </AND>
-              </match>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>name</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>^$</XML_NAMESPACE>
-                </AND>
-              </match>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>style</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>^$</XML_NAMESPACE>
-                </AND>
-              </match>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>.*</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>^$</XML_NAMESPACE>
-                </AND>
-              </match>
-              <order>BY_NAME</order>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>.*</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                </AND>
-              </match>
-              <order>ANDROID_ATTRIBUTE_ORDER</order>
-            </rule>
-          </section>
-          <section>
-            <rule>
-              <match>
-                <AND>
-                  <NAME>.*</NAME>
-                  <XML_ATTRIBUTE />
-                  <XML_NAMESPACE>.*</XML_NAMESPACE>
-                </AND>
-              </match>
-              <order>BY_NAME</order>
-            </rule>
-          </section>
-        </rules>
-      </arrangement>
-    </codeStyleSettings>
-  </code_scheme>
-</component>
\ No newline at end of file
Index: .idea/DtonatorPreferences.xml
===================================================================
diff --git a/.idea/DtonatorPreferences.xml b/.idea/DtonatorPreferences.xml
deleted file mode 100644
--- a/.idea/DtonatorPreferences.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="DtonatorPreferences">
-    <option name="classType" value="SINGLE_FILE_WITH_INNER_CLASS" />
-    <option name="customAnnotationPattern" value="@annotationTextHere(&quot;%s&quot;)" />
-    <option name="encapsulete">
-      <list>
-        <option value="PROVIDE_GETTER" />
-        <option value="PROVIDE_SETTER" />
-        <option value="PROVIDE_PRIVATE_FIELD" />
-      </list>
-    </option>
-    <option name="fieldType" value="GSON_EXPOSE" />
-    <option name="naming">
-      <list>
-        <option value="CAMEL_CASE" />
-      </list>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/copyright/sanjay_kranthi.xml
===================================================================
diff --git a/.idea/copyright/sanjay_kranthi.xml b/.idea/copyright/sanjay_kranthi.xml
deleted file mode 100644
--- a/.idea/copyright/sanjay_kranthi.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,6 +0,0 @@
-<component name="CopyrightManager">
-  <copyright>
-    <option name="notice" value="Copyright (c) &amp;#36;today.year.&#10;Project Developed for InteleHealth  &#10;kranthi.kumar@mahiti.org&#10;kranthi0987@gmail.com " />
-    <option name="myName" value="sanjay kranthi" />
-  </copyright>
-</component>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12_[Default_Changelist]/shelved.patch	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,1218 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_07_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_07_[Default_Changelist]/shelved.patch	(date 1621420899669)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_07_[Default_Changelist]/shelved.patch	(date 1621420899669)
-@@ -0,0 +1,130 @@
-+Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package org.intelehealth.ekalhelpline.activities.homeActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.work.ExistingPeriodicWorkPolicy;\r\nimport androidx.work.WorkManager;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.activities.activePatientsActivity.ActivePatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.loginActivity.LoginActivity;\r\nimport org.intelehealth.ekalhelpline.activities.searchPatientActivity.SearchPatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.settingsActivity.SettingsActivity;\r\nimport org.intelehealth.ekalhelpline.activities.todayPatientActivity.TodayPatientActivity;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.models.CheckAppUpdateRes;\r\nimport org.intelehealth.ekalhelpline.models.DownloadMindMapRes;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.syncModule.SyncUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;\r\nimport org.intelehealth.ekalhelpline.utilities.FileUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkConnection;\r\nimport org.intelehealth.ekalhelpline.utilities.OfflineLogin;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\nimport org.intelehealth.ekalhelpline.widget.materialprogressbar.CustomProgressDialog;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.disposables.CompositeDisposable;\r\nimport io.reactivex.disposables.Disposable;\r\nimport io.reactivex.observers.DisposableObserver;\r\nimport io.reactivex.observers.DisposableSingleObserver;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n/**\r\n * Home Screen\r\n */\r\n\r\npublic class HomeActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = HomeActivity.class.getSimpleName();\r\n    SessionManager sessionManager = null;\r\n    private ProgressDialog mSyncProgressDialog;\r\n    CountDownTimer CDT;\r\n    private boolean hasLicense = false;\r\n    int i = 5;\r\n\r\n    TextView lastSyncTextView;\r\n    TextView lastSyncAgo;\r\n    Button manualSyncButton;\r\n    //IntentFilter filter;\r\n\r\n    SyncUtils syncUtils = new SyncUtils();\r\n    CardView c1, c2, c3, c4, c5, c6;\r\n    private String key = null;\r\n    private String licenseUrl = null;\r\n\r\n    Context context;\r\n    CustomProgressDialog customProgressDialog;\r\n    private String mindmapURL = \"\";\r\n    private DownloadMindMaps mTask;\r\n    ProgressDialog mProgressDialog;\r\n\r\n    private int versionCode = 0;\r\n    private CompositeDisposable disposable = new CompositeDisposable();\r\n    TextView newPatient_textview, findPatients_textview, todaysVisits_textview,\r\n            activeVisits_textview, videoLibrary_textview, help_textview;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_home);\r\n        sessionManager = new SessionManager(this);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n\r\n        String language = sessionManager.getAppLanguage();\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n\r\n        setTitle(R.string.title_activity_login);\r\n        context = HomeActivity.this;\r\n        customProgressDialog = new CustomProgressDialog(context);\r\n        /*syncBroadcastReceiver = new SyncBroadcastReceiver();\r\n        filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);*/\r\n\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        checkAppVer();  //auto-update feature.\r\n\r\n        Logger.logD(TAG, \"onCreate: \" + getFilesDir().toString());\r\n        lastSyncTextView = findViewById(R.id.lastsynctextview);\r\n        lastSyncAgo = findViewById(R.id.lastsyncago);\r\n        manualSyncButton = findViewById(R.id.manualsyncbutton);\r\n//        manualSyncButton.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);\r\n       // c1 = findViewById(R.id.cardview_newpat);\r\n        c2 = findViewById(R.id.cardview_find_patient);\r\n        c3 = findViewById(R.id.cardview_today_patient);\r\n        c4 = findViewById(R.id.cardview_active_patients);\r\n        c5 = findViewById(R.id.cardview_video_libraby);\r\n        c6 = findViewById(R.id.cardview_help_whatsapp);\r\n\r\n        //card textview referrenced to fix bug of localization not working in some cases...\r\n     /*   newPatient_textview = findViewById(R.id.newPatient_textview);\r\n        newPatient_textview.setText(R.string.new_patient);*/\r\n\r\n        findPatients_textview = findViewById(R.id.findPatients_textview);\r\n        findPatients_textview.setText(R.string.find_patient);\r\n\r\n        todaysVisits_textview = findViewById(R.id.todaysVisits_textview);\r\n        todaysVisits_textview.setText(R.string.today_visits);\r\n\r\n        activeVisits_textview = findViewById(R.id.activeVisits_textview);\r\n        activeVisits_textview.setText(R.string.active_visits);\r\n\r\n        videoLibrary_textview = findViewById(R.id.videoLibrary_textview);\r\n        videoLibrary_textview.setText(R.string.video_library);\r\n\r\n        help_textview = findViewById(R.id.help_textview);\r\n        help_textview.setText(R.string.Whatsapp_Help_Cardview);\r\n\r\n        // manualSyncButton.setText(R.string.sync_now);\r\n        manualSyncButton.setText(R.string.refresh);\r\n\r\n        //Help section of watsapp...\r\n        c6.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String phoneNumberWithCountryCode = \"+917005308163\";\r\n                String message =\r\n                        getString(R.string.hello_my_name_is) + \" \" + sessionManager.getChwname() + \" \" +\r\n                                /*\" from \" + sessionManager.getState() + */getString(R.string.i_need_assistance);\r\n\r\n                startActivity(new Intent(Intent.ACTION_VIEW,\r\n                        Uri.parse(\r\n                                String.format(\"https://api.whatsapp.com/send?phone=%s&text=%s\",\r\n                                        phoneNumberWithCountryCode, message))));\r\n            }\r\n        });\r\n/*\r\n        c1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Loads the config file values and check for the boolean value of privacy key.\r\n                ConfigUtils configUtils = new ConfigUtils(HomeActivity.this);\r\n                if (configUtils.privacy_notice()) {\r\n                    Intent intent = new Intent(HomeActivity.this, PrivacyNotice_Activity.class);\r\n                    startActivity(intent);\r\n                } else {\r\n                    //Clear HouseHold UUID from Session for new registration\r\n                    sessionManager.setHouseholdUuid(\"\");\r\n\r\n                    Intent intent = new Intent(HomeActivity.this, IdentificationActivity.class);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n*/\r\n        c2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, SearchPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, TodayPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c4.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, ActivePatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                videoLibrary();\r\n            }\r\n        });\r\n\r\n\r\n        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n\r\n//        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n////            lastSyncAgo.setText(CalculateAgoTime());\r\n//        }\r\n\r\n        manualSyncButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, context);\r\n\r\n                if (isNetworkConnected()) {\r\n                    Toast.makeText(context, getString(R.string.syncInProgress), Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Toast.makeText(context, context.getString(R.string.failed_synced), Toast.LENGTH_LONG).show();\r\n                }\r\n\r\n                syncUtils.syncForeground(\"home\");\r\n//                if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                        && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n//                    lastSyncAgo.setText(sessionManager.getLastTimeAgo());\r\n//                }\r\n            }\r\n        });\r\n        if (sessionManager.isFirstTimeLaunched()) {\r\n            mSyncProgressDialog = new ProgressDialog(HomeActivity.this, R.style.AlertDialogStyle); //thats how to add a style!\r\n            mSyncProgressDialog.setTitle(R.string.syncInProgress);\r\n            mSyncProgressDialog.setCancelable(false);\r\n            mSyncProgressDialog.setProgress(i);\r\n\r\n            mSyncProgressDialog.show();\r\n\r\n            syncUtils.initialSync(\"home\");\r\n        } else {\r\n            // if initial setup done then we can directly set the periodic background sync job\r\n            WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n        }\r\n\r\n\r\n        showProgressbar();\r\n    }\r\n\r\n    //function for handling the video library feature...\r\n    private void videoLibrary() {\r\n        if (!sessionManager.getLicenseKey().isEmpty())\r\n            hasLicense = true;\r\n        //Check for license key and load the correct config file\r\n        try {\r\n            JSONObject obj = null;\r\n            if (hasLicense) {\r\n                obj = new JSONObject(Objects.requireNonNullElse\r\n                        (FileUtils.readFileRoot(AppConstants.CONFIG_FILE_NAME, context),\r\n                                String.valueOf(FileUtils.encodeJSON(context, AppConstants.CONFIG_FILE_NAME)))); //Load the config file\r\n            } else {\r\n                obj = new JSONObject(String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)));\r\n            }\r\n\r\n            if (obj.has(\"video_library\")) {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                Uri uri = Uri.parse(obj.getString(\"video_library\"));\r\n                intent.setData(uri);\r\n                startActivity(intent);\r\n            } else {\r\n                Toast.makeText(context, \"No config attribute found\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } catch (JSONException e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Toast.makeText(getApplicationContext(), \"JsonException\" + e, Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    private void showProgressbar() {\r\n\r\n\r\n// instantiate it within the onCreate method\r\n        mProgressDialog = new ProgressDialog(HomeActivity.this);\r\n        mProgressDialog.setMessage(getString(R.string.download_protocols));\r\n        mProgressDialog.setIndeterminate(true);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n        mProgressDialog.setCancelable(false);\r\n    }\r\n\r\n\r\n    private String CalculateAgoTime() {\r\n        String finalTime = \"\";\r\n\r\n        String syncTime = sessionManager.getLastSyncDateTime();\r\n\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd MMM yyyy HH:mm\", Locale.getDefault());\r\n        ParsePosition pos = new ParsePosition(0);\r\n        long then = formatter.parse(syncTime, pos).getTime();\r\n        long now = new Date().getTime();\r\n\r\n        long seconds = (now - then) / 1000;\r\n        long minutes = seconds / 60;\r\n        long hours = minutes / 60;\r\n        long days = hours / 24;\r\n\r\n        String time = \"\";\r\n        long num = 0;\r\n        if (days > 0) {\r\n            num = days;\r\n            time = days + \" \" + context.getString(R.string.day);\r\n        } else if (hours > 0) {\r\n            num = hours;\r\n            time = hours + \" \" + context.getString(R.string.hour);\r\n        } else if (minutes >= 0) {\r\n            num = minutes;\r\n            time = minutes + \" \" + context.getString(R.string.minute);\r\n        }\r\n//      <For Seconds>\r\n//      else {\r\n//            num = seconds;\r\n//            time = seconds + \" second\";\r\n//      }\r\n        if (num > 1) {\r\n            time += context.getString(R.string.s);\r\n        }\r\n        finalTime = time + \" \" + context.getString(R.string.ago);\r\n\r\n        sessionManager.setLastTimeAgo(finalTime);\r\n\r\n        return finalTime;\r\n    }\r\n\r\n    private boolean isNetworkConnected() {\r\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        return cm.getActiveNetworkInfo() != null && cm.getActiveNetworkInfo().isConnected();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_home, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n//            case R.id.syncOption:\r\n//                refreshDatabases();\r\n//                return true;\r\n            case R.id.settingsOption:\r\n                settings();\r\n                return true;\r\n            case R.id.updateProtocolsOption: {\r\n\r\n\r\n                if (NetworkConnection.isOnline(this)) {\r\n\r\n                    if (!sessionManager.getLicenseKey().isEmpty()) {\r\n\r\n                        String licenseUrl = sessionManager.getMindMapServerUrl();\r\n                        String licenseKey = sessionManager.getLicenseKey();\r\n                        getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\", licenseKey);\r\n\r\n                    } else {\r\n//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);\r\n//                    LayoutInflater li = LayoutInflater.from(this);\r\n//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n//                    dialog.setTitle(getString(R.string.enter_license_key))\r\n//                            .setView(promptsView)\r\n//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//\r\n//                                    Dialog d = (Dialog) dialog;\r\n//\r\n//                                    EditText etURL = d.findViewById(R.id.licenseurl);\r\n//                                    EditText etKey = d.findViewById(R.id.licensekey);\r\n//                                    String url = etURL.getText().toString().replace(\" \", \"\");\r\n//                                    String key = etKey.getText().toString().trim();\r\n//\r\n//                                    if (url.isEmpty()) {\r\n//                                        etURL.setError(getResources().getString(R.string.enter_server_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (url.contains(\":\")) {\r\n//                                        etURL.setError(getResources().getString(R.string.invalid_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (key.isEmpty()) {\r\n//                                        etKey.setError(getResources().getString(R.string.enter_license_key));\r\n//                                        etKey.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//\r\n//                                    sessionManager.setMindMapServerUrl(url); //trim\r\n//                                    getMindmapDownloadURL(\"https://\" + url + \":3004/\", key);\r\n//\r\n//                                }\r\n//                            })\r\n//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//                                    dialog.dismiss();\r\n//                                }\r\n//                            });\r\n//                    Dialog builderDialog = dialog.show();\r\n//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);\r\n//\r\n//                    // }\r\n                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n                        LayoutInflater li = LayoutInflater.from(this);\r\n                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n\r\n                                        dialog.setTitle(getString(R.string.enter_license_key))\r\n                                                .setView(promptsView)\r\n                                                .setPositiveButton(getString(R.string.button_ok), null)\r\n                                                .setNegativeButton(getString(R.string.button_cancel), null);\r\n\r\n                                        AlertDialog alertDialog = dialog.create();\r\n                                        alertDialog.setView(promptsView, 20, 0, 20, 0);\r\n                                        alertDialog.show();\r\n                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...\r\n\r\n                                        // Get the alert dialog buttons reference\r\n                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\r\n                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);\r\n\r\n                                        // Change the alert dialog buttons text and background color\r\n                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n                                        positiveButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                EditText text = promptsView.findViewById(R.id.licensekey);\r\n                                                EditText url = promptsView.findViewById(R.id.licenseurl);\r\n\r\n                                                url.setError(null);\r\n                                                text.setError(null);\r\n\r\n                                                //If both are not entered...\r\n                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is empty...key is not empty...\r\n                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is not empty...key is empty...\r\n                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    text.requestFocus();\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url has : in it...\r\n                                                if (url.getText().toString().trim().contains(\":\")) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.invalid_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If url entered is Invalid...\r\n                                                if (!url.getText().toString().trim().isEmpty()) {\r\n                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {\r\n                                                        String url_field = \"https://\" + url.getText().toString() + \":3004/\";\r\n                                                        if (URLUtil.isValidUrl(url_field)) {\r\n                                                            key = text.getText().toString().trim();\r\n                                                            licenseUrl = url.getText().toString().trim();\r\n\r\n                                                            sessionManager.setMindMapServerUrl(licenseUrl);\r\n\r\n                                                            if (keyVerified(key)) {\r\n                                                                getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\",key);\r\n                                                                alertDialog.dismiss();\r\n                                                            }\r\n                                                        } else {\r\n                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n                                                        }\r\n\r\n                                                    } else {\r\n                                                        //invalid url || invalid url and key.\r\n                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();\r\n                                                    }\r\n                                                } else {\r\n                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();\r\n                                                }\r\n                                            }\r\n                                        });\r\n\r\n                                        negativeButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                alertDialog.dismiss();\r\n                                            }\r\n                                        });\r\n\r\n                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                }}else {\r\n                    Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n         /*   case R.id.sync:\r\n//                pullDataDAO.pullData(this);\r\n//                pullDataDAO.pushDataApi();\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, this);\r\n                boolean isSynced = syncUtils.syncForeground();\r\n//                boolean i = imagesPushDAO.patientProfileImagesPush();\r\n//                boolean o = imagesPushDAO.obsImagesPush();\r\n//                if (isSynced)\r\n//                    AppConstants.notificationUtils.showNotifications_noProgress(getString(R.string.sync_not_available), getString(R.string.please_connect_to_internet), getApplicationContext());\r\n//                else\r\n//                    AppConstants.notificationUtils.showNotifications(getString(R.string.image_upload), getString(R.string.image_upload_failed), 4, this);\r\n                return true;\r\n                */\r\n//            case R.id.backupOption:\r\n//                manageBackup(true, false);  // to backup app data at any time of the day\r\n//                return true;\r\n//\r\n//            case R.id.restoreOption:\r\n//                manageBackup(false, false); // to restore app data if db is empty\r\n//                return true;\r\n\r\n            case R.id.logoutOption:\r\n//                manageBackup(true, false);\r\n\r\n                MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n                alertdialogBuilder.setMessage(R.string.sure_to_logout);\r\n                alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        logout();\r\n                    }\r\n                });\r\n                alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n                AlertDialog alertDialog = alertdialogBuilder.create();\r\n                alertDialog.show();\r\n                Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n                Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n                positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method starts intent to another activity to change settings\r\n     *\r\n     * @return void\r\n     */\r\n    public void settings() {\r\n        Intent intent = new Intent(this, SettingsActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Logs out the user. It removes user account using AccountManager.\r\n     *\r\n     * @return void\r\n     */\r\n    public void logout() {\r\n\r\n        OfflineLogin.getOfflineLogin().setOfflineLoginStatus(false);\r\n\r\n//        parseLogOut();\r\n\r\n       /* AccountManager manager = AccountManager.get(HomeActivity.this);\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }*/\r\n     /*   Account[] accountList = manager.getAccountsByType(\"io.intelehealth.openmrs\");\r\n        if (accountList.length > 0) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                manager.removeAccount(accountList[0], HomeActivity.this, null, null);\r\n            } else {\r\n                manager.removeAccount(accountList[0], null, null); // Legacy implementation\r\n            }\r\n        }\r\n*/\r\n        Intent intent = new Intent(HomeActivity.this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n\r\n        SyncUtils syncUtils = new SyncUtils();\r\n        syncUtils.syncBackground();\r\n        sessionManager.setReturningUser(false);\r\n        sessionManager.setLogout(true);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        //IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        //registerReceiver(syncBroadcastReceiver, filter);\r\n        checkAppVer();  //auto-update feature.\r\n//        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n                && Locale.getDefault().toString().equals(\"en\")) {\r\n//            lastSyncAgo.setText(CalculateAgoTime());\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        registerReceiver(syncBroadcastReceiver, filter);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        try {\r\n            unregisterReceiver(syncBroadcastReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean keyVerified(String key) {\r\n        //TODO: Verify License Key\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        /*new AlertDialog.Builder(this)\r\n                .setMessage(\"Are you sure you want to EXIT ?\")\r\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        moveTaskToBack(true);\r\n                        finish();\r\n\r\n                    }\r\n\r\n                })\r\n                .setNegativeButton(\"No\", null)\r\n                .show();\r\n*/\r\n        MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n\r\n        // AlertDialog.Builder alertdialogBuilder = new AlertDialog.Builder(this, R.style.AlertDialogStyle);\r\n        alertdialogBuilder.setMessage(R.string.sure_to_exit);\r\n        alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                moveTaskToBack(true);\r\n                // finish();\r\n            }\r\n        });\r\n        alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n\r\n        AlertDialog alertDialog = alertdialogBuilder.create();\r\n        alertDialog.show();\r\n\r\n        Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n        Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n\r\n        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //positiveButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //negativeButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n    }\r\n\r\n    private List<Integer> mTempSyncHelperList = new ArrayList<Integer>();\r\n    private BroadcastReceiver syncBroadcastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Logger.logD(\"syncBroadcastReceiver\", \"onReceive! \" + intent);\r\n\r\n            if (intent != null && intent.hasExtra(AppConstants.SYNC_INTENT_DATA_KEY)) {\r\n                int flagType = intent.getIntExtra(AppConstants.SYNC_INTENT_DATA_KEY, AppConstants.SYNC_FAILED);\r\n                if (sessionManager.isFirstTimeLaunched()) {\r\n                    if (flagType == AppConstants.SYNC_FAILED) {\r\n                        hideSyncProgressBar(false);\r\n                        /*Toast.makeText(context, R.string.failed_synced, Toast.LENGTH_SHORT).show();\r\n                        finish();*/\r\n                        new AlertDialog.Builder(HomeActivity.this)\r\n                                .setMessage(R.string.failed_initial_synced)\r\n                                .setPositiveButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        finish();\r\n                                    }\r\n\r\n                                }).setCancelable(false)\r\n\r\n                                .show();\r\n                    } else {\r\n                        mTempSyncHelperList.add(flagType);\r\n                        if (mTempSyncHelperList.contains(AppConstants.SYNC_PULL_DATA_DONE)\r\n//                                && mTempSyncHelperList.contains(AppConstants.SYNC_PUSH_DATA_DONE)\r\n                                /*&& mTempSyncHelperList.contains(AppConstants.SYNC_PATIENT_PROFILE_IMAGE_PUSH_DONE)\r\n                                && mTempSyncHelperList.contains(AppConstants.SYNC_OBS_IMAGE_PUSH_DONE)*/) {\r\n                            hideSyncProgressBar(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        }\r\n    };\r\n\r\n    private void hideSyncProgressBar(boolean isSuccess) {\r\n        if (mTempSyncHelperList != null) mTempSyncHelperList.clear();\r\n        if (mSyncProgressDialog != null && mSyncProgressDialog.isShowing()) {\r\n            mSyncProgressDialog.dismiss();\r\n            if (isSuccess) {\r\n\r\n                sessionManager.setFirstTimeLaunched(false);\r\n                sessionManager.setMigration(true);\r\n                // initial setup/sync done and now we can set the periodic background sync job\r\n                // given some delay after initial sync\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n                    }\r\n                }, 10000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMindmapDownloadURL(String url, String key) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url); //trim\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        try {\r\n            Observable<DownloadMindMapRes> resultsObservable = apiService.DOWNLOAD_MIND_MAP_RES_OBSERVABLE(key);\r\n            resultsObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<DownloadMindMapRes>() {\r\n                        @Override\r\n                        public void onNext(DownloadMindMapRes res) {\r\n                            customProgressDialog.dismiss();\r\n                            if (res.getMessage() != null && res.getMessage().equalsIgnoreCase(\"Success\")) {\r\n\r\n                                Log.e(\"MindMapURL\", \"Successfully get MindMap URL\");\r\n                                mTask = new DownloadMindMaps(context, mProgressDialog);\r\n                                mindmapURL = res.getMindmap().trim();\r\n                                sessionManager.setLicenseKey(key);\r\n                                checkExistingMindMaps();\r\n\r\n                            } else {\r\n                                Toast.makeText(context, getResources().getString(R.string.no_protocols_found), Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n                            customProgressDialog.dismiss();\r\n                            Toast.makeText(context, getResources().getString(R.string.unable_to_get_proper_response), Toast.LENGTH_SHORT).show();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n\r\n                        }\r\n                    });\r\n        } catch (IllegalArgumentException e) {\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getMessage());\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getStackTrace());\r\n        }\r\n    }\r\n\r\n    private void checkExistingMindMaps() {\r\n\r\n        //Check is there any existing mindmaps are present, if yes then delete.\r\n\r\n        File engines = new File(context.getFilesDir().getAbsolutePath(), \"/Engines\");\r\n        Log.e(TAG, \"Engines folder=\" + engines.exists());\r\n        if (engines.exists()) {\r\n            engines.delete();\r\n        }\r\n        File logo = new File(context.getFilesDir().getAbsolutePath(), \"/logo\");\r\n        Log.e(TAG, \"Logo folder=\" + logo.exists());\r\n        if (logo.exists()) {\r\n            logo.delete();\r\n        }\r\n        File physicalExam = new File(context.getFilesDir().getAbsolutePath() + \"/physExam.json\");\r\n        Log.e(TAG, \"physExam.json=\" + physicalExam.exists());\r\n        if (physicalExam.exists()) {\r\n            physicalExam.delete();\r\n        }\r\n        File familyHistory = new File(context.getFilesDir().getAbsolutePath() + \"/famHist.json\");\r\n        Log.e(TAG, \"famHist.json=\" + familyHistory.exists());\r\n        if (familyHistory.exists()) {\r\n            familyHistory.delete();\r\n        }\r\n        File pastMedicalHistory = new File(context.getFilesDir().getAbsolutePath() + \"/patHist.json\");\r\n        Log.e(TAG, \"patHist.json=\" + pastMedicalHistory.exists());\r\n        if (pastMedicalHistory.exists()) {\r\n            pastMedicalHistory.delete();\r\n        }\r\n        File config = new File(context.getFilesDir().getAbsolutePath() + \"/config.json\");\r\n        Log.e(TAG, \"config.json=\" + config.exists());\r\n        if (config.exists()) {\r\n            config.delete();\r\n        }\r\n\r\n        //Start downloading mindmaps\r\n        mTask.execute(mindmapURL, context.getFilesDir().getAbsolutePath() + \"/mindmaps.zip\");\r\n        Log.e(\"DOWNLOAD\", \"isSTARTED\");\r\n\r\n    }\r\n\r\n    private void checkAppVer() {\r\n\r\n        try {\r\n            PackageInfo pInfo = context.getPackageManager().getPackageInfo(getPackageName(), 0);\r\n            String version = pInfo.versionName;\r\n            versionCode = pInfo.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        disposable.add((Disposable) AppConstants.apiInterface.checkAppUpdate()\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribeWith(new DisposableSingleObserver<CheckAppUpdateRes>() {\r\n                    @Override\r\n                    public void onSuccess(CheckAppUpdateRes res) {\r\n                        int latestVersionCode = 0;\r\n                        if (!res.getLatestVersionCode().isEmpty()) {\r\n                            latestVersionCode = Integer.parseInt(res.getLatestVersionCode());\r\n                        }\r\n\r\n                        if (latestVersionCode > versionCode) {\r\n                            android.app.AlertDialog.Builder builder;\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this, android.R.style.Theme_Material_Dialog_Alert);\r\n                            } else {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this);\r\n                            }\r\n\r\n\r\n                            builder.setTitle(getResources().getString(R.string.new_update_available))\r\n                                    .setCancelable(false)\r\n                                    .setMessage(getResources().getString(R.string.update_app_note))\r\n                                    .setPositiveButton(getResources().getString(R.string.update), new DialogInterface.OnClickListener() {\r\n                                        public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                            final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object\r\n                                            try {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + appPackageName)));\r\n                                            } catch (ActivityNotFoundException anfe) {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));\r\n                                            }\r\n\r\n                                        }\r\n                                    })\r\n\r\n                                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                                    .setCancelable(false);\r\n\r\n                            Dialog dialog = builder.show();\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                int textViewId = dialog.getContext().getResources().getIdentifier(\"android:id/alertTitle\", null, null);\r\n                                TextView tv = (TextView) dialog.findViewById(textViewId);\r\n                                tv.setTextColor(getResources().getColor(R.color.white));\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable e) {\r\n                        Log.e(\"Error\", \"\" + e);\r\n                    }\r\n                })\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+--- app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(revision 3dfc6cc3ab4d038979a3b922a72c02dc02e76966)
-++++ app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(date 1621420665837)
-+@@ -395,61 +395,61 @@
-+ 
-+                 if (NetworkConnection.isOnline(this)) {
-+ 
-+-                    if (!sessionManager.getLicenseKey().isEmpty()) {
-++                    /*if (!sessionManager.getLicenseKey().isEmpty()) {
-+ 
-+                         String licenseUrl = sessionManager.getMindMapServerUrl();
-+                         String licenseKey = sessionManager.getLicenseKey();
-+                         getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-+ 
-+-                    } else {
-+-//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-+-//                    LayoutInflater li = LayoutInflater.from(this);
-+-//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-//                    dialog.setTitle(getString(R.string.enter_license_key))
-+-//                            .setView(promptsView)
-+-//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//
-+-//                                    Dialog d = (Dialog) dialog;
-+-//
-+-//                                    EditText etURL = d.findViewById(R.id.licenseurl);
-+-//                                    EditText etKey = d.findViewById(R.id.licensekey);
-+-//                                    String url = etURL.getText().toString().replace(" ", "");
-+-//                                    String key = etKey.getText().toString().trim();
-+-//
-+-//                                    if (url.isEmpty()) {
-+-//                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (url.contains(":")) {
-+-//                                        etURL.setError(getResources().getString(R.string.invalid_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (key.isEmpty()) {
-+-//                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-+-//                                        etKey.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//
-+-//                                    sessionManager.setMindMapServerUrl(url); //trim
-+-//                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-+-//
-+-//                                }
-+-//                            })
-+-//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//                                    dialog.dismiss();
-+-//                                }
-+-//                            });
-+-//                    Dialog builderDialog = dialog.show();
-+-//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-+-//
-+-//                    // }
-++                    }else {*/
-++                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-++                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-++                    LayoutInflater li = LayoutInflater.from(this);
-++                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-++                    dialog.setTitle(getString(R.string.enter_license_key))
-++                            .setView(promptsView)
-++                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-++
-++                                    Dialog d = (Dialog) dialog;
-++
-++                                    EditText etURL = d.findViewById(R.id.licenseurl);
-++                                    EditText etKey = d.findViewById(R.id.licensekey);
-++                                    String url = etURL.getText().toString().replace(" ", "");
-++                                    String key = etKey.getText().toString().trim();
-++
-++                                    if (url.isEmpty()) {
-++                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (url.contains(":")) {
-++                                        etURL.setError(getResources().getString(R.string.invalid_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (key.isEmpty()) {
-++                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-++                                        etKey.requestFocus();
-++                                        return;
-++                                    }
-++
-++                                    sessionManager.setMindMapServerUrl(url); //trim
-++                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-++
-++                                }
-++                            })
-++                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-++                                    dialog.dismiss();
-++                                }
-++                            });
-++                    Dialog builderDialog = dialog.show();
-++                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-++
-++                    // }
-+                         MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+                         LayoutInflater li = LayoutInflater.from(this);
-+                         View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+@@ -547,7 +547,7 @@
-+ 
-+                         IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);
-+ 
-+-                }}else {
-++                } else {
-+                     Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();
-+                 }
-+ 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_52__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_52__Default_Changelist_.xml	(date 1621420939940)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_52__Default_Changelist_.xml	(date 1621420939940)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_19-05-2021_15_52_[Default_Changelist]" date="1621419772473" recycled="false" toDelete="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_52_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19-05-2021 15:52 [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55__Default_Changelist_.xml	(date 1621420939973)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55__Default_Changelist_.xml	(date 1621420939973)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]" date="1621419916930" recycled="false" toDelete="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19-05-2021 15:55 [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_02_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_02_[Default_Changelist]/shelved.patch	(date 1621420899667)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_02_[Default_Changelist]/shelved.patch	(date 1621420899667)
-@@ -0,0 +1,231 @@
-+Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package org.intelehealth.ekalhelpline.activities.homeActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.work.ExistingPeriodicWorkPolicy;\r\nimport androidx.work.WorkManager;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.activities.activePatientsActivity.ActivePatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.loginActivity.LoginActivity;\r\nimport org.intelehealth.ekalhelpline.activities.searchPatientActivity.SearchPatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.settingsActivity.SettingsActivity;\r\nimport org.intelehealth.ekalhelpline.activities.todayPatientActivity.TodayPatientActivity;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.models.CheckAppUpdateRes;\r\nimport org.intelehealth.ekalhelpline.models.DownloadMindMapRes;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.syncModule.SyncUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;\r\nimport org.intelehealth.ekalhelpline.utilities.FileUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkConnection;\r\nimport org.intelehealth.ekalhelpline.utilities.OfflineLogin;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\nimport org.intelehealth.ekalhelpline.widget.materialprogressbar.CustomProgressDialog;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.disposables.CompositeDisposable;\r\nimport io.reactivex.disposables.Disposable;\r\nimport io.reactivex.observers.DisposableObserver;\r\nimport io.reactivex.observers.DisposableSingleObserver;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n/**\r\n * Home Screen\r\n */\r\n\r\npublic class HomeActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = HomeActivity.class.getSimpleName();\r\n    SessionManager sessionManager = null;\r\n    private ProgressDialog mSyncProgressDialog;\r\n    CountDownTimer CDT;\r\n    private boolean hasLicense = false;\r\n    int i = 5;\r\n\r\n    TextView lastSyncTextView;\r\n    TextView lastSyncAgo;\r\n    Button manualSyncButton;\r\n    //IntentFilter filter;\r\n\r\n    SyncUtils syncUtils = new SyncUtils();\r\n    CardView c1, c2, c3, c4, c5, c6;\r\n    private String key = null;\r\n    private String licenseUrl = null;\r\n\r\n    Context context;\r\n    CustomProgressDialog customProgressDialog;\r\n    private String mindmapURL = \"\";\r\n    private DownloadMindMaps mTask;\r\n    ProgressDialog mProgressDialog;\r\n\r\n    private int versionCode = 0;\r\n    private CompositeDisposable disposable = new CompositeDisposable();\r\n    TextView newPatient_textview, findPatients_textview, todaysVisits_textview,\r\n            activeVisits_textview, videoLibrary_textview, help_textview;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_home);\r\n        sessionManager = new SessionManager(this);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n\r\n        String language = sessionManager.getAppLanguage();\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n\r\n        setTitle(R.string.title_activity_login);\r\n        context = HomeActivity.this;\r\n        customProgressDialog = new CustomProgressDialog(context);\r\n        /*syncBroadcastReceiver = new SyncBroadcastReceiver();\r\n        filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);*/\r\n\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        checkAppVer();  //auto-update feature.\r\n\r\n        Logger.logD(TAG, \"onCreate: \" + getFilesDir().toString());\r\n        lastSyncTextView = findViewById(R.id.lastsynctextview);\r\n        lastSyncAgo = findViewById(R.id.lastsyncago);\r\n        manualSyncButton = findViewById(R.id.manualsyncbutton);\r\n//        manualSyncButton.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);\r\n       // c1 = findViewById(R.id.cardview_newpat);\r\n        c2 = findViewById(R.id.cardview_find_patient);\r\n        c3 = findViewById(R.id.cardview_today_patient);\r\n        c4 = findViewById(R.id.cardview_active_patients);\r\n        c5 = findViewById(R.id.cardview_video_libraby);\r\n        c6 = findViewById(R.id.cardview_help_whatsapp);\r\n\r\n        //card textview referrenced to fix bug of localization not working in some cases...\r\n     /*   newPatient_textview = findViewById(R.id.newPatient_textview);\r\n        newPatient_textview.setText(R.string.new_patient);*/\r\n\r\n        findPatients_textview = findViewById(R.id.findPatients_textview);\r\n        findPatients_textview.setText(R.string.find_patient);\r\n\r\n        todaysVisits_textview = findViewById(R.id.todaysVisits_textview);\r\n        todaysVisits_textview.setText(R.string.today_visits);\r\n\r\n        activeVisits_textview = findViewById(R.id.activeVisits_textview);\r\n        activeVisits_textview.setText(R.string.active_visits);\r\n\r\n        videoLibrary_textview = findViewById(R.id.videoLibrary_textview);\r\n        videoLibrary_textview.setText(R.string.video_library);\r\n\r\n        help_textview = findViewById(R.id.help_textview);\r\n        help_textview.setText(R.string.Whatsapp_Help_Cardview);\r\n\r\n        // manualSyncButton.setText(R.string.sync_now);\r\n        manualSyncButton.setText(R.string.refresh);\r\n\r\n        //Help section of watsapp...\r\n        c6.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String phoneNumberWithCountryCode = \"+917005308163\";\r\n                String message =\r\n                        getString(R.string.hello_my_name_is) + \" \" + sessionManager.getChwname() + \" \" +\r\n                                /*\" from \" + sessionManager.getState() + */getString(R.string.i_need_assistance);\r\n\r\n                startActivity(new Intent(Intent.ACTION_VIEW,\r\n                        Uri.parse(\r\n                                String.format(\"https://api.whatsapp.com/send?phone=%s&text=%s\",\r\n                                        phoneNumberWithCountryCode, message))));\r\n            }\r\n        });\r\n/*\r\n        c1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Loads the config file values and check for the boolean value of privacy key.\r\n                ConfigUtils configUtils = new ConfigUtils(HomeActivity.this);\r\n                if (configUtils.privacy_notice()) {\r\n                    Intent intent = new Intent(HomeActivity.this, PrivacyNotice_Activity.class);\r\n                    startActivity(intent);\r\n                } else {\r\n                    //Clear HouseHold UUID from Session for new registration\r\n                    sessionManager.setHouseholdUuid(\"\");\r\n\r\n                    Intent intent = new Intent(HomeActivity.this, IdentificationActivity.class);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n*/\r\n        c2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, SearchPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, TodayPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c4.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, ActivePatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                videoLibrary();\r\n            }\r\n        });\r\n\r\n\r\n        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n\r\n//        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n////            lastSyncAgo.setText(CalculateAgoTime());\r\n//        }\r\n\r\n        manualSyncButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, context);\r\n\r\n                if (isNetworkConnected()) {\r\n                    Toast.makeText(context, getString(R.string.syncInProgress), Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Toast.makeText(context, context.getString(R.string.failed_synced), Toast.LENGTH_LONG).show();\r\n                }\r\n\r\n                syncUtils.syncForeground(\"home\");\r\n//                if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                        && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n//                    lastSyncAgo.setText(sessionManager.getLastTimeAgo());\r\n//                }\r\n            }\r\n        });\r\n        if (sessionManager.isFirstTimeLaunched()) {\r\n            mSyncProgressDialog = new ProgressDialog(HomeActivity.this, R.style.AlertDialogStyle); //thats how to add a style!\r\n            mSyncProgressDialog.setTitle(R.string.syncInProgress);\r\n            mSyncProgressDialog.setCancelable(false);\r\n            mSyncProgressDialog.setProgress(i);\r\n\r\n            mSyncProgressDialog.show();\r\n\r\n            syncUtils.initialSync(\"home\");\r\n        } else {\r\n            // if initial setup done then we can directly set the periodic background sync job\r\n            WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n        }\r\n\r\n\r\n        showProgressbar();\r\n    }\r\n\r\n    //function for handling the video library feature...\r\n    private void videoLibrary() {\r\n        if (!sessionManager.getLicenseKey().isEmpty())\r\n            hasLicense = true;\r\n        //Check for license key and load the correct config file\r\n        try {\r\n            JSONObject obj = null;\r\n            if (hasLicense) {\r\n                obj = new JSONObject(Objects.requireNonNullElse\r\n                        (FileUtils.readFileRoot(AppConstants.CONFIG_FILE_NAME, context),\r\n                                String.valueOf(FileUtils.encodeJSON(context, AppConstants.CONFIG_FILE_NAME)))); //Load the config file\r\n            } else {\r\n                obj = new JSONObject(String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)));\r\n            }\r\n\r\n            if (obj.has(\"video_library\")) {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                Uri uri = Uri.parse(obj.getString(\"video_library\"));\r\n                intent.setData(uri);\r\n                startActivity(intent);\r\n            } else {\r\n                Toast.makeText(context, \"No config attribute found\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } catch (JSONException e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Toast.makeText(getApplicationContext(), \"JsonException\" + e, Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    private void showProgressbar() {\r\n\r\n\r\n// instantiate it within the onCreate method\r\n        mProgressDialog = new ProgressDialog(HomeActivity.this);\r\n        mProgressDialog.setMessage(getString(R.string.download_protocols));\r\n        mProgressDialog.setIndeterminate(true);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n        mProgressDialog.setCancelable(false);\r\n    }\r\n\r\n\r\n    private String CalculateAgoTime() {\r\n        String finalTime = \"\";\r\n\r\n        String syncTime = sessionManager.getLastSyncDateTime();\r\n\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd MMM yyyy HH:mm\", Locale.getDefault());\r\n        ParsePosition pos = new ParsePosition(0);\r\n        long then = formatter.parse(syncTime, pos).getTime();\r\n        long now = new Date().getTime();\r\n\r\n        long seconds = (now - then) / 1000;\r\n        long minutes = seconds / 60;\r\n        long hours = minutes / 60;\r\n        long days = hours / 24;\r\n\r\n        String time = \"\";\r\n        long num = 0;\r\n        if (days > 0) {\r\n            num = days;\r\n            time = days + \" \" + context.getString(R.string.day);\r\n        } else if (hours > 0) {\r\n            num = hours;\r\n            time = hours + \" \" + context.getString(R.string.hour);\r\n        } else if (minutes >= 0) {\r\n            num = minutes;\r\n            time = minutes + \" \" + context.getString(R.string.minute);\r\n        }\r\n//      <For Seconds>\r\n//      else {\r\n//            num = seconds;\r\n//            time = seconds + \" second\";\r\n//      }\r\n        if (num > 1) {\r\n            time += context.getString(R.string.s);\r\n        }\r\n        finalTime = time + \" \" + context.getString(R.string.ago);\r\n\r\n        sessionManager.setLastTimeAgo(finalTime);\r\n\r\n        return finalTime;\r\n    }\r\n\r\n    private boolean isNetworkConnected() {\r\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        return cm.getActiveNetworkInfo() != null && cm.getActiveNetworkInfo().isConnected();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_home, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n//            case R.id.syncOption:\r\n//                refreshDatabases();\r\n//                return true;\r\n            case R.id.settingsOption:\r\n                settings();\r\n                return true;\r\n            case R.id.updateProtocolsOption: {\r\n\r\n\r\n                if (NetworkConnection.isOnline(this)) {\r\n\r\n                    if (!sessionManager.getLicenseKey().isEmpty()) {\r\n\r\n                        String licenseUrl = sessionManager.getMindMapServerUrl();\r\n                        String licenseKey = sessionManager.getLicenseKey();\r\n                        getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\", licenseKey);\r\n\r\n                    } else {\r\n//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);\r\n//                    LayoutInflater li = LayoutInflater.from(this);\r\n//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n//                    dialog.setTitle(getString(R.string.enter_license_key))\r\n//                            .setView(promptsView)\r\n//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//\r\n//                                    Dialog d = (Dialog) dialog;\r\n//\r\n//                                    EditText etURL = d.findViewById(R.id.licenseurl);\r\n//                                    EditText etKey = d.findViewById(R.id.licensekey);\r\n//                                    String url = etURL.getText().toString().replace(\" \", \"\");\r\n//                                    String key = etKey.getText().toString().trim();\r\n//\r\n//                                    if (url.isEmpty()) {\r\n//                                        etURL.setError(getResources().getString(R.string.enter_server_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (url.contains(\":\")) {\r\n//                                        etURL.setError(getResources().getString(R.string.invalid_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (key.isEmpty()) {\r\n//                                        etKey.setError(getResources().getString(R.string.enter_license_key));\r\n//                                        etKey.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//\r\n//                                    sessionManager.setMindMapServerUrl(url); //trim\r\n//                                    getMindmapDownloadURL(\"https://\" + url + \":3004/\", key);\r\n//\r\n//                                }\r\n//                            })\r\n//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//                                    dialog.dismiss();\r\n//                                }\r\n//                            });\r\n//                    Dialog builderDialog = dialog.show();\r\n//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);\r\n//\r\n//                    // }\r\n                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n                        LayoutInflater li = LayoutInflater.from(this);\r\n                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n\r\n                                        dialog.setTitle(getString(R.string.enter_license_key))\r\n                                                .setView(promptsView)\r\n                                                .setPositiveButton(getString(R.string.button_ok), null)\r\n                                                .setNegativeButton(getString(R.string.button_cancel), null);\r\n\r\n                                        AlertDialog alertDialog = dialog.create();\r\n                                        alertDialog.setView(promptsView, 20, 0, 20, 0);\r\n                                        alertDialog.show();\r\n                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...\r\n\r\n                                        // Get the alert dialog buttons reference\r\n                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\r\n                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);\r\n\r\n                                        // Change the alert dialog buttons text and background color\r\n                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n                                        positiveButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                EditText text = promptsView.findViewById(R.id.licensekey);\r\n                                                EditText url = promptsView.findViewById(R.id.licenseurl);\r\n\r\n                                                url.setError(null);\r\n                                                text.setError(null);\r\n\r\n                                                //If both are not entered...\r\n                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is empty...key is not empty...\r\n                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is not empty...key is empty...\r\n                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    text.requestFocus();\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url has : in it...\r\n                                                if (url.getText().toString().trim().contains(\":\")) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.invalid_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If url entered is Invalid...\r\n                                                if (!url.getText().toString().trim().isEmpty()) {\r\n                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {\r\n                                                        String url_field = \"https://\" + url.getText().toString() + \":3004/\";\r\n                                                        if (URLUtil.isValidUrl(url_field)) {\r\n                                                            key = text.getText().toString().trim();\r\n                                                            licenseUrl = url.getText().toString().trim();\r\n\r\n                                                            sessionManager.setMindMapServerUrl(licenseUrl);\r\n\r\n                                                            if (keyVerified(key)) {\r\n                                                                getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\",key);\r\n                                                                alertDialog.dismiss();\r\n                                                            }\r\n                                                        } else {\r\n                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n                                                        }\r\n\r\n                                                    } else {\r\n                                                        //invalid url || invalid url and key.\r\n                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();\r\n                                                    }\r\n                                                } else {\r\n                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();\r\n                                                }\r\n                                            }\r\n                                        });\r\n\r\n                                        negativeButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                alertDialog.dismiss();\r\n                                            }\r\n                                        });\r\n\r\n                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                }}else {\r\n                    Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n         /*   case R.id.sync:\r\n//                pullDataDAO.pullData(this);\r\n//                pullDataDAO.pushDataApi();\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, this);\r\n                boolean isSynced = syncUtils.syncForeground();\r\n//                boolean i = imagesPushDAO.patientProfileImagesPush();\r\n//                boolean o = imagesPushDAO.obsImagesPush();\r\n//                if (isSynced)\r\n//                    AppConstants.notificationUtils.showNotifications_noProgress(getString(R.string.sync_not_available), getString(R.string.please_connect_to_internet), getApplicationContext());\r\n//                else\r\n//                    AppConstants.notificationUtils.showNotifications(getString(R.string.image_upload), getString(R.string.image_upload_failed), 4, this);\r\n                return true;\r\n                */\r\n//            case R.id.backupOption:\r\n//                manageBackup(true, false);  // to backup app data at any time of the day\r\n//                return true;\r\n//\r\n//            case R.id.restoreOption:\r\n//                manageBackup(false, false); // to restore app data if db is empty\r\n//                return true;\r\n\r\n            case R.id.logoutOption:\r\n//                manageBackup(true, false);\r\n\r\n                MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n                alertdialogBuilder.setMessage(R.string.sure_to_logout);\r\n                alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        logout();\r\n                    }\r\n                });\r\n                alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n                AlertDialog alertDialog = alertdialogBuilder.create();\r\n                alertDialog.show();\r\n                Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n                Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n                positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method starts intent to another activity to change settings\r\n     *\r\n     * @return void\r\n     */\r\n    public void settings() {\r\n        Intent intent = new Intent(this, SettingsActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Logs out the user. It removes user account using AccountManager.\r\n     *\r\n     * @return void\r\n     */\r\n    public void logout() {\r\n\r\n        OfflineLogin.getOfflineLogin().setOfflineLoginStatus(false);\r\n\r\n//        parseLogOut();\r\n\r\n       /* AccountManager manager = AccountManager.get(HomeActivity.this);\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }*/\r\n     /*   Account[] accountList = manager.getAccountsByType(\"io.intelehealth.openmrs\");\r\n        if (accountList.length > 0) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                manager.removeAccount(accountList[0], HomeActivity.this, null, null);\r\n            } else {\r\n                manager.removeAccount(accountList[0], null, null); // Legacy implementation\r\n            }\r\n        }\r\n*/\r\n        Intent intent = new Intent(HomeActivity.this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n\r\n        SyncUtils syncUtils = new SyncUtils();\r\n        syncUtils.syncBackground();\r\n        sessionManager.setReturningUser(false);\r\n        sessionManager.setLogout(true);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        //IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        //registerReceiver(syncBroadcastReceiver, filter);\r\n        checkAppVer();  //auto-update feature.\r\n//        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n                && Locale.getDefault().toString().equals(\"en\")) {\r\n//            lastSyncAgo.setText(CalculateAgoTime());\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        registerReceiver(syncBroadcastReceiver, filter);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        try {\r\n            unregisterReceiver(syncBroadcastReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean keyVerified(String key) {\r\n        //TODO: Verify License Key\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        /*new AlertDialog.Builder(this)\r\n                .setMessage(\"Are you sure you want to EXIT ?\")\r\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        moveTaskToBack(true);\r\n                        finish();\r\n\r\n                    }\r\n\r\n                })\r\n                .setNegativeButton(\"No\", null)\r\n                .show();\r\n*/\r\n        MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n\r\n        // AlertDialog.Builder alertdialogBuilder = new AlertDialog.Builder(this, R.style.AlertDialogStyle);\r\n        alertdialogBuilder.setMessage(R.string.sure_to_exit);\r\n        alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                moveTaskToBack(true);\r\n                // finish();\r\n            }\r\n        });\r\n        alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n\r\n        AlertDialog alertDialog = alertdialogBuilder.create();\r\n        alertDialog.show();\r\n\r\n        Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n        Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n\r\n        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //positiveButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //negativeButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n    }\r\n\r\n    private List<Integer> mTempSyncHelperList = new ArrayList<Integer>();\r\n    private BroadcastReceiver syncBroadcastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Logger.logD(\"syncBroadcastReceiver\", \"onReceive! \" + intent);\r\n\r\n            if (intent != null && intent.hasExtra(AppConstants.SYNC_INTENT_DATA_KEY)) {\r\n                int flagType = intent.getIntExtra(AppConstants.SYNC_INTENT_DATA_KEY, AppConstants.SYNC_FAILED);\r\n                if (sessionManager.isFirstTimeLaunched()) {\r\n                    if (flagType == AppConstants.SYNC_FAILED) {\r\n                        hideSyncProgressBar(false);\r\n                        /*Toast.makeText(context, R.string.failed_synced, Toast.LENGTH_SHORT).show();\r\n                        finish();*/\r\n                        new AlertDialog.Builder(HomeActivity.this)\r\n                                .setMessage(R.string.failed_initial_synced)\r\n                                .setPositiveButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        finish();\r\n                                    }\r\n\r\n                                }).setCancelable(false)\r\n\r\n                                .show();\r\n                    } else {\r\n                        mTempSyncHelperList.add(flagType);\r\n                        if (mTempSyncHelperList.contains(AppConstants.SYNC_PULL_DATA_DONE)\r\n//                                && mTempSyncHelperList.contains(AppConstants.SYNC_PUSH_DATA_DONE)\r\n                                /*&& mTempSyncHelperList.contains(AppConstants.SYNC_PATIENT_PROFILE_IMAGE_PUSH_DONE)\r\n                                && mTempSyncHelperList.contains(AppConstants.SYNC_OBS_IMAGE_PUSH_DONE)*/) {\r\n                            hideSyncProgressBar(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        }\r\n    };\r\n\r\n    private void hideSyncProgressBar(boolean isSuccess) {\r\n        if (mTempSyncHelperList != null) mTempSyncHelperList.clear();\r\n        if (mSyncProgressDialog != null && mSyncProgressDialog.isShowing()) {\r\n            mSyncProgressDialog.dismiss();\r\n            if (isSuccess) {\r\n\r\n                sessionManager.setFirstTimeLaunched(false);\r\n                sessionManager.setMigration(true);\r\n                // initial setup/sync done and now we can set the periodic background sync job\r\n                // given some delay after initial sync\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n                    }\r\n                }, 10000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMindmapDownloadURL(String url, String key) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url); //trim\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        try {\r\n            Observable<DownloadMindMapRes> resultsObservable = apiService.DOWNLOAD_MIND_MAP_RES_OBSERVABLE(key);\r\n            resultsObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<DownloadMindMapRes>() {\r\n                        @Override\r\n                        public void onNext(DownloadMindMapRes res) {\r\n                            customProgressDialog.dismiss();\r\n                            if (res.getMessage() != null && res.getMessage().equalsIgnoreCase(\"Success\")) {\r\n\r\n                                Log.e(\"MindMapURL\", \"Successfully get MindMap URL\");\r\n                                mTask = new DownloadMindMaps(context, mProgressDialog);\r\n                                mindmapURL = res.getMindmap().trim();\r\n                                sessionManager.setLicenseKey(key);\r\n                                checkExistingMindMaps();\r\n\r\n                            } else {\r\n                                Toast.makeText(context, getResources().getString(R.string.no_protocols_found), Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n                            customProgressDialog.dismiss();\r\n                            Toast.makeText(context, getResources().getString(R.string.unable_to_get_proper_response), Toast.LENGTH_SHORT).show();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n\r\n                        }\r\n                    });\r\n        } catch (IllegalArgumentException e) {\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getMessage());\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getStackTrace());\r\n        }\r\n    }\r\n\r\n    private void checkExistingMindMaps() {\r\n\r\n        //Check is there any existing mindmaps are present, if yes then delete.\r\n\r\n        File engines = new File(context.getFilesDir().getAbsolutePath(), \"/Engines\");\r\n        Log.e(TAG, \"Engines folder=\" + engines.exists());\r\n        if (engines.exists()) {\r\n            engines.delete();\r\n        }\r\n        File logo = new File(context.getFilesDir().getAbsolutePath(), \"/logo\");\r\n        Log.e(TAG, \"Logo folder=\" + logo.exists());\r\n        if (logo.exists()) {\r\n            logo.delete();\r\n        }\r\n        File physicalExam = new File(context.getFilesDir().getAbsolutePath() + \"/physExam.json\");\r\n        Log.e(TAG, \"physExam.json=\" + physicalExam.exists());\r\n        if (physicalExam.exists()) {\r\n            physicalExam.delete();\r\n        }\r\n        File familyHistory = new File(context.getFilesDir().getAbsolutePath() + \"/famHist.json\");\r\n        Log.e(TAG, \"famHist.json=\" + familyHistory.exists());\r\n        if (familyHistory.exists()) {\r\n            familyHistory.delete();\r\n        }\r\n        File pastMedicalHistory = new File(context.getFilesDir().getAbsolutePath() + \"/patHist.json\");\r\n        Log.e(TAG, \"patHist.json=\" + pastMedicalHistory.exists());\r\n        if (pastMedicalHistory.exists()) {\r\n            pastMedicalHistory.delete();\r\n        }\r\n        File config = new File(context.getFilesDir().getAbsolutePath() + \"/config.json\");\r\n        Log.e(TAG, \"config.json=\" + config.exists());\r\n        if (config.exists()) {\r\n            config.delete();\r\n        }\r\n\r\n        //Start downloading mindmaps\r\n        mTask.execute(mindmapURL, context.getFilesDir().getAbsolutePath() + \"/mindmaps.zip\");\r\n        Log.e(\"DOWNLOAD\", \"isSTARTED\");\r\n\r\n    }\r\n\r\n    private void checkAppVer() {\r\n\r\n        try {\r\n            PackageInfo pInfo = context.getPackageManager().getPackageInfo(getPackageName(), 0);\r\n            String version = pInfo.versionName;\r\n            versionCode = pInfo.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        disposable.add((Disposable) AppConstants.apiInterface.checkAppUpdate()\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribeWith(new DisposableSingleObserver<CheckAppUpdateRes>() {\r\n                    @Override\r\n                    public void onSuccess(CheckAppUpdateRes res) {\r\n                        int latestVersionCode = 0;\r\n                        if (!res.getLatestVersionCode().isEmpty()) {\r\n                            latestVersionCode = Integer.parseInt(res.getLatestVersionCode());\r\n                        }\r\n\r\n                        if (latestVersionCode > versionCode) {\r\n                            android.app.AlertDialog.Builder builder;\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this, android.R.style.Theme_Material_Dialog_Alert);\r\n                            } else {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this);\r\n                            }\r\n\r\n\r\n                            builder.setTitle(getResources().getString(R.string.new_update_available))\r\n                                    .setCancelable(false)\r\n                                    .setMessage(getResources().getString(R.string.update_app_note))\r\n                                    .setPositiveButton(getResources().getString(R.string.update), new DialogInterface.OnClickListener() {\r\n                                        public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                            final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object\r\n                                            try {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + appPackageName)));\r\n                                            } catch (ActivityNotFoundException anfe) {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));\r\n                                            }\r\n\r\n                                        }\r\n                                    })\r\n\r\n                                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                                    .setCancelable(false);\r\n\r\n                            Dialog dialog = builder.show();\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                int textViewId = dialog.getContext().getResources().getIdentifier(\"android:id/alertTitle\", null, null);\r\n                                TextView tv = (TextView) dialog.findViewById(textViewId);\r\n                                tv.setTextColor(getResources().getColor(R.color.white));\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable e) {\r\n                        Log.e(\"Error\", \"\" + e);\r\n                    }\r\n                })\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+--- app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(revision 3dfc6cc3ab4d038979a3b922a72c02dc02e76966)
-++++ app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(date 1621420335123)
-+@@ -19,13 +19,11 @@
-+ import android.os.CountDownTimer;
-+ import android.os.Handler;
-+ import android.util.Log;
-+-import android.util.Patterns;
-+ import android.view.LayoutInflater;
-+ import android.view.Menu;
-+ import android.view.MenuInflater;
-+ import android.view.MenuItem;
-+ import android.view.View;
-+-import android.webkit.URLUtil;
-+ import android.widget.Button;
-+ import android.widget.EditText;
-+ import android.widget.TextView;
-+@@ -395,159 +393,62 @@
-+ 
-+                 if (NetworkConnection.isOnline(this)) {
-+ 
-+-                    if (!sessionManager.getLicenseKey().isEmpty()) {
-+-
-+-                        String licenseUrl = sessionManager.getMindMapServerUrl();
-+-                        String licenseKey = sessionManager.getLicenseKey();
-+-                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-+-
-+-                    } else {
-+-//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-+-//                    LayoutInflater li = LayoutInflater.from(this);
-+-//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-//                    dialog.setTitle(getString(R.string.enter_license_key))
-+-//                            .setView(promptsView)
-+-//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//
-+-//                                    Dialog d = (Dialog) dialog;
-+-//
-+-//                                    EditText etURL = d.findViewById(R.id.licenseurl);
-+-//                                    EditText etKey = d.findViewById(R.id.licensekey);
-+-//                                    String url = etURL.getText().toString().replace(" ", "");
-+-//                                    String key = etKey.getText().toString().trim();
-+-//
-+-//                                    if (url.isEmpty()) {
-+-//                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (url.contains(":")) {
-+-//                                        etURL.setError(getResources().getString(R.string.invalid_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (key.isEmpty()) {
-+-//                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-+-//                                        etKey.requestFocus();
-+-//                                        return;
-+-//                                    }
-++//                    if (!sessionManager.getLicenseKey().isEmpty()) {
-+ //
-+-//                                    sessionManager.setMindMapServerUrl(url); //trim
-+-//                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-++//                        String licenseUrl = sessionManager.getMindMapServerUrl();
-++//                        String licenseKey = sessionManager.getLicenseKey();
-++//                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-+ //
-+-//                                }
-+-//                            })
-+-//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//                                    dialog.dismiss();
-+-//                                }
-+-//                            });
-+-//                    Dialog builderDialog = dialog.show();
-+-//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-+-//
-+-//                    // }
-+-                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-                        LayoutInflater li = LayoutInflater.from(this);
-+-                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-
-+-                                        dialog.setTitle(getString(R.string.enter_license_key))
-+-                                                .setView(promptsView)
-+-                                                .setPositiveButton(getString(R.string.button_ok), null)
-+-                                                .setNegativeButton(getString(R.string.button_cancel), null);
-+-
-+-                                        AlertDialog alertDialog = dialog.create();
-+-                                        alertDialog.setView(promptsView, 20, 0, 20, 0);
-+-                                        alertDialog.show();
-+-                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...
-+-
-+-                                        // Get the alert dialog buttons reference
-+-                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
-+-                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);
-+-
-+-                                        // Change the alert dialog buttons text and background color
-+-                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-
-+-                                        positiveButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                EditText text = promptsView.findViewById(R.id.licensekey);
-+-                                                EditText url = promptsView.findViewById(R.id.licenseurl);
-++//                    } else {
-++                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-++                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-++                    LayoutInflater li = LayoutInflater.from(this);
-++                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-++                    dialog.setTitle(getString(R.string.enter_license_key))
-++                            .setView(promptsView)
-++                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-+ 
-+-                                                url.setError(null);
-+-                                                text.setError(null);
-++                                    Dialog d = (Dialog) dialog;
-+ 
-+-                                                //If both are not entered...
-+-                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-++                                    EditText etURL = d.findViewById(R.id.licenseurl);
-++                                    EditText etKey = d.findViewById(R.id.licensekey);
-++                                    String url = etURL.getText().toString().replace(" ", "");
-++                                    String key = etKey.getText().toString().trim();
-+ 
-+-                                                //If Url is empty...key is not empty...
-+-                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url is not empty...key is empty...
-+-                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    text.requestFocus();
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url has : in it...
-+-                                                if (url.getText().toString().trim().contains(":")) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.invalid_url));
-+-                                                    return;
-+-                                                }
-++                                    if (url.isEmpty()) {
-++                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (url.contains(":")) {
-++                                        etURL.setError(getResources().getString(R.string.invalid_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (key.isEmpty()) {
-++                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-++                                        etKey.requestFocus();
-++                                        return;
-++                                    }
-+ 
-+-                                                //If url entered is Invalid...
-+-                                                if (!url.getText().toString().trim().isEmpty()) {
-+-                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {
-+-                                                        String url_field = "https://" + url.getText().toString() + ":3004/";
-+-                                                        if (URLUtil.isValidUrl(url_field)) {
-+-                                                            key = text.getText().toString().trim();
-+-                                                            licenseUrl = url.getText().toString().trim();
-+-
-+-                                                            sessionManager.setMindMapServerUrl(licenseUrl);
-+-
-+-                                                            if (keyVerified(key)) {
-+-                                                                getMindmapDownloadURL("https://" + licenseUrl + ":3004/",key);
-+-                                                                alertDialog.dismiss();
-+-                                                            }
-+-                                                        } else {
-+-                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();
-+-                                                        }
-++                                    sessionManager.setMindMapServerUrl(url); //trim
-++                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-+ 
-+-                                                    } else {
-+-                                                        //invalid url || invalid url and key.
-+-                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();
-+-                                                    }
-+-                                                } else {
-+-                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();
-+-                                                }
-+-                                            }
-+-                                        });
-+-
-+-                                        negativeButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                alertDialog.dismiss();
-+-                                            }
-+-                                        });
-++                                }
-++                            })
-++                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-++                                    dialog.dismiss();
-++                                }
-++                            });
-++                    Dialog builderDialog = dialog.show();
-++                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-+ 
-+-                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);
-+-
-+-                }}else {
-++                    // }
-++                }else {
-+                     Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();
-+                 }
-+ 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_07__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_07__Default_Changelist_.xml	(date 1621420940051)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_07__Default_Changelist_.xml	(date 1621420940051)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_19-05-2021_16_07_[Default_Changelist]" date="1621420669037" recycled="false" toDelete="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_07_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19-05-2021 16:07 [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]1/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]1/shelved.patch	(date 1621420899646)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]1/shelved.patch	(date 1621420899646)
-@@ -0,0 +1,219 @@
-+Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package org.intelehealth.ekalhelpline.activities.homeActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.work.ExistingPeriodicWorkPolicy;\r\nimport androidx.work.WorkManager;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.activities.activePatientsActivity.ActivePatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.loginActivity.LoginActivity;\r\nimport org.intelehealth.ekalhelpline.activities.searchPatientActivity.SearchPatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.settingsActivity.SettingsActivity;\r\nimport org.intelehealth.ekalhelpline.activities.todayPatientActivity.TodayPatientActivity;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.models.CheckAppUpdateRes;\r\nimport org.intelehealth.ekalhelpline.models.DownloadMindMapRes;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.syncModule.SyncUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;\r\nimport org.intelehealth.ekalhelpline.utilities.FileUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkConnection;\r\nimport org.intelehealth.ekalhelpline.utilities.OfflineLogin;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\nimport org.intelehealth.ekalhelpline.widget.materialprogressbar.CustomProgressDialog;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.disposables.CompositeDisposable;\r\nimport io.reactivex.disposables.Disposable;\r\nimport io.reactivex.observers.DisposableObserver;\r\nimport io.reactivex.observers.DisposableSingleObserver;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n/**\r\n * Home Screen\r\n */\r\n\r\npublic class HomeActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = HomeActivity.class.getSimpleName();\r\n    SessionManager sessionManager = null;\r\n    private ProgressDialog mSyncProgressDialog;\r\n    CountDownTimer CDT;\r\n    private boolean hasLicense = false;\r\n    int i = 5;\r\n\r\n    TextView lastSyncTextView;\r\n    TextView lastSyncAgo;\r\n    Button manualSyncButton;\r\n    //IntentFilter filter;\r\n\r\n    SyncUtils syncUtils = new SyncUtils();\r\n    CardView c1, c2, c3, c4, c5, c6;\r\n    private String key = null;\r\n    private String licenseUrl = null;\r\n\r\n    Context context;\r\n    CustomProgressDialog customProgressDialog;\r\n    private String mindmapURL = \"\";\r\n    private DownloadMindMaps mTask;\r\n    ProgressDialog mProgressDialog;\r\n\r\n    private int versionCode = 0;\r\n    private CompositeDisposable disposable = new CompositeDisposable();\r\n    TextView newPatient_textview, findPatients_textview, todaysVisits_textview,\r\n            activeVisits_textview, videoLibrary_textview, help_textview;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_home);\r\n        sessionManager = new SessionManager(this);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n\r\n        String language = sessionManager.getAppLanguage();\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n\r\n        setTitle(R.string.title_activity_login);\r\n        context = HomeActivity.this;\r\n        customProgressDialog = new CustomProgressDialog(context);\r\n        /*syncBroadcastReceiver = new SyncBroadcastReceiver();\r\n        filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);*/\r\n\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        checkAppVer();  //auto-update feature.\r\n\r\n        Logger.logD(TAG, \"onCreate: \" + getFilesDir().toString());\r\n        lastSyncTextView = findViewById(R.id.lastsynctextview);\r\n        lastSyncAgo = findViewById(R.id.lastsyncago);\r\n        manualSyncButton = findViewById(R.id.manualsyncbutton);\r\n//        manualSyncButton.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);\r\n       // c1 = findViewById(R.id.cardview_newpat);\r\n        c2 = findViewById(R.id.cardview_find_patient);\r\n        c3 = findViewById(R.id.cardview_today_patient);\r\n        c4 = findViewById(R.id.cardview_active_patients);\r\n        c5 = findViewById(R.id.cardview_video_libraby);\r\n        c6 = findViewById(R.id.cardview_help_whatsapp);\r\n\r\n        //card textview referrenced to fix bug of localization not working in some cases...\r\n     /*   newPatient_textview = findViewById(R.id.newPatient_textview);\r\n        newPatient_textview.setText(R.string.new_patient);*/\r\n\r\n        findPatients_textview = findViewById(R.id.findPatients_textview);\r\n        findPatients_textview.setText(R.string.find_patient);\r\n\r\n        todaysVisits_textview = findViewById(R.id.todaysVisits_textview);\r\n        todaysVisits_textview.setText(R.string.today_visits);\r\n\r\n        activeVisits_textview = findViewById(R.id.activeVisits_textview);\r\n        activeVisits_textview.setText(R.string.active_visits);\r\n\r\n        videoLibrary_textview = findViewById(R.id.videoLibrary_textview);\r\n        videoLibrary_textview.setText(R.string.video_library);\r\n\r\n        help_textview = findViewById(R.id.help_textview);\r\n        help_textview.setText(R.string.Whatsapp_Help_Cardview);\r\n\r\n        // manualSyncButton.setText(R.string.sync_now);\r\n        manualSyncButton.setText(R.string.refresh);\r\n\r\n        //Help section of watsapp...\r\n        c6.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String phoneNumberWithCountryCode = \"+917005308163\";\r\n                String message =\r\n                        getString(R.string.hello_my_name_is) + \" \" + sessionManager.getChwname() + \" \" +\r\n                                /*\" from \" + sessionManager.getState() + */getString(R.string.i_need_assistance);\r\n\r\n                startActivity(new Intent(Intent.ACTION_VIEW,\r\n                        Uri.parse(\r\n                                String.format(\"https://api.whatsapp.com/send?phone=%s&text=%s\",\r\n                                        phoneNumberWithCountryCode, message))));\r\n            }\r\n        });\r\n/*\r\n        c1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Loads the config file values and check for the boolean value of privacy key.\r\n                ConfigUtils configUtils = new ConfigUtils(HomeActivity.this);\r\n                if (configUtils.privacy_notice()) {\r\n                    Intent intent = new Intent(HomeActivity.this, PrivacyNotice_Activity.class);\r\n                    startActivity(intent);\r\n                } else {\r\n                    //Clear HouseHold UUID from Session for new registration\r\n                    sessionManager.setHouseholdUuid(\"\");\r\n\r\n                    Intent intent = new Intent(HomeActivity.this, IdentificationActivity.class);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n*/\r\n        c2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, SearchPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, TodayPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c4.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, ActivePatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                videoLibrary();\r\n            }\r\n        });\r\n\r\n\r\n        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n\r\n//        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n////            lastSyncAgo.setText(CalculateAgoTime());\r\n//        }\r\n\r\n        manualSyncButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, context);\r\n\r\n                if (isNetworkConnected()) {\r\n                    Toast.makeText(context, getString(R.string.syncInProgress), Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Toast.makeText(context, context.getString(R.string.failed_synced), Toast.LENGTH_LONG).show();\r\n                }\r\n\r\n                syncUtils.syncForeground(\"home\");\r\n//                if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                        && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n//                    lastSyncAgo.setText(sessionManager.getLastTimeAgo());\r\n//                }\r\n            }\r\n        });\r\n        if (sessionManager.isFirstTimeLaunched()) {\r\n            mSyncProgressDialog = new ProgressDialog(HomeActivity.this, R.style.AlertDialogStyle); //thats how to add a style!\r\n            mSyncProgressDialog.setTitle(R.string.syncInProgress);\r\n            mSyncProgressDialog.setCancelable(false);\r\n            mSyncProgressDialog.setProgress(i);\r\n\r\n            mSyncProgressDialog.show();\r\n\r\n            syncUtils.initialSync(\"home\");\r\n        } else {\r\n            // if initial setup done then we can directly set the periodic background sync job\r\n            WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n        }\r\n\r\n\r\n        showProgressbar();\r\n    }\r\n\r\n    //function for handling the video library feature...\r\n    private void videoLibrary() {\r\n        if (!sessionManager.getLicenseKey().isEmpty())\r\n            hasLicense = true;\r\n        //Check for license key and load the correct config file\r\n        try {\r\n            JSONObject obj = null;\r\n            if (hasLicense) {\r\n                obj = new JSONObject(Objects.requireNonNullElse\r\n                        (FileUtils.readFileRoot(AppConstants.CONFIG_FILE_NAME, context),\r\n                                String.valueOf(FileUtils.encodeJSON(context, AppConstants.CONFIG_FILE_NAME)))); //Load the config file\r\n            } else {\r\n                obj = new JSONObject(String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)));\r\n            }\r\n\r\n            if (obj.has(\"video_library\")) {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                Uri uri = Uri.parse(obj.getString(\"video_library\"));\r\n                intent.setData(uri);\r\n                startActivity(intent);\r\n            } else {\r\n                Toast.makeText(context, \"No config attribute found\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } catch (JSONException e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Toast.makeText(getApplicationContext(), \"JsonException\" + e, Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    private void showProgressbar() {\r\n\r\n\r\n// instantiate it within the onCreate method\r\n        mProgressDialog = new ProgressDialog(HomeActivity.this);\r\n        mProgressDialog.setMessage(getString(R.string.download_protocols));\r\n        mProgressDialog.setIndeterminate(true);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n        mProgressDialog.setCancelable(false);\r\n    }\r\n\r\n\r\n    private String CalculateAgoTime() {\r\n        String finalTime = \"\";\r\n\r\n        String syncTime = sessionManager.getLastSyncDateTime();\r\n\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd MMM yyyy HH:mm\", Locale.getDefault());\r\n        ParsePosition pos = new ParsePosition(0);\r\n        long then = formatter.parse(syncTime, pos).getTime();\r\n        long now = new Date().getTime();\r\n\r\n        long seconds = (now - then) / 1000;\r\n        long minutes = seconds / 60;\r\n        long hours = minutes / 60;\r\n        long days = hours / 24;\r\n\r\n        String time = \"\";\r\n        long num = 0;\r\n        if (days > 0) {\r\n            num = days;\r\n            time = days + \" \" + context.getString(R.string.day);\r\n        } else if (hours > 0) {\r\n            num = hours;\r\n            time = hours + \" \" + context.getString(R.string.hour);\r\n        } else if (minutes >= 0) {\r\n            num = minutes;\r\n            time = minutes + \" \" + context.getString(R.string.minute);\r\n        }\r\n//      <For Seconds>\r\n//      else {\r\n//            num = seconds;\r\n//            time = seconds + \" second\";\r\n//      }\r\n        if (num > 1) {\r\n            time += context.getString(R.string.s);\r\n        }\r\n        finalTime = time + \" \" + context.getString(R.string.ago);\r\n\r\n        sessionManager.setLastTimeAgo(finalTime);\r\n\r\n        return finalTime;\r\n    }\r\n\r\n    private boolean isNetworkConnected() {\r\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        return cm.getActiveNetworkInfo() != null && cm.getActiveNetworkInfo().isConnected();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_home, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n//            case R.id.syncOption:\r\n//                refreshDatabases();\r\n//                return true;\r\n            case R.id.settingsOption:\r\n                settings();\r\n                return true;\r\n            case R.id.updateProtocolsOption: {\r\n\r\n\r\n                if (NetworkConnection.isOnline(this)) {\r\n\r\n                    if (!sessionManager.getLicenseKey().isEmpty()) {\r\n\r\n                        String licenseUrl = sessionManager.getMindMapServerUrl();\r\n                        String licenseKey = sessionManager.getLicenseKey();\r\n                        getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\", licenseKey);\r\n\r\n                    } else {\r\n//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);\r\n//                    LayoutInflater li = LayoutInflater.from(this);\r\n//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n//                    dialog.setTitle(getString(R.string.enter_license_key))\r\n//                            .setView(promptsView)\r\n//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//\r\n//                                    Dialog d = (Dialog) dialog;\r\n//\r\n//                                    EditText etURL = d.findViewById(R.id.licenseurl);\r\n//                                    EditText etKey = d.findViewById(R.id.licensekey);\r\n//                                    String url = etURL.getText().toString().replace(\" \", \"\");\r\n//                                    String key = etKey.getText().toString().trim();\r\n//\r\n//                                    if (url.isEmpty()) {\r\n//                                        etURL.setError(getResources().getString(R.string.enter_server_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (url.contains(\":\")) {\r\n//                                        etURL.setError(getResources().getString(R.string.invalid_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (key.isEmpty()) {\r\n//                                        etKey.setError(getResources().getString(R.string.enter_license_key));\r\n//                                        etKey.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//\r\n//                                    sessionManager.setMindMapServerUrl(url); //trim\r\n//                                    getMindmapDownloadURL(\"https://\" + url + \":3004/\", key);\r\n//\r\n//                                }\r\n//                            })\r\n//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//                                    dialog.dismiss();\r\n//                                }\r\n//                            });\r\n//                    Dialog builderDialog = dialog.show();\r\n//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);\r\n//\r\n//                    // }\r\n                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n                        LayoutInflater li = LayoutInflater.from(this);\r\n                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n\r\n                                        dialog.setTitle(getString(R.string.enter_license_key))\r\n                                                .setView(promptsView)\r\n                                                .setPositiveButton(getString(R.string.button_ok), null)\r\n                                                .setNegativeButton(getString(R.string.button_cancel), null);\r\n\r\n                                        AlertDialog alertDialog = dialog.create();\r\n                                        alertDialog.setView(promptsView, 20, 0, 20, 0);\r\n                                        alertDialog.show();\r\n                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...\r\n\r\n                                        // Get the alert dialog buttons reference\r\n                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\r\n                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);\r\n\r\n                                        // Change the alert dialog buttons text and background color\r\n                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n                                        positiveButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                EditText text = promptsView.findViewById(R.id.licensekey);\r\n                                                EditText url = promptsView.findViewById(R.id.licenseurl);\r\n\r\n                                                url.setError(null);\r\n                                                text.setError(null);\r\n\r\n                                                //If both are not entered...\r\n                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is empty...key is not empty...\r\n                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is not empty...key is empty...\r\n                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    text.requestFocus();\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url has : in it...\r\n                                                if (url.getText().toString().trim().contains(\":\")) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.invalid_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If url entered is Invalid...\r\n                                                if (!url.getText().toString().trim().isEmpty()) {\r\n                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {\r\n                                                        String url_field = \"https://\" + url.getText().toString() + \":3004/\";\r\n                                                        if (URLUtil.isValidUrl(url_field)) {\r\n                                                            key = text.getText().toString().trim();\r\n                                                            licenseUrl = url.getText().toString().trim();\r\n\r\n                                                            sessionManager.setMindMapServerUrl(licenseUrl);\r\n\r\n                                                            if (keyVerified(key)) {\r\n                                                                getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\",key);\r\n                                                                alertDialog.dismiss();\r\n                                                            }\r\n                                                        } else {\r\n                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n                                                        }\r\n\r\n                                                    } else {\r\n                                                        //invalid url || invalid url and key.\r\n                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();\r\n                                                    }\r\n                                                } else {\r\n                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();\r\n                                                }\r\n                                            }\r\n                                        });\r\n\r\n                                        negativeButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                alertDialog.dismiss();\r\n                                            }\r\n                                        });\r\n\r\n                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                }}else {\r\n                    Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n         /*   case R.id.sync:\r\n//                pullDataDAO.pullData(this);\r\n//                pullDataDAO.pushDataApi();\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, this);\r\n                boolean isSynced = syncUtils.syncForeground();\r\n//                boolean i = imagesPushDAO.patientProfileImagesPush();\r\n//                boolean o = imagesPushDAO.obsImagesPush();\r\n//                if (isSynced)\r\n//                    AppConstants.notificationUtils.showNotifications_noProgress(getString(R.string.sync_not_available), getString(R.string.please_connect_to_internet), getApplicationContext());\r\n//                else\r\n//                    AppConstants.notificationUtils.showNotifications(getString(R.string.image_upload), getString(R.string.image_upload_failed), 4, this);\r\n                return true;\r\n                */\r\n//            case R.id.backupOption:\r\n//                manageBackup(true, false);  // to backup app data at any time of the day\r\n//                return true;\r\n//\r\n//            case R.id.restoreOption:\r\n//                manageBackup(false, false); // to restore app data if db is empty\r\n//                return true;\r\n\r\n            case R.id.logoutOption:\r\n//                manageBackup(true, false);\r\n\r\n                MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n                alertdialogBuilder.setMessage(R.string.sure_to_logout);\r\n                alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        logout();\r\n                    }\r\n                });\r\n                alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n                AlertDialog alertDialog = alertdialogBuilder.create();\r\n                alertDialog.show();\r\n                Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n                Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n                positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method starts intent to another activity to change settings\r\n     *\r\n     * @return void\r\n     */\r\n    public void settings() {\r\n        Intent intent = new Intent(this, SettingsActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Logs out the user. It removes user account using AccountManager.\r\n     *\r\n     * @return void\r\n     */\r\n    public void logout() {\r\n\r\n        OfflineLogin.getOfflineLogin().setOfflineLoginStatus(false);\r\n\r\n//        parseLogOut();\r\n\r\n       /* AccountManager manager = AccountManager.get(HomeActivity.this);\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }*/\r\n     /*   Account[] accountList = manager.getAccountsByType(\"io.intelehealth.openmrs\");\r\n        if (accountList.length > 0) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                manager.removeAccount(accountList[0], HomeActivity.this, null, null);\r\n            } else {\r\n                manager.removeAccount(accountList[0], null, null); // Legacy implementation\r\n            }\r\n        }\r\n*/\r\n        Intent intent = new Intent(HomeActivity.this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n\r\n        SyncUtils syncUtils = new SyncUtils();\r\n        syncUtils.syncBackground();\r\n        sessionManager.setReturningUser(false);\r\n        sessionManager.setLogout(true);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        //IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        //registerReceiver(syncBroadcastReceiver, filter);\r\n        checkAppVer();  //auto-update feature.\r\n//        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n                && Locale.getDefault().toString().equals(\"en\")) {\r\n//            lastSyncAgo.setText(CalculateAgoTime());\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        registerReceiver(syncBroadcastReceiver, filter);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        try {\r\n            unregisterReceiver(syncBroadcastReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean keyVerified(String key) {\r\n        //TODO: Verify License Key\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        /*new AlertDialog.Builder(this)\r\n                .setMessage(\"Are you sure you want to EXIT ?\")\r\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        moveTaskToBack(true);\r\n                        finish();\r\n\r\n                    }\r\n\r\n                })\r\n                .setNegativeButton(\"No\", null)\r\n                .show();\r\n*/\r\n        MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n\r\n        // AlertDialog.Builder alertdialogBuilder = new AlertDialog.Builder(this, R.style.AlertDialogStyle);\r\n        alertdialogBuilder.setMessage(R.string.sure_to_exit);\r\n        alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                moveTaskToBack(true);\r\n                // finish();\r\n            }\r\n        });\r\n        alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n\r\n        AlertDialog alertDialog = alertdialogBuilder.create();\r\n        alertDialog.show();\r\n\r\n        Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n        Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n\r\n        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //positiveButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //negativeButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n    }\r\n\r\n    private List<Integer> mTempSyncHelperList = new ArrayList<Integer>();\r\n    private BroadcastReceiver syncBroadcastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Logger.logD(\"syncBroadcastReceiver\", \"onReceive! \" + intent);\r\n\r\n            if (intent != null && intent.hasExtra(AppConstants.SYNC_INTENT_DATA_KEY)) {\r\n                int flagType = intent.getIntExtra(AppConstants.SYNC_INTENT_DATA_KEY, AppConstants.SYNC_FAILED);\r\n                if (sessionManager.isFirstTimeLaunched()) {\r\n                    if (flagType == AppConstants.SYNC_FAILED) {\r\n                        hideSyncProgressBar(false);\r\n                        /*Toast.makeText(context, R.string.failed_synced, Toast.LENGTH_SHORT).show();\r\n                        finish();*/\r\n                        new AlertDialog.Builder(HomeActivity.this)\r\n                                .setMessage(R.string.failed_initial_synced)\r\n                                .setPositiveButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        finish();\r\n                                    }\r\n\r\n                                }).setCancelable(false)\r\n\r\n                                .show();\r\n                    } else {\r\n                        mTempSyncHelperList.add(flagType);\r\n                        if (mTempSyncHelperList.contains(AppConstants.SYNC_PULL_DATA_DONE)\r\n//                                && mTempSyncHelperList.contains(AppConstants.SYNC_PUSH_DATA_DONE)\r\n                                /*&& mTempSyncHelperList.contains(AppConstants.SYNC_PATIENT_PROFILE_IMAGE_PUSH_DONE)\r\n                                && mTempSyncHelperList.contains(AppConstants.SYNC_OBS_IMAGE_PUSH_DONE)*/) {\r\n                            hideSyncProgressBar(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        }\r\n    };\r\n\r\n    private void hideSyncProgressBar(boolean isSuccess) {\r\n        if (mTempSyncHelperList != null) mTempSyncHelperList.clear();\r\n        if (mSyncProgressDialog != null && mSyncProgressDialog.isShowing()) {\r\n            mSyncProgressDialog.dismiss();\r\n            if (isSuccess) {\r\n\r\n                sessionManager.setFirstTimeLaunched(false);\r\n                sessionManager.setMigration(true);\r\n                // initial setup/sync done and now we can set the periodic background sync job\r\n                // given some delay after initial sync\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n                    }\r\n                }, 10000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMindmapDownloadURL(String url, String key) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url); //trim\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        try {\r\n            Observable<DownloadMindMapRes> resultsObservable = apiService.DOWNLOAD_MIND_MAP_RES_OBSERVABLE(key);\r\n            resultsObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<DownloadMindMapRes>() {\r\n                        @Override\r\n                        public void onNext(DownloadMindMapRes res) {\r\n                            customProgressDialog.dismiss();\r\n                            if (res.getMessage() != null && res.getMessage().equalsIgnoreCase(\"Success\")) {\r\n\r\n                                Log.e(\"MindMapURL\", \"Successfully get MindMap URL\");\r\n                                mTask = new DownloadMindMaps(context, mProgressDialog);\r\n                                mindmapURL = res.getMindmap().trim();\r\n                                sessionManager.setLicenseKey(key);\r\n                                checkExistingMindMaps();\r\n\r\n                            } else {\r\n                                Toast.makeText(context, getResources().getString(R.string.no_protocols_found), Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n                            customProgressDialog.dismiss();\r\n                            Toast.makeText(context, getResources().getString(R.string.unable_to_get_proper_response), Toast.LENGTH_SHORT).show();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n\r\n                        }\r\n                    });\r\n        } catch (IllegalArgumentException e) {\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getMessage());\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getStackTrace());\r\n        }\r\n    }\r\n\r\n    private void checkExistingMindMaps() {\r\n\r\n        //Check is there any existing mindmaps are present, if yes then delete.\r\n\r\n        File engines = new File(context.getFilesDir().getAbsolutePath(), \"/Engines\");\r\n        Log.e(TAG, \"Engines folder=\" + engines.exists());\r\n        if (engines.exists()) {\r\n            engines.delete();\r\n        }\r\n        File logo = new File(context.getFilesDir().getAbsolutePath(), \"/logo\");\r\n        Log.e(TAG, \"Logo folder=\" + logo.exists());\r\n        if (logo.exists()) {\r\n            logo.delete();\r\n        }\r\n        File physicalExam = new File(context.getFilesDir().getAbsolutePath() + \"/physExam.json\");\r\n        Log.e(TAG, \"physExam.json=\" + physicalExam.exists());\r\n        if (physicalExam.exists()) {\r\n            physicalExam.delete();\r\n        }\r\n        File familyHistory = new File(context.getFilesDir().getAbsolutePath() + \"/famHist.json\");\r\n        Log.e(TAG, \"famHist.json=\" + familyHistory.exists());\r\n        if (familyHistory.exists()) {\r\n            familyHistory.delete();\r\n        }\r\n        File pastMedicalHistory = new File(context.getFilesDir().getAbsolutePath() + \"/patHist.json\");\r\n        Log.e(TAG, \"patHist.json=\" + pastMedicalHistory.exists());\r\n        if (pastMedicalHistory.exists()) {\r\n            pastMedicalHistory.delete();\r\n        }\r\n        File config = new File(context.getFilesDir().getAbsolutePath() + \"/config.json\");\r\n        Log.e(TAG, \"config.json=\" + config.exists());\r\n        if (config.exists()) {\r\n            config.delete();\r\n        }\r\n\r\n        //Start downloading mindmaps\r\n        mTask.execute(mindmapURL, context.getFilesDir().getAbsolutePath() + \"/mindmaps.zip\");\r\n        Log.e(\"DOWNLOAD\", \"isSTARTED\");\r\n\r\n    }\r\n\r\n    private void checkAppVer() {\r\n\r\n        try {\r\n            PackageInfo pInfo = context.getPackageManager().getPackageInfo(getPackageName(), 0);\r\n            String version = pInfo.versionName;\r\n            versionCode = pInfo.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        disposable.add((Disposable) AppConstants.apiInterface.checkAppUpdate()\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribeWith(new DisposableSingleObserver<CheckAppUpdateRes>() {\r\n                    @Override\r\n                    public void onSuccess(CheckAppUpdateRes res) {\r\n                        int latestVersionCode = 0;\r\n                        if (!res.getLatestVersionCode().isEmpty()) {\r\n                            latestVersionCode = Integer.parseInt(res.getLatestVersionCode());\r\n                        }\r\n\r\n                        if (latestVersionCode > versionCode) {\r\n                            android.app.AlertDialog.Builder builder;\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this, android.R.style.Theme_Material_Dialog_Alert);\r\n                            } else {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this);\r\n                            }\r\n\r\n\r\n                            builder.setTitle(getResources().getString(R.string.new_update_available))\r\n                                    .setCancelable(false)\r\n                                    .setMessage(getResources().getString(R.string.update_app_note))\r\n                                    .setPositiveButton(getResources().getString(R.string.update), new DialogInterface.OnClickListener() {\r\n                                        public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                            final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object\r\n                                            try {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + appPackageName)));\r\n                                            } catch (ActivityNotFoundException anfe) {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));\r\n                                            }\r\n\r\n                                        }\r\n                                    })\r\n\r\n                                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                                    .setCancelable(false);\r\n\r\n                            Dialog dialog = builder.show();\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                int textViewId = dialog.getContext().getResources().getIdentifier(\"android:id/alertTitle\", null, null);\r\n                                TextView tv = (TextView) dialog.findViewById(textViewId);\r\n                                tv.setTextColor(getResources().getColor(R.color.white));\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable e) {\r\n                        Log.e(\"Error\", \"\" + e);\r\n                    }\r\n                })\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+--- app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(revision 3dfc6cc3ab4d038979a3b922a72c02dc02e76966)
-++++ app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(date 1621420000342)
-+@@ -395,159 +395,63 @@
-+ 
-+                 if (NetworkConnection.isOnline(this)) {
-+ 
-+-                    if (!sessionManager.getLicenseKey().isEmpty()) {
-+-
-+-                        String licenseUrl = sessionManager.getMindMapServerUrl();
-+-                        String licenseKey = sessionManager.getLicenseKey();
-+-                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-+-
-+-                    } else {
-+-//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-+-//                    LayoutInflater li = LayoutInflater.from(this);
-+-//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-//                    dialog.setTitle(getString(R.string.enter_license_key))
-+-//                            .setView(promptsView)
-+-//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//
-+-//                                    Dialog d = (Dialog) dialog;
-+-//
-+-//                                    EditText etURL = d.findViewById(R.id.licenseurl);
-+-//                                    EditText etKey = d.findViewById(R.id.licensekey);
-+-//                                    String url = etURL.getText().toString().replace(" ", "");
-+-//                                    String key = etKey.getText().toString().trim();
-+-//
-+-//                                    if (url.isEmpty()) {
-+-//                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (url.contains(":")) {
-+-//                                        etURL.setError(getResources().getString(R.string.invalid_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (key.isEmpty()) {
-+-//                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-+-//                                        etKey.requestFocus();
-+-//                                        return;
-+-//                                    }
-++//                    if (!sessionManager.getLicenseKey().isEmpty()) {
-+ //
-+-//                                    sessionManager.setMindMapServerUrl(url); //trim
-+-//                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-++//                        String licenseUrl = sessionManager.getMindMapServerUrl();
-++//                        String licenseKey = sessionManager.getLicenseKey();
-++//                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-+ //
-+-//                                }
-+-//                            })
-+-//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//                                    dialog.dismiss();
-+-//                                }
-+-//                            });
-+-//                    Dialog builderDialog = dialog.show();
-+-//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-+-//
-+-//                    // }
-+-                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-                        LayoutInflater li = LayoutInflater.from(this);
-+-                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-
-+-                                        dialog.setTitle(getString(R.string.enter_license_key))
-+-                                                .setView(promptsView)
-+-                                                .setPositiveButton(getString(R.string.button_ok), null)
-+-                                                .setNegativeButton(getString(R.string.button_cancel), null);
-+-
-+-                                        AlertDialog alertDialog = dialog.create();
-+-                                        alertDialog.setView(promptsView, 20, 0, 20, 0);
-+-                                        alertDialog.show();
-+-                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...
-+-
-+-                                        // Get the alert dialog buttons reference
-+-                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
-+-                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);
-+-
-+-                                        // Change the alert dialog buttons text and background color
-+-                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-
-+-                                        positiveButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                EditText text = promptsView.findViewById(R.id.licensekey);
-+-                                                EditText url = promptsView.findViewById(R.id.licenseurl);
-++//                    } else {
-++                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-++                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-++                    LayoutInflater li = LayoutInflater.from(this);
-++                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-++                    dialog.setTitle(getString(R.string.enter_license_key))
-++                            .setView(promptsView)
-++                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-+ 
-+-                                                url.setError(null);
-+-                                                text.setError(null);
-++                                    Dialog d = (Dialog) dialog;
-+ 
-+-                                                //If both are not entered...
-+-                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url is empty...key is not empty...
-+-                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url is not empty...key is empty...
-+-                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    text.requestFocus();
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-++                                    EditText etURL = d.findViewById(R.id.licenseurl);
-++                                    EditText etKey = d.findViewById(R.id.licensekey);
-++                                    String url = etURL.getText().toString().replace(" ", "");
-++                                    String key = etKey.getText().toString().trim();
-++
-++                                    if (url.isEmpty()) {
-++                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (url.contains(":")) {
-++                                        etURL.setError(getResources().getString(R.string.invalid_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (key.isEmpty()) {
-++                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-++                                        etKey.requestFocus();
-++                                        return;
-++                                    }
-+ 
-+-                                                //If Url has : in it...
-+-                                                if (url.getText().toString().trim().contains(":")) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.invalid_url));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If url entered is Invalid...
-+-                                                if (!url.getText().toString().trim().isEmpty()) {
-+-                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {
-+-                                                        String url_field = "https://" + url.getText().toString() + ":3004/";
-+-                                                        if (URLUtil.isValidUrl(url_field)) {
-+-                                                            key = text.getText().toString().trim();
-+-                                                            licenseUrl = url.getText().toString().trim();
-+-
-+-                                                            sessionManager.setMindMapServerUrl(licenseUrl);
-++                                    sessionManager.setMindMapServerUrl(url); //trim
-++                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-+ 
-+-                                                            if (keyVerified(key)) {
-+-                                                                getMindmapDownloadURL("https://" + licenseUrl + ":3004/",key);
-+-                                                                alertDialog.dismiss();
-+-                                                            }
-+-                                                        } else {
-+-                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();
-+-                                                        }
-++                                }
-++                            })
-++                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-++                                    dialog.dismiss();
-++                                }
-++                            });
-++                    Dialog builderDialog = dialog.show();
-++                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-+ 
-+-                                                    } else {
-+-                                                        //invalid url || invalid url and key.
-+-                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();
-+-                                                    }
-+-                                                } else {
-+-                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();
-+-                                                }
-+-                                            }
-+-                                        });
-+-
-+-                                        negativeButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                alertDialog.dismiss();
-+-                                            }
-+-                                        });
-+-
-+-                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);
-+-
-+-                }}else {
-++                    // }
-++//
-++                }else {
-+                     Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();
-+                 }
-+ 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_52_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_52_[Default_Changelist]/shelved.patch	(date 1621420899668)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_52_[Default_Changelist]/shelved.patch	(date 1621420899668)
-@@ -0,0 +1,219 @@
-+Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package org.intelehealth.ekalhelpline.activities.homeActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.work.ExistingPeriodicWorkPolicy;\r\nimport androidx.work.WorkManager;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.activities.activePatientsActivity.ActivePatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.loginActivity.LoginActivity;\r\nimport org.intelehealth.ekalhelpline.activities.searchPatientActivity.SearchPatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.settingsActivity.SettingsActivity;\r\nimport org.intelehealth.ekalhelpline.activities.todayPatientActivity.TodayPatientActivity;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.models.CheckAppUpdateRes;\r\nimport org.intelehealth.ekalhelpline.models.DownloadMindMapRes;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.syncModule.SyncUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;\r\nimport org.intelehealth.ekalhelpline.utilities.FileUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkConnection;\r\nimport org.intelehealth.ekalhelpline.utilities.OfflineLogin;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\nimport org.intelehealth.ekalhelpline.widget.materialprogressbar.CustomProgressDialog;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.disposables.CompositeDisposable;\r\nimport io.reactivex.disposables.Disposable;\r\nimport io.reactivex.observers.DisposableObserver;\r\nimport io.reactivex.observers.DisposableSingleObserver;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n/**\r\n * Home Screen\r\n */\r\n\r\npublic class HomeActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = HomeActivity.class.getSimpleName();\r\n    SessionManager sessionManager = null;\r\n    private ProgressDialog mSyncProgressDialog;\r\n    CountDownTimer CDT;\r\n    private boolean hasLicense = false;\r\n    int i = 5;\r\n\r\n    TextView lastSyncTextView;\r\n    TextView lastSyncAgo;\r\n    Button manualSyncButton;\r\n    //IntentFilter filter;\r\n\r\n    SyncUtils syncUtils = new SyncUtils();\r\n    CardView c1, c2, c3, c4, c5, c6;\r\n    private String key = null;\r\n    private String licenseUrl = null;\r\n\r\n    Context context;\r\n    CustomProgressDialog customProgressDialog;\r\n    private String mindmapURL = \"\";\r\n    private DownloadMindMaps mTask;\r\n    ProgressDialog mProgressDialog;\r\n\r\n    private int versionCode = 0;\r\n    private CompositeDisposable disposable = new CompositeDisposable();\r\n    TextView newPatient_textview, findPatients_textview, todaysVisits_textview,\r\n            activeVisits_textview, videoLibrary_textview, help_textview;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_home);\r\n        sessionManager = new SessionManager(this);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n\r\n        String language = sessionManager.getAppLanguage();\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n\r\n        setTitle(R.string.title_activity_login);\r\n        context = HomeActivity.this;\r\n        customProgressDialog = new CustomProgressDialog(context);\r\n        /*syncBroadcastReceiver = new SyncBroadcastReceiver();\r\n        filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);*/\r\n\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        checkAppVer();  //auto-update feature.\r\n\r\n        Logger.logD(TAG, \"onCreate: \" + getFilesDir().toString());\r\n        lastSyncTextView = findViewById(R.id.lastsynctextview);\r\n        lastSyncAgo = findViewById(R.id.lastsyncago);\r\n        manualSyncButton = findViewById(R.id.manualsyncbutton);\r\n//        manualSyncButton.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);\r\n       // c1 = findViewById(R.id.cardview_newpat);\r\n        c2 = findViewById(R.id.cardview_find_patient);\r\n        c3 = findViewById(R.id.cardview_today_patient);\r\n        c4 = findViewById(R.id.cardview_active_patients);\r\n        c5 = findViewById(R.id.cardview_video_libraby);\r\n        c6 = findViewById(R.id.cardview_help_whatsapp);\r\n\r\n        //card textview referrenced to fix bug of localization not working in some cases...\r\n     /*   newPatient_textview = findViewById(R.id.newPatient_textview);\r\n        newPatient_textview.setText(R.string.new_patient);*/\r\n\r\n        findPatients_textview = findViewById(R.id.findPatients_textview);\r\n        findPatients_textview.setText(R.string.find_patient);\r\n\r\n        todaysVisits_textview = findViewById(R.id.todaysVisits_textview);\r\n        todaysVisits_textview.setText(R.string.today_visits);\r\n\r\n        activeVisits_textview = findViewById(R.id.activeVisits_textview);\r\n        activeVisits_textview.setText(R.string.active_visits);\r\n\r\n        videoLibrary_textview = findViewById(R.id.videoLibrary_textview);\r\n        videoLibrary_textview.setText(R.string.video_library);\r\n\r\n        help_textview = findViewById(R.id.help_textview);\r\n        help_textview.setText(R.string.Whatsapp_Help_Cardview);\r\n\r\n        // manualSyncButton.setText(R.string.sync_now);\r\n        manualSyncButton.setText(R.string.refresh);\r\n\r\n        //Help section of watsapp...\r\n        c6.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String phoneNumberWithCountryCode = \"+917005308163\";\r\n                String message =\r\n                        getString(R.string.hello_my_name_is) + \" \" + sessionManager.getChwname() + \" \" +\r\n                                /*\" from \" + sessionManager.getState() + */getString(R.string.i_need_assistance);\r\n\r\n                startActivity(new Intent(Intent.ACTION_VIEW,\r\n                        Uri.parse(\r\n                                String.format(\"https://api.whatsapp.com/send?phone=%s&text=%s\",\r\n                                        phoneNumberWithCountryCode, message))));\r\n            }\r\n        });\r\n/*\r\n        c1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Loads the config file values and check for the boolean value of privacy key.\r\n                ConfigUtils configUtils = new ConfigUtils(HomeActivity.this);\r\n                if (configUtils.privacy_notice()) {\r\n                    Intent intent = new Intent(HomeActivity.this, PrivacyNotice_Activity.class);\r\n                    startActivity(intent);\r\n                } else {\r\n                    //Clear HouseHold UUID from Session for new registration\r\n                    sessionManager.setHouseholdUuid(\"\");\r\n\r\n                    Intent intent = new Intent(HomeActivity.this, IdentificationActivity.class);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n*/\r\n        c2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, SearchPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, TodayPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c4.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, ActivePatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                videoLibrary();\r\n            }\r\n        });\r\n\r\n\r\n        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n\r\n//        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n////            lastSyncAgo.setText(CalculateAgoTime());\r\n//        }\r\n\r\n        manualSyncButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, context);\r\n\r\n                if (isNetworkConnected()) {\r\n                    Toast.makeText(context, getString(R.string.syncInProgress), Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Toast.makeText(context, context.getString(R.string.failed_synced), Toast.LENGTH_LONG).show();\r\n                }\r\n\r\n                syncUtils.syncForeground(\"home\");\r\n//                if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                        && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n//                    lastSyncAgo.setText(sessionManager.getLastTimeAgo());\r\n//                }\r\n            }\r\n        });\r\n        if (sessionManager.isFirstTimeLaunched()) {\r\n            mSyncProgressDialog = new ProgressDialog(HomeActivity.this, R.style.AlertDialogStyle); //thats how to add a style!\r\n            mSyncProgressDialog.setTitle(R.string.syncInProgress);\r\n            mSyncProgressDialog.setCancelable(false);\r\n            mSyncProgressDialog.setProgress(i);\r\n\r\n            mSyncProgressDialog.show();\r\n\r\n            syncUtils.initialSync(\"home\");\r\n        } else {\r\n            // if initial setup done then we can directly set the periodic background sync job\r\n            WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n        }\r\n\r\n\r\n        showProgressbar();\r\n    }\r\n\r\n    //function for handling the video library feature...\r\n    private void videoLibrary() {\r\n        if (!sessionManager.getLicenseKey().isEmpty())\r\n            hasLicense = true;\r\n        //Check for license key and load the correct config file\r\n        try {\r\n            JSONObject obj = null;\r\n            if (hasLicense) {\r\n                obj = new JSONObject(Objects.requireNonNullElse\r\n                        (FileUtils.readFileRoot(AppConstants.CONFIG_FILE_NAME, context),\r\n                                String.valueOf(FileUtils.encodeJSON(context, AppConstants.CONFIG_FILE_NAME)))); //Load the config file\r\n            } else {\r\n                obj = new JSONObject(String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)));\r\n            }\r\n\r\n            if (obj.has(\"video_library\")) {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                Uri uri = Uri.parse(obj.getString(\"video_library\"));\r\n                intent.setData(uri);\r\n                startActivity(intent);\r\n            } else {\r\n                Toast.makeText(context, \"No config attribute found\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } catch (JSONException e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Toast.makeText(getApplicationContext(), \"JsonException\" + e, Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    private void showProgressbar() {\r\n\r\n\r\n// instantiate it within the onCreate method\r\n        mProgressDialog = new ProgressDialog(HomeActivity.this);\r\n        mProgressDialog.setMessage(getString(R.string.download_protocols));\r\n        mProgressDialog.setIndeterminate(true);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n        mProgressDialog.setCancelable(false);\r\n    }\r\n\r\n\r\n    private String CalculateAgoTime() {\r\n        String finalTime = \"\";\r\n\r\n        String syncTime = sessionManager.getLastSyncDateTime();\r\n\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd MMM yyyy HH:mm\", Locale.getDefault());\r\n        ParsePosition pos = new ParsePosition(0);\r\n        long then = formatter.parse(syncTime, pos).getTime();\r\n        long now = new Date().getTime();\r\n\r\n        long seconds = (now - then) / 1000;\r\n        long minutes = seconds / 60;\r\n        long hours = minutes / 60;\r\n        long days = hours / 24;\r\n\r\n        String time = \"\";\r\n        long num = 0;\r\n        if (days > 0) {\r\n            num = days;\r\n            time = days + \" \" + context.getString(R.string.day);\r\n        } else if (hours > 0) {\r\n            num = hours;\r\n            time = hours + \" \" + context.getString(R.string.hour);\r\n        } else if (minutes >= 0) {\r\n            num = minutes;\r\n            time = minutes + \" \" + context.getString(R.string.minute);\r\n        }\r\n//      <For Seconds>\r\n//      else {\r\n//            num = seconds;\r\n//            time = seconds + \" second\";\r\n//      }\r\n        if (num > 1) {\r\n            time += context.getString(R.string.s);\r\n        }\r\n        finalTime = time + \" \" + context.getString(R.string.ago);\r\n\r\n        sessionManager.setLastTimeAgo(finalTime);\r\n\r\n        return finalTime;\r\n    }\r\n\r\n    private boolean isNetworkConnected() {\r\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        return cm.getActiveNetworkInfo() != null && cm.getActiveNetworkInfo().isConnected();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_home, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n//            case R.id.syncOption:\r\n//                refreshDatabases();\r\n//                return true;\r\n            case R.id.settingsOption:\r\n                settings();\r\n                return true;\r\n            case R.id.updateProtocolsOption: {\r\n\r\n\r\n                if (NetworkConnection.isOnline(this)) {\r\n\r\n                    if (!sessionManager.getLicenseKey().isEmpty()) {\r\n\r\n                        String licenseUrl = sessionManager.getMindMapServerUrl();\r\n                        String licenseKey = sessionManager.getLicenseKey();\r\n                        getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\", licenseKey);\r\n\r\n                    } else {\r\n//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);\r\n//                    LayoutInflater li = LayoutInflater.from(this);\r\n//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n//                    dialog.setTitle(getString(R.string.enter_license_key))\r\n//                            .setView(promptsView)\r\n//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//\r\n//                                    Dialog d = (Dialog) dialog;\r\n//\r\n//                                    EditText etURL = d.findViewById(R.id.licenseurl);\r\n//                                    EditText etKey = d.findViewById(R.id.licensekey);\r\n//                                    String url = etURL.getText().toString().replace(\" \", \"\");\r\n//                                    String key = etKey.getText().toString().trim();\r\n//\r\n//                                    if (url.isEmpty()) {\r\n//                                        etURL.setError(getResources().getString(R.string.enter_server_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (url.contains(\":\")) {\r\n//                                        etURL.setError(getResources().getString(R.string.invalid_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (key.isEmpty()) {\r\n//                                        etKey.setError(getResources().getString(R.string.enter_license_key));\r\n//                                        etKey.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//\r\n//                                    sessionManager.setMindMapServerUrl(url); //trim\r\n//                                    getMindmapDownloadURL(\"https://\" + url + \":3004/\", key);\r\n//\r\n//                                }\r\n//                            })\r\n//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//                                    dialog.dismiss();\r\n//                                }\r\n//                            });\r\n//                    Dialog builderDialog = dialog.show();\r\n//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);\r\n//\r\n//                    // }\r\n                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n                        LayoutInflater li = LayoutInflater.from(this);\r\n                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n\r\n                                        dialog.setTitle(getString(R.string.enter_license_key))\r\n                                                .setView(promptsView)\r\n                                                .setPositiveButton(getString(R.string.button_ok), null)\r\n                                                .setNegativeButton(getString(R.string.button_cancel), null);\r\n\r\n                                        AlertDialog alertDialog = dialog.create();\r\n                                        alertDialog.setView(promptsView, 20, 0, 20, 0);\r\n                                        alertDialog.show();\r\n                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...\r\n\r\n                                        // Get the alert dialog buttons reference\r\n                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\r\n                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);\r\n\r\n                                        // Change the alert dialog buttons text and background color\r\n                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n                                        positiveButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                EditText text = promptsView.findViewById(R.id.licensekey);\r\n                                                EditText url = promptsView.findViewById(R.id.licenseurl);\r\n\r\n                                                url.setError(null);\r\n                                                text.setError(null);\r\n\r\n                                                //If both are not entered...\r\n                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is empty...key is not empty...\r\n                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is not empty...key is empty...\r\n                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    text.requestFocus();\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url has : in it...\r\n                                                if (url.getText().toString().trim().contains(\":\")) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.invalid_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If url entered is Invalid...\r\n                                                if (!url.getText().toString().trim().isEmpty()) {\r\n                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {\r\n                                                        String url_field = \"https://\" + url.getText().toString() + \":3004/\";\r\n                                                        if (URLUtil.isValidUrl(url_field)) {\r\n                                                            key = text.getText().toString().trim();\r\n                                                            licenseUrl = url.getText().toString().trim();\r\n\r\n                                                            sessionManager.setMindMapServerUrl(licenseUrl);\r\n\r\n                                                            if (keyVerified(key)) {\r\n                                                                getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\",key);\r\n                                                                alertDialog.dismiss();\r\n                                                            }\r\n                                                        } else {\r\n                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n                                                        }\r\n\r\n                                                    } else {\r\n                                                        //invalid url || invalid url and key.\r\n                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();\r\n                                                    }\r\n                                                } else {\r\n                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();\r\n                                                }\r\n                                            }\r\n                                        });\r\n\r\n                                        negativeButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                alertDialog.dismiss();\r\n                                            }\r\n                                        });\r\n\r\n                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                }}else {\r\n                    Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n         /*   case R.id.sync:\r\n//                pullDataDAO.pullData(this);\r\n//                pullDataDAO.pushDataApi();\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, this);\r\n                boolean isSynced = syncUtils.syncForeground();\r\n//                boolean i = imagesPushDAO.patientProfileImagesPush();\r\n//                boolean o = imagesPushDAO.obsImagesPush();\r\n//                if (isSynced)\r\n//                    AppConstants.notificationUtils.showNotifications_noProgress(getString(R.string.sync_not_available), getString(R.string.please_connect_to_internet), getApplicationContext());\r\n//                else\r\n//                    AppConstants.notificationUtils.showNotifications(getString(R.string.image_upload), getString(R.string.image_upload_failed), 4, this);\r\n                return true;\r\n                */\r\n//            case R.id.backupOption:\r\n//                manageBackup(true, false);  // to backup app data at any time of the day\r\n//                return true;\r\n//\r\n//            case R.id.restoreOption:\r\n//                manageBackup(false, false); // to restore app data if db is empty\r\n//                return true;\r\n\r\n            case R.id.logoutOption:\r\n//                manageBackup(true, false);\r\n\r\n                MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n                alertdialogBuilder.setMessage(R.string.sure_to_logout);\r\n                alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        logout();\r\n                    }\r\n                });\r\n                alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n                AlertDialog alertDialog = alertdialogBuilder.create();\r\n                alertDialog.show();\r\n                Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n                Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n                positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method starts intent to another activity to change settings\r\n     *\r\n     * @return void\r\n     */\r\n    public void settings() {\r\n        Intent intent = new Intent(this, SettingsActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Logs out the user. It removes user account using AccountManager.\r\n     *\r\n     * @return void\r\n     */\r\n    public void logout() {\r\n\r\n        OfflineLogin.getOfflineLogin().setOfflineLoginStatus(false);\r\n\r\n//        parseLogOut();\r\n\r\n       /* AccountManager manager = AccountManager.get(HomeActivity.this);\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }*/\r\n     /*   Account[] accountList = manager.getAccountsByType(\"io.intelehealth.openmrs\");\r\n        if (accountList.length > 0) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                manager.removeAccount(accountList[0], HomeActivity.this, null, null);\r\n            } else {\r\n                manager.removeAccount(accountList[0], null, null); // Legacy implementation\r\n            }\r\n        }\r\n*/\r\n        Intent intent = new Intent(HomeActivity.this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n\r\n        SyncUtils syncUtils = new SyncUtils();\r\n        syncUtils.syncBackground();\r\n        sessionManager.setReturningUser(false);\r\n        sessionManager.setLogout(true);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        //IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        //registerReceiver(syncBroadcastReceiver, filter);\r\n        checkAppVer();  //auto-update feature.\r\n//        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n                && Locale.getDefault().toString().equals(\"en\")) {\r\n//            lastSyncAgo.setText(CalculateAgoTime());\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        registerReceiver(syncBroadcastReceiver, filter);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        try {\r\n            unregisterReceiver(syncBroadcastReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean keyVerified(String key) {\r\n        //TODO: Verify License Key\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        /*new AlertDialog.Builder(this)\r\n                .setMessage(\"Are you sure you want to EXIT ?\")\r\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        moveTaskToBack(true);\r\n                        finish();\r\n\r\n                    }\r\n\r\n                })\r\n                .setNegativeButton(\"No\", null)\r\n                .show();\r\n*/\r\n        MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n\r\n        // AlertDialog.Builder alertdialogBuilder = new AlertDialog.Builder(this, R.style.AlertDialogStyle);\r\n        alertdialogBuilder.setMessage(R.string.sure_to_exit);\r\n        alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                moveTaskToBack(true);\r\n                // finish();\r\n            }\r\n        });\r\n        alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n\r\n        AlertDialog alertDialog = alertdialogBuilder.create();\r\n        alertDialog.show();\r\n\r\n        Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n        Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n\r\n        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //positiveButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //negativeButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n    }\r\n\r\n    private List<Integer> mTempSyncHelperList = new ArrayList<Integer>();\r\n    private BroadcastReceiver syncBroadcastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Logger.logD(\"syncBroadcastReceiver\", \"onReceive! \" + intent);\r\n\r\n            if (intent != null && intent.hasExtra(AppConstants.SYNC_INTENT_DATA_KEY)) {\r\n                int flagType = intent.getIntExtra(AppConstants.SYNC_INTENT_DATA_KEY, AppConstants.SYNC_FAILED);\r\n                if (sessionManager.isFirstTimeLaunched()) {\r\n                    if (flagType == AppConstants.SYNC_FAILED) {\r\n                        hideSyncProgressBar(false);\r\n                        /*Toast.makeText(context, R.string.failed_synced, Toast.LENGTH_SHORT).show();\r\n                        finish();*/\r\n                        new AlertDialog.Builder(HomeActivity.this)\r\n                                .setMessage(R.string.failed_initial_synced)\r\n                                .setPositiveButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        finish();\r\n                                    }\r\n\r\n                                }).setCancelable(false)\r\n\r\n                                .show();\r\n                    } else {\r\n                        mTempSyncHelperList.add(flagType);\r\n                        if (mTempSyncHelperList.contains(AppConstants.SYNC_PULL_DATA_DONE)\r\n//                                && mTempSyncHelperList.contains(AppConstants.SYNC_PUSH_DATA_DONE)\r\n                                /*&& mTempSyncHelperList.contains(AppConstants.SYNC_PATIENT_PROFILE_IMAGE_PUSH_DONE)\r\n                                && mTempSyncHelperList.contains(AppConstants.SYNC_OBS_IMAGE_PUSH_DONE)*/) {\r\n                            hideSyncProgressBar(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        }\r\n    };\r\n\r\n    private void hideSyncProgressBar(boolean isSuccess) {\r\n        if (mTempSyncHelperList != null) mTempSyncHelperList.clear();\r\n        if (mSyncProgressDialog != null && mSyncProgressDialog.isShowing()) {\r\n            mSyncProgressDialog.dismiss();\r\n            if (isSuccess) {\r\n\r\n                sessionManager.setFirstTimeLaunched(false);\r\n                sessionManager.setMigration(true);\r\n                // initial setup/sync done and now we can set the periodic background sync job\r\n                // given some delay after initial sync\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n                    }\r\n                }, 10000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMindmapDownloadURL(String url, String key) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url); //trim\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        try {\r\n            Observable<DownloadMindMapRes> resultsObservable = apiService.DOWNLOAD_MIND_MAP_RES_OBSERVABLE(key);\r\n            resultsObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<DownloadMindMapRes>() {\r\n                        @Override\r\n                        public void onNext(DownloadMindMapRes res) {\r\n                            customProgressDialog.dismiss();\r\n                            if (res.getMessage() != null && res.getMessage().equalsIgnoreCase(\"Success\")) {\r\n\r\n                                Log.e(\"MindMapURL\", \"Successfully get MindMap URL\");\r\n                                mTask = new DownloadMindMaps(context, mProgressDialog);\r\n                                mindmapURL = res.getMindmap().trim();\r\n                                sessionManager.setLicenseKey(key);\r\n                                checkExistingMindMaps();\r\n\r\n                            } else {\r\n                                Toast.makeText(context, getResources().getString(R.string.no_protocols_found), Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n                            customProgressDialog.dismiss();\r\n                            Toast.makeText(context, getResources().getString(R.string.unable_to_get_proper_response), Toast.LENGTH_SHORT).show();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n\r\n                        }\r\n                    });\r\n        } catch (IllegalArgumentException e) {\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getMessage());\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getStackTrace());\r\n        }\r\n    }\r\n\r\n    private void checkExistingMindMaps() {\r\n\r\n        //Check is there any existing mindmaps are present, if yes then delete.\r\n\r\n        File engines = new File(context.getFilesDir().getAbsolutePath(), \"/Engines\");\r\n        Log.e(TAG, \"Engines folder=\" + engines.exists());\r\n        if (engines.exists()) {\r\n            engines.delete();\r\n        }\r\n        File logo = new File(context.getFilesDir().getAbsolutePath(), \"/logo\");\r\n        Log.e(TAG, \"Logo folder=\" + logo.exists());\r\n        if (logo.exists()) {\r\n            logo.delete();\r\n        }\r\n        File physicalExam = new File(context.getFilesDir().getAbsolutePath() + \"/physExam.json\");\r\n        Log.e(TAG, \"physExam.json=\" + physicalExam.exists());\r\n        if (physicalExam.exists()) {\r\n            physicalExam.delete();\r\n        }\r\n        File familyHistory = new File(context.getFilesDir().getAbsolutePath() + \"/famHist.json\");\r\n        Log.e(TAG, \"famHist.json=\" + familyHistory.exists());\r\n        if (familyHistory.exists()) {\r\n            familyHistory.delete();\r\n        }\r\n        File pastMedicalHistory = new File(context.getFilesDir().getAbsolutePath() + \"/patHist.json\");\r\n        Log.e(TAG, \"patHist.json=\" + pastMedicalHistory.exists());\r\n        if (pastMedicalHistory.exists()) {\r\n            pastMedicalHistory.delete();\r\n        }\r\n        File config = new File(context.getFilesDir().getAbsolutePath() + \"/config.json\");\r\n        Log.e(TAG, \"config.json=\" + config.exists());\r\n        if (config.exists()) {\r\n            config.delete();\r\n        }\r\n\r\n        //Start downloading mindmaps\r\n        mTask.execute(mindmapURL, context.getFilesDir().getAbsolutePath() + \"/mindmaps.zip\");\r\n        Log.e(\"DOWNLOAD\", \"isSTARTED\");\r\n\r\n    }\r\n\r\n    private void checkAppVer() {\r\n\r\n        try {\r\n            PackageInfo pInfo = context.getPackageManager().getPackageInfo(getPackageName(), 0);\r\n            String version = pInfo.versionName;\r\n            versionCode = pInfo.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        disposable.add((Disposable) AppConstants.apiInterface.checkAppUpdate()\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribeWith(new DisposableSingleObserver<CheckAppUpdateRes>() {\r\n                    @Override\r\n                    public void onSuccess(CheckAppUpdateRes res) {\r\n                        int latestVersionCode = 0;\r\n                        if (!res.getLatestVersionCode().isEmpty()) {\r\n                            latestVersionCode = Integer.parseInt(res.getLatestVersionCode());\r\n                        }\r\n\r\n                        if (latestVersionCode > versionCode) {\r\n                            android.app.AlertDialog.Builder builder;\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this, android.R.style.Theme_Material_Dialog_Alert);\r\n                            } else {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this);\r\n                            }\r\n\r\n\r\n                            builder.setTitle(getResources().getString(R.string.new_update_available))\r\n                                    .setCancelable(false)\r\n                                    .setMessage(getResources().getString(R.string.update_app_note))\r\n                                    .setPositiveButton(getResources().getString(R.string.update), new DialogInterface.OnClickListener() {\r\n                                        public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                            final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object\r\n                                            try {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + appPackageName)));\r\n                                            } catch (ActivityNotFoundException anfe) {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));\r\n                                            }\r\n\r\n                                        }\r\n                                    })\r\n\r\n                                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                                    .setCancelable(false);\r\n\r\n                            Dialog dialog = builder.show();\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                int textViewId = dialog.getContext().getResources().getIdentifier(\"android:id/alertTitle\", null, null);\r\n                                TextView tv = (TextView) dialog.findViewById(textViewId);\r\n                                tv.setTextColor(getResources().getColor(R.color.white));\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable e) {\r\n                        Log.e(\"Error\", \"\" + e);\r\n                    }\r\n                })\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+--- app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(revision 3dfc6cc3ab4d038979a3b922a72c02dc02e76966)
-++++ app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(date 1621419769256)
-+@@ -395,159 +395,63 @@
-+ 
-+                 if (NetworkConnection.isOnline(this)) {
-+ 
-+-                    if (!sessionManager.getLicenseKey().isEmpty()) {
-+-
-+-                        String licenseUrl = sessionManager.getMindMapServerUrl();
-+-                        String licenseKey = sessionManager.getLicenseKey();
-+-                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-+-
-+-                    } else {
-+-//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-+-//                    LayoutInflater li = LayoutInflater.from(this);
-+-//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-//                    dialog.setTitle(getString(R.string.enter_license_key))
-+-//                            .setView(promptsView)
-+-//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//
-+-//                                    Dialog d = (Dialog) dialog;
-+-//
-+-//                                    EditText etURL = d.findViewById(R.id.licenseurl);
-+-//                                    EditText etKey = d.findViewById(R.id.licensekey);
-+-//                                    String url = etURL.getText().toString().replace(" ", "");
-+-//                                    String key = etKey.getText().toString().trim();
-+-//
-+-//                                    if (url.isEmpty()) {
-+-//                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (url.contains(":")) {
-+-//                                        etURL.setError(getResources().getString(R.string.invalid_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (key.isEmpty()) {
-+-//                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-+-//                                        etKey.requestFocus();
-+-//                                        return;
-+-//                                    }
-++//                    if (!sessionManager.getLicenseKey().isEmpty()) {
-+ //
-+-//                                    sessionManager.setMindMapServerUrl(url); //trim
-+-//                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-++//                        String licenseUrl = sessionManager.getMindMapServerUrl();
-++//                        String licenseKey = sessionManager.getLicenseKey();
-++//                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-+ //
-+-//                                }
-+-//                            })
-+-//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//                                    dialog.dismiss();
-+-//                                }
-+-//                            });
-+-//                    Dialog builderDialog = dialog.show();
-+-//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-+-//
-+-//                    // }
-+-                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-                        LayoutInflater li = LayoutInflater.from(this);
-+-                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-
-+-                                        dialog.setTitle(getString(R.string.enter_license_key))
-+-                                                .setView(promptsView)
-+-                                                .setPositiveButton(getString(R.string.button_ok), null)
-+-                                                .setNegativeButton(getString(R.string.button_cancel), null);
-+-
-+-                                        AlertDialog alertDialog = dialog.create();
-+-                                        alertDialog.setView(promptsView, 20, 0, 20, 0);
-+-                                        alertDialog.show();
-+-                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...
-+-
-+-                                        // Get the alert dialog buttons reference
-+-                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
-+-                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);
-+-
-+-                                        // Change the alert dialog buttons text and background color
-+-                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-
-+-                                        positiveButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                EditText text = promptsView.findViewById(R.id.licensekey);
-+-                                                EditText url = promptsView.findViewById(R.id.licenseurl);
-++//                    } else {
-++                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-++                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-++                    LayoutInflater li = LayoutInflater.from(this);
-++                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-++                    dialog.setTitle(getString(R.string.enter_license_key))
-++                            .setView(promptsView)
-++                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-+ 
-+-                                                url.setError(null);
-+-                                                text.setError(null);
-++                                    Dialog d = (Dialog) dialog;
-+ 
-+-                                                //If both are not entered...
-+-                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url is empty...key is not empty...
-+-                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url is not empty...key is empty...
-+-                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    text.requestFocus();
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-++                                    EditText etURL = d.findViewById(R.id.licenseurl);
-++                                    EditText etKey = d.findViewById(R.id.licensekey);
-++                                    String url = etURL.getText().toString().replace(" ", "");
-++                                    String key = etKey.getText().toString().trim();
-++
-++                                    if (url.isEmpty()) {
-++                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (url.contains(":")) {
-++                                        etURL.setError(getResources().getString(R.string.invalid_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (key.isEmpty()) {
-++                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-++                                        etKey.requestFocus();
-++                                        return;
-++                                    }
-+ 
-+-                                                //If Url has : in it...
-+-                                                if (url.getText().toString().trim().contains(":")) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.invalid_url));
-+-                                                    return;
-+-                                                }
-++                                    sessionManager.setMindMapServerUrl(url); //trim
-++                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-+ 
-+-                                                //If url entered is Invalid...
-+-                                                if (!url.getText().toString().trim().isEmpty()) {
-+-                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {
-+-                                                        String url_field = "https://" + url.getText().toString() + ":3004/";
-+-                                                        if (URLUtil.isValidUrl(url_field)) {
-+-                                                            key = text.getText().toString().trim();
-+-                                                            licenseUrl = url.getText().toString().trim();
-+-
-+-                                                            sessionManager.setMindMapServerUrl(licenseUrl);
-+-
-+-                                                            if (keyVerified(key)) {
-+-                                                                getMindmapDownloadURL("https://" + licenseUrl + ":3004/",key);
-+-                                                                alertDialog.dismiss();
-+-                                                            }
-+-                                                        } else {
-+-                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();
-+-                                                        }
-++                                }
-++                            })
-++                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-++                                    dialog.dismiss();
-++                                }
-++                            });
-++                    Dialog builderDialog = dialog.show();
-++                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-+ 
-+-                                                    } else {
-+-                                                        //invalid url || invalid url and key.
-+-                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();
-+-                                                    }
-+-                                                } else {
-+-                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();
-+-                                                }
-+-                                            }
-+-                                        });
-+-
-+-                                        negativeButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                alertDialog.dismiss();
-+-                                            }
-+-                                        });
-+-
-+-                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);
-+-
-+-                }}else {
-++                    // }
-++
-++                    }else {
-+                     Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();
-+                 }
-+ 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]/shelved.patch	(date 1621420899668)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]/shelved.patch	(date 1621420899668)
-@@ -0,0 +1,314 @@
-+Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package org.intelehealth.ekalhelpline.activities.homeActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.work.ExistingPeriodicWorkPolicy;\r\nimport androidx.work.WorkManager;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.activities.activePatientsActivity.ActivePatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.loginActivity.LoginActivity;\r\nimport org.intelehealth.ekalhelpline.activities.searchPatientActivity.SearchPatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.settingsActivity.SettingsActivity;\r\nimport org.intelehealth.ekalhelpline.activities.todayPatientActivity.TodayPatientActivity;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.models.CheckAppUpdateRes;\r\nimport org.intelehealth.ekalhelpline.models.DownloadMindMapRes;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.syncModule.SyncUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;\r\nimport org.intelehealth.ekalhelpline.utilities.FileUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkConnection;\r\nimport org.intelehealth.ekalhelpline.utilities.OfflineLogin;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\nimport org.intelehealth.ekalhelpline.widget.materialprogressbar.CustomProgressDialog;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.disposables.CompositeDisposable;\r\nimport io.reactivex.disposables.Disposable;\r\nimport io.reactivex.observers.DisposableObserver;\r\nimport io.reactivex.observers.DisposableSingleObserver;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n/**\r\n * Home Screen\r\n */\r\n\r\npublic class HomeActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = HomeActivity.class.getSimpleName();\r\n    SessionManager sessionManager = null;\r\n    private ProgressDialog mSyncProgressDialog;\r\n    CountDownTimer CDT;\r\n    private boolean hasLicense = false;\r\n    int i = 5;\r\n\r\n    TextView lastSyncTextView;\r\n    TextView lastSyncAgo;\r\n    Button manualSyncButton;\r\n    //IntentFilter filter;\r\n\r\n    SyncUtils syncUtils = new SyncUtils();\r\n    CardView c1, c2, c3, c4, c5, c6;\r\n    private String key = null;\r\n    private String licenseUrl = null;\r\n\r\n    Context context;\r\n    CustomProgressDialog customProgressDialog;\r\n    private String mindmapURL = \"\";\r\n    private DownloadMindMaps mTask;\r\n    ProgressDialog mProgressDialog;\r\n\r\n    private int versionCode = 0;\r\n    private CompositeDisposable disposable = new CompositeDisposable();\r\n    TextView newPatient_textview, findPatients_textview, todaysVisits_textview,\r\n            activeVisits_textview, videoLibrary_textview, help_textview;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_home);\r\n        sessionManager = new SessionManager(this);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n\r\n        String language = sessionManager.getAppLanguage();\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n\r\n        setTitle(R.string.title_activity_login);\r\n        context = HomeActivity.this;\r\n        customProgressDialog = new CustomProgressDialog(context);\r\n        /*syncBroadcastReceiver = new SyncBroadcastReceiver();\r\n        filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);*/\r\n\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        checkAppVer();  //auto-update feature.\r\n\r\n        Logger.logD(TAG, \"onCreate: \" + getFilesDir().toString());\r\n        lastSyncTextView = findViewById(R.id.lastsynctextview);\r\n        lastSyncAgo = findViewById(R.id.lastsyncago);\r\n        manualSyncButton = findViewById(R.id.manualsyncbutton);\r\n//        manualSyncButton.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);\r\n       // c1 = findViewById(R.id.cardview_newpat);\r\n        c2 = findViewById(R.id.cardview_find_patient);\r\n        c3 = findViewById(R.id.cardview_today_patient);\r\n        c4 = findViewById(R.id.cardview_active_patients);\r\n        c5 = findViewById(R.id.cardview_video_libraby);\r\n        c6 = findViewById(R.id.cardview_help_whatsapp);\r\n\r\n        //card textview referrenced to fix bug of localization not working in some cases...\r\n     /*   newPatient_textview = findViewById(R.id.newPatient_textview);\r\n        newPatient_textview.setText(R.string.new_patient);*/\r\n\r\n        findPatients_textview = findViewById(R.id.findPatients_textview);\r\n        findPatients_textview.setText(R.string.find_patient);\r\n\r\n        todaysVisits_textview = findViewById(R.id.todaysVisits_textview);\r\n        todaysVisits_textview.setText(R.string.today_visits);\r\n\r\n        activeVisits_textview = findViewById(R.id.activeVisits_textview);\r\n        activeVisits_textview.setText(R.string.active_visits);\r\n\r\n        videoLibrary_textview = findViewById(R.id.videoLibrary_textview);\r\n        videoLibrary_textview.setText(R.string.video_library);\r\n\r\n        help_textview = findViewById(R.id.help_textview);\r\n        help_textview.setText(R.string.Whatsapp_Help_Cardview);\r\n\r\n        // manualSyncButton.setText(R.string.sync_now);\r\n        manualSyncButton.setText(R.string.refresh);\r\n\r\n        //Help section of watsapp...\r\n        c6.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String phoneNumberWithCountryCode = \"+917005308163\";\r\n                String message =\r\n                        getString(R.string.hello_my_name_is) + \" \" + sessionManager.getChwname() + \" \" +\r\n                                /*\" from \" + sessionManager.getState() + */getString(R.string.i_need_assistance);\r\n\r\n                startActivity(new Intent(Intent.ACTION_VIEW,\r\n                        Uri.parse(\r\n                                String.format(\"https://api.whatsapp.com/send?phone=%s&text=%s\",\r\n                                        phoneNumberWithCountryCode, message))));\r\n            }\r\n        });\r\n/*\r\n        c1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Loads the config file values and check for the boolean value of privacy key.\r\n                ConfigUtils configUtils = new ConfigUtils(HomeActivity.this);\r\n                if (configUtils.privacy_notice()) {\r\n                    Intent intent = new Intent(HomeActivity.this, PrivacyNotice_Activity.class);\r\n                    startActivity(intent);\r\n                } else {\r\n                    //Clear HouseHold UUID from Session for new registration\r\n                    sessionManager.setHouseholdUuid(\"\");\r\n\r\n                    Intent intent = new Intent(HomeActivity.this, IdentificationActivity.class);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n*/\r\n        c2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, SearchPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, TodayPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c4.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, ActivePatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                videoLibrary();\r\n            }\r\n        });\r\n\r\n\r\n        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n\r\n//        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n////            lastSyncAgo.setText(CalculateAgoTime());\r\n//        }\r\n\r\n        manualSyncButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, context);\r\n\r\n                if (isNetworkConnected()) {\r\n                    Toast.makeText(context, getString(R.string.syncInProgress), Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Toast.makeText(context, context.getString(R.string.failed_synced), Toast.LENGTH_LONG).show();\r\n                }\r\n\r\n                syncUtils.syncForeground(\"home\");\r\n//                if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                        && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n//                    lastSyncAgo.setText(sessionManager.getLastTimeAgo());\r\n//                }\r\n            }\r\n        });\r\n        if (sessionManager.isFirstTimeLaunched()) {\r\n            mSyncProgressDialog = new ProgressDialog(HomeActivity.this, R.style.AlertDialogStyle); //thats how to add a style!\r\n            mSyncProgressDialog.setTitle(R.string.syncInProgress);\r\n            mSyncProgressDialog.setCancelable(false);\r\n            mSyncProgressDialog.setProgress(i);\r\n\r\n            mSyncProgressDialog.show();\r\n\r\n            syncUtils.initialSync(\"home\");\r\n        } else {\r\n            // if initial setup done then we can directly set the periodic background sync job\r\n            WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n        }\r\n\r\n\r\n        showProgressbar();\r\n    }\r\n\r\n    //function for handling the video library feature...\r\n    private void videoLibrary() {\r\n        if (!sessionManager.getLicenseKey().isEmpty())\r\n            hasLicense = true;\r\n        //Check for license key and load the correct config file\r\n        try {\r\n            JSONObject obj = null;\r\n            if (hasLicense) {\r\n                obj = new JSONObject(Objects.requireNonNullElse\r\n                        (FileUtils.readFileRoot(AppConstants.CONFIG_FILE_NAME, context),\r\n                                String.valueOf(FileUtils.encodeJSON(context, AppConstants.CONFIG_FILE_NAME)))); //Load the config file\r\n            } else {\r\n                obj = new JSONObject(String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)));\r\n            }\r\n\r\n            if (obj.has(\"video_library\")) {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                Uri uri = Uri.parse(obj.getString(\"video_library\"));\r\n                intent.setData(uri);\r\n                startActivity(intent);\r\n            } else {\r\n                Toast.makeText(context, \"No config attribute found\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } catch (JSONException e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Toast.makeText(getApplicationContext(), \"JsonException\" + e, Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    private void showProgressbar() {\r\n\r\n\r\n// instantiate it within the onCreate method\r\n        mProgressDialog = new ProgressDialog(HomeActivity.this);\r\n        mProgressDialog.setMessage(getString(R.string.download_protocols));\r\n        mProgressDialog.setIndeterminate(true);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n        mProgressDialog.setCancelable(false);\r\n    }\r\n\r\n\r\n    private String CalculateAgoTime() {\r\n        String finalTime = \"\";\r\n\r\n        String syncTime = sessionManager.getLastSyncDateTime();\r\n\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd MMM yyyy HH:mm\", Locale.getDefault());\r\n        ParsePosition pos = new ParsePosition(0);\r\n        long then = formatter.parse(syncTime, pos).getTime();\r\n        long now = new Date().getTime();\r\n\r\n        long seconds = (now - then) / 1000;\r\n        long minutes = seconds / 60;\r\n        long hours = minutes / 60;\r\n        long days = hours / 24;\r\n\r\n        String time = \"\";\r\n        long num = 0;\r\n        if (days > 0) {\r\n            num = days;\r\n            time = days + \" \" + context.getString(R.string.day);\r\n        } else if (hours > 0) {\r\n            num = hours;\r\n            time = hours + \" \" + context.getString(R.string.hour);\r\n        } else if (minutes >= 0) {\r\n            num = minutes;\r\n            time = minutes + \" \" + context.getString(R.string.minute);\r\n        }\r\n//      <For Seconds>\r\n//      else {\r\n//            num = seconds;\r\n//            time = seconds + \" second\";\r\n//      }\r\n        if (num > 1) {\r\n            time += context.getString(R.string.s);\r\n        }\r\n        finalTime = time + \" \" + context.getString(R.string.ago);\r\n\r\n        sessionManager.setLastTimeAgo(finalTime);\r\n\r\n        return finalTime;\r\n    }\r\n\r\n    private boolean isNetworkConnected() {\r\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        return cm.getActiveNetworkInfo() != null && cm.getActiveNetworkInfo().isConnected();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_home, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n//            case R.id.syncOption:\r\n//                refreshDatabases();\r\n//                return true;\r\n            case R.id.settingsOption:\r\n                settings();\r\n                return true;\r\n            case R.id.updateProtocolsOption: {\r\n\r\n\r\n                if (NetworkConnection.isOnline(this)) {\r\n\r\n                    if (!sessionManager.getLicenseKey().isEmpty()) {\r\n\r\n                        String licenseUrl = sessionManager.getMindMapServerUrl();\r\n                        String licenseKey = sessionManager.getLicenseKey();\r\n                        getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\", licenseKey);\r\n\r\n                    } else {\r\n//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);\r\n//                    LayoutInflater li = LayoutInflater.from(this);\r\n//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n//                    dialog.setTitle(getString(R.string.enter_license_key))\r\n//                            .setView(promptsView)\r\n//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//\r\n//                                    Dialog d = (Dialog) dialog;\r\n//\r\n//                                    EditText etURL = d.findViewById(R.id.licenseurl);\r\n//                                    EditText etKey = d.findViewById(R.id.licensekey);\r\n//                                    String url = etURL.getText().toString().replace(\" \", \"\");\r\n//                                    String key = etKey.getText().toString().trim();\r\n//\r\n//                                    if (url.isEmpty()) {\r\n//                                        etURL.setError(getResources().getString(R.string.enter_server_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (url.contains(\":\")) {\r\n//                                        etURL.setError(getResources().getString(R.string.invalid_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (key.isEmpty()) {\r\n//                                        etKey.setError(getResources().getString(R.string.enter_license_key));\r\n//                                        etKey.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//\r\n//                                    sessionManager.setMindMapServerUrl(url); //trim\r\n//                                    getMindmapDownloadURL(\"https://\" + url + \":3004/\", key);\r\n//\r\n//                                }\r\n//                            })\r\n//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//                                    dialog.dismiss();\r\n//                                }\r\n//                            });\r\n//                    Dialog builderDialog = dialog.show();\r\n//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);\r\n//\r\n//                    // }\r\n                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n                        LayoutInflater li = LayoutInflater.from(this);\r\n                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n\r\n                                        dialog.setTitle(getString(R.string.enter_license_key))\r\n                                                .setView(promptsView)\r\n                                                .setPositiveButton(getString(R.string.button_ok), null)\r\n                                                .setNegativeButton(getString(R.string.button_cancel), null);\r\n\r\n                                        AlertDialog alertDialog = dialog.create();\r\n                                        alertDialog.setView(promptsView, 20, 0, 20, 0);\r\n                                        alertDialog.show();\r\n                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...\r\n\r\n                                        // Get the alert dialog buttons reference\r\n                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\r\n                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);\r\n\r\n                                        // Change the alert dialog buttons text and background color\r\n                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n                                        positiveButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                EditText text = promptsView.findViewById(R.id.licensekey);\r\n                                                EditText url = promptsView.findViewById(R.id.licenseurl);\r\n\r\n                                                url.setError(null);\r\n                                                text.setError(null);\r\n\r\n                                                //If both are not entered...\r\n                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is empty...key is not empty...\r\n                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url is not empty...key is empty...\r\n                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                                    text.requestFocus();\r\n                                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If Url has : in it...\r\n                                                if (url.getText().toString().trim().contains(\":\")) {\r\n                                                    url.requestFocus();\r\n                                                    url.setError(getResources().getString(R.string.invalid_url));\r\n                                                    return;\r\n                                                }\r\n\r\n                                                //If url entered is Invalid...\r\n                                                if (!url.getText().toString().trim().isEmpty()) {\r\n                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {\r\n                                                        String url_field = \"https://\" + url.getText().toString() + \":3004/\";\r\n                                                        if (URLUtil.isValidUrl(url_field)) {\r\n                                                            key = text.getText().toString().trim();\r\n                                                            licenseUrl = url.getText().toString().trim();\r\n\r\n                                                            sessionManager.setMindMapServerUrl(licenseUrl);\r\n\r\n                                                            if (keyVerified(key)) {\r\n                                                                getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\",key);\r\n                                                                alertDialog.dismiss();\r\n                                                            }\r\n                                                        } else {\r\n                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n                                                        }\r\n\r\n                                                    } else {\r\n                                                        //invalid url || invalid url and key.\r\n                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();\r\n                                                    }\r\n                                                } else {\r\n                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();\r\n                                                }\r\n                                            }\r\n                                        });\r\n\r\n                                        negativeButton.setOnClickListener(new View.OnClickListener() {\r\n                                            @Override\r\n                                            public void onClick(View v) {\r\n                                                alertDialog.dismiss();\r\n                                            }\r\n                                        });\r\n\r\n                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                }}else {\r\n                    Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n         /*   case R.id.sync:\r\n//                pullDataDAO.pullData(this);\r\n//                pullDataDAO.pushDataApi();\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, this);\r\n                boolean isSynced = syncUtils.syncForeground();\r\n//                boolean i = imagesPushDAO.patientProfileImagesPush();\r\n//                boolean o = imagesPushDAO.obsImagesPush();\r\n//                if (isSynced)\r\n//                    AppConstants.notificationUtils.showNotifications_noProgress(getString(R.string.sync_not_available), getString(R.string.please_connect_to_internet), getApplicationContext());\r\n//                else\r\n//                    AppConstants.notificationUtils.showNotifications(getString(R.string.image_upload), getString(R.string.image_upload_failed), 4, this);\r\n                return true;\r\n                */\r\n//            case R.id.backupOption:\r\n//                manageBackup(true, false);  // to backup app data at any time of the day\r\n//                return true;\r\n//\r\n//            case R.id.restoreOption:\r\n//                manageBackup(false, false); // to restore app data if db is empty\r\n//                return true;\r\n\r\n            case R.id.logoutOption:\r\n//                manageBackup(true, false);\r\n\r\n                MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n                alertdialogBuilder.setMessage(R.string.sure_to_logout);\r\n                alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        logout();\r\n                    }\r\n                });\r\n                alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n                AlertDialog alertDialog = alertdialogBuilder.create();\r\n                alertDialog.show();\r\n                Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n                Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n                positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method starts intent to another activity to change settings\r\n     *\r\n     * @return void\r\n     */\r\n    public void settings() {\r\n        Intent intent = new Intent(this, SettingsActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Logs out the user. It removes user account using AccountManager.\r\n     *\r\n     * @return void\r\n     */\r\n    public void logout() {\r\n\r\n        OfflineLogin.getOfflineLogin().setOfflineLoginStatus(false);\r\n\r\n//        parseLogOut();\r\n\r\n       /* AccountManager manager = AccountManager.get(HomeActivity.this);\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }*/\r\n     /*   Account[] accountList = manager.getAccountsByType(\"io.intelehealth.openmrs\");\r\n        if (accountList.length > 0) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                manager.removeAccount(accountList[0], HomeActivity.this, null, null);\r\n            } else {\r\n                manager.removeAccount(accountList[0], null, null); // Legacy implementation\r\n            }\r\n        }\r\n*/\r\n        Intent intent = new Intent(HomeActivity.this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n\r\n        SyncUtils syncUtils = new SyncUtils();\r\n        syncUtils.syncBackground();\r\n        sessionManager.setReturningUser(false);\r\n        sessionManager.setLogout(true);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        //IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        //registerReceiver(syncBroadcastReceiver, filter);\r\n        checkAppVer();  //auto-update feature.\r\n//        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n                && Locale.getDefault().toString().equals(\"en\")) {\r\n//            lastSyncAgo.setText(CalculateAgoTime());\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        registerReceiver(syncBroadcastReceiver, filter);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        try {\r\n            unregisterReceiver(syncBroadcastReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean keyVerified(String key) {\r\n        //TODO: Verify License Key\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        /*new AlertDialog.Builder(this)\r\n                .setMessage(\"Are you sure you want to EXIT ?\")\r\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        moveTaskToBack(true);\r\n                        finish();\r\n\r\n                    }\r\n\r\n                })\r\n                .setNegativeButton(\"No\", null)\r\n                .show();\r\n*/\r\n        MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n\r\n        // AlertDialog.Builder alertdialogBuilder = new AlertDialog.Builder(this, R.style.AlertDialogStyle);\r\n        alertdialogBuilder.setMessage(R.string.sure_to_exit);\r\n        alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                moveTaskToBack(true);\r\n                // finish();\r\n            }\r\n        });\r\n        alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n\r\n        AlertDialog alertDialog = alertdialogBuilder.create();\r\n        alertDialog.show();\r\n\r\n        Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n        Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n\r\n        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //positiveButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //negativeButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n    }\r\n\r\n    private List<Integer> mTempSyncHelperList = new ArrayList<Integer>();\r\n    private BroadcastReceiver syncBroadcastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Logger.logD(\"syncBroadcastReceiver\", \"onReceive! \" + intent);\r\n\r\n            if (intent != null && intent.hasExtra(AppConstants.SYNC_INTENT_DATA_KEY)) {\r\n                int flagType = intent.getIntExtra(AppConstants.SYNC_INTENT_DATA_KEY, AppConstants.SYNC_FAILED);\r\n                if (sessionManager.isFirstTimeLaunched()) {\r\n                    if (flagType == AppConstants.SYNC_FAILED) {\r\n                        hideSyncProgressBar(false);\r\n                        /*Toast.makeText(context, R.string.failed_synced, Toast.LENGTH_SHORT).show();\r\n                        finish();*/\r\n                        new AlertDialog.Builder(HomeActivity.this)\r\n                                .setMessage(R.string.failed_initial_synced)\r\n                                .setPositiveButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        finish();\r\n                                    }\r\n\r\n                                }).setCancelable(false)\r\n\r\n                                .show();\r\n                    } else {\r\n                        mTempSyncHelperList.add(flagType);\r\n                        if (mTempSyncHelperList.contains(AppConstants.SYNC_PULL_DATA_DONE)\r\n//                                && mTempSyncHelperList.contains(AppConstants.SYNC_PUSH_DATA_DONE)\r\n                                /*&& mTempSyncHelperList.contains(AppConstants.SYNC_PATIENT_PROFILE_IMAGE_PUSH_DONE)\r\n                                && mTempSyncHelperList.contains(AppConstants.SYNC_OBS_IMAGE_PUSH_DONE)*/) {\r\n                            hideSyncProgressBar(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        }\r\n    };\r\n\r\n    private void hideSyncProgressBar(boolean isSuccess) {\r\n        if (mTempSyncHelperList != null) mTempSyncHelperList.clear();\r\n        if (mSyncProgressDialog != null && mSyncProgressDialog.isShowing()) {\r\n            mSyncProgressDialog.dismiss();\r\n            if (isSuccess) {\r\n\r\n                sessionManager.setFirstTimeLaunched(false);\r\n                sessionManager.setMigration(true);\r\n                // initial setup/sync done and now we can set the periodic background sync job\r\n                // given some delay after initial sync\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n                    }\r\n                }, 10000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMindmapDownloadURL(String url, String key) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url); //trim\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        try {\r\n            Observable<DownloadMindMapRes> resultsObservable = apiService.DOWNLOAD_MIND_MAP_RES_OBSERVABLE(key);\r\n            resultsObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<DownloadMindMapRes>() {\r\n                        @Override\r\n                        public void onNext(DownloadMindMapRes res) {\r\n                            customProgressDialog.dismiss();\r\n                            if (res.getMessage() != null && res.getMessage().equalsIgnoreCase(\"Success\")) {\r\n\r\n                                Log.e(\"MindMapURL\", \"Successfully get MindMap URL\");\r\n                                mTask = new DownloadMindMaps(context, mProgressDialog);\r\n                                mindmapURL = res.getMindmap().trim();\r\n                                sessionManager.setLicenseKey(key);\r\n                                checkExistingMindMaps();\r\n\r\n                            } else {\r\n                                Toast.makeText(context, getResources().getString(R.string.no_protocols_found), Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n                            customProgressDialog.dismiss();\r\n                            Toast.makeText(context, getResources().getString(R.string.unable_to_get_proper_response), Toast.LENGTH_SHORT).show();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n\r\n                        }\r\n                    });\r\n        } catch (IllegalArgumentException e) {\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getMessage());\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getStackTrace());\r\n        }\r\n    }\r\n\r\n    private void checkExistingMindMaps() {\r\n\r\n        //Check is there any existing mindmaps are present, if yes then delete.\r\n\r\n        File engines = new File(context.getFilesDir().getAbsolutePath(), \"/Engines\");\r\n        Log.e(TAG, \"Engines folder=\" + engines.exists());\r\n        if (engines.exists()) {\r\n            engines.delete();\r\n        }\r\n        File logo = new File(context.getFilesDir().getAbsolutePath(), \"/logo\");\r\n        Log.e(TAG, \"Logo folder=\" + logo.exists());\r\n        if (logo.exists()) {\r\n            logo.delete();\r\n        }\r\n        File physicalExam = new File(context.getFilesDir().getAbsolutePath() + \"/physExam.json\");\r\n        Log.e(TAG, \"physExam.json=\" + physicalExam.exists());\r\n        if (physicalExam.exists()) {\r\n            physicalExam.delete();\r\n        }\r\n        File familyHistory = new File(context.getFilesDir().getAbsolutePath() + \"/famHist.json\");\r\n        Log.e(TAG, \"famHist.json=\" + familyHistory.exists());\r\n        if (familyHistory.exists()) {\r\n            familyHistory.delete();\r\n        }\r\n        File pastMedicalHistory = new File(context.getFilesDir().getAbsolutePath() + \"/patHist.json\");\r\n        Log.e(TAG, \"patHist.json=\" + pastMedicalHistory.exists());\r\n        if (pastMedicalHistory.exists()) {\r\n            pastMedicalHistory.delete();\r\n        }\r\n        File config = new File(context.getFilesDir().getAbsolutePath() + \"/config.json\");\r\n        Log.e(TAG, \"config.json=\" + config.exists());\r\n        if (config.exists()) {\r\n            config.delete();\r\n        }\r\n\r\n        //Start downloading mindmaps\r\n        mTask.execute(mindmapURL, context.getFilesDir().getAbsolutePath() + \"/mindmaps.zip\");\r\n        Log.e(\"DOWNLOAD\", \"isSTARTED\");\r\n\r\n    }\r\n\r\n    private void checkAppVer() {\r\n\r\n        try {\r\n            PackageInfo pInfo = context.getPackageManager().getPackageInfo(getPackageName(), 0);\r\n            String version = pInfo.versionName;\r\n            versionCode = pInfo.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        disposable.add((Disposable) AppConstants.apiInterface.checkAppUpdate()\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribeWith(new DisposableSingleObserver<CheckAppUpdateRes>() {\r\n                    @Override\r\n                    public void onSuccess(CheckAppUpdateRes res) {\r\n                        int latestVersionCode = 0;\r\n                        if (!res.getLatestVersionCode().isEmpty()) {\r\n                            latestVersionCode = Integer.parseInt(res.getLatestVersionCode());\r\n                        }\r\n\r\n                        if (latestVersionCode > versionCode) {\r\n                            android.app.AlertDialog.Builder builder;\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this, android.R.style.Theme_Material_Dialog_Alert);\r\n                            } else {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this);\r\n                            }\r\n\r\n\r\n                            builder.setTitle(getResources().getString(R.string.new_update_available))\r\n                                    .setCancelable(false)\r\n                                    .setMessage(getResources().getString(R.string.update_app_note))\r\n                                    .setPositiveButton(getResources().getString(R.string.update), new DialogInterface.OnClickListener() {\r\n                                        public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                            final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object\r\n                                            try {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + appPackageName)));\r\n                                            } catch (ActivityNotFoundException anfe) {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));\r\n                                            }\r\n\r\n                                        }\r\n                                    })\r\n\r\n                                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                                    .setCancelable(false);\r\n\r\n                            Dialog dialog = builder.show();\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                int textViewId = dialog.getContext().getResources().getIdentifier(\"android:id/alertTitle\", null, null);\r\n                                TextView tv = (TextView) dialog.findViewById(textViewId);\r\n                                tv.setTextColor(getResources().getColor(R.color.white));\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable e) {\r\n                        Log.e(\"Error\", \"\" + e);\r\n                    }\r\n                })\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+--- app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(revision 3dfc6cc3ab4d038979a3b922a72c02dc02e76966)
-++++ app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(date 1621419913117)
-+@@ -395,159 +395,159 @@
-+ 
-+                 if (NetworkConnection.isOnline(this)) {
-+ 
-+-                    if (!sessionManager.getLicenseKey().isEmpty()) {
-++//                    if (!sessionManager.getLicenseKey().isEmpty()) {
-++//
-++//                        String licenseUrl = sessionManager.getMindMapServerUrl();
-++//                        String licenseKey = sessionManager.getLicenseKey();
-++//                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-++//
-++//                    } else {
-++                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-++                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-++                    LayoutInflater li = LayoutInflater.from(this);
-++                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-++                    dialog.setTitle(getString(R.string.enter_license_key))
-++                            .setView(promptsView)
-++                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-++
-++                                    Dialog d = (Dialog) dialog;
-++
-++                                    EditText etURL = d.findViewById(R.id.licenseurl);
-++                                    EditText etKey = d.findViewById(R.id.licensekey);
-++                                    String url = etURL.getText().toString().replace(" ", "");
-++                                    String key = etKey.getText().toString().trim();
-++
-++                                    if (url.isEmpty()) {
-++                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (url.contains(":")) {
-++                                        etURL.setError(getResources().getString(R.string.invalid_url));
-++                                        etURL.requestFocus();
-++                                        return;
-++                                    }
-++                                    if (key.isEmpty()) {
-++                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-++                                        etKey.requestFocus();
-++                                        return;
-++                                    }
-+ 
-+-                        String licenseUrl = sessionManager.getMindMapServerUrl();
-+-                        String licenseKey = sessionManager.getLicenseKey();
-+-                        getMindmapDownloadURL("https://" + licenseUrl + ":3004/", licenseKey);
-++                                    sessionManager.setMindMapServerUrl(url); //trim
-++                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-+ 
-+-                    } else {
-+-//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);
-+-//                    LayoutInflater li = LayoutInflater.from(this);
-+-//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-//                    dialog.setTitle(getString(R.string.enter_license_key))
-+-//                            .setView(promptsView)
-+-//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-++                                }
-++                            })
-++                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-++                                @Override
-++                                public void onClick(DialogInterface dialog, int which) {
-++                                    dialog.dismiss();
-++                                }
-++                            });
-++                    Dialog builderDialog = dialog.show();
-++                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-++
-++                    // }
-++//                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-++//                        LayoutInflater li = LayoutInflater.from(this);
-++//                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-++//
-++//                                        dialog.setTitle(getString(R.string.enter_license_key))
-++//                                                .setView(promptsView)
-++//                                                .setPositiveButton(getString(R.string.button_ok), null)
-++//                                                .setNegativeButton(getString(R.string.button_cancel), null);
-++//
-++//                                        AlertDialog alertDialog = dialog.create();
-++//                                        alertDialog.setView(promptsView, 20, 0, 20, 0);
-++//                                        alertDialog.show();
-++//                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...
-++//
-++//                                        // Get the alert dialog buttons reference
-++//                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
-++//                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);
-++//
-++//                                        // Change the alert dialog buttons text and background color
-++//                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-++//                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-++//
-++//                                        positiveButton.setOnClickListener(new View.OnClickListener() {
-++//                                            @Override
-++//                                            public void onClick(View v) {
-++//                                                EditText text = promptsView.findViewById(R.id.licensekey);
-++//                                                EditText url = promptsView.findViewById(R.id.licenseurl);
-+ //
-+-//                                    Dialog d = (Dialog) dialog;
-++//                                                url.setError(null);
-++//                                                text.setError(null);
-+ //
-+-//                                    EditText etURL = d.findViewById(R.id.licenseurl);
-+-//                                    EditText etKey = d.findViewById(R.id.licensekey);
-+-//                                    String url = etURL.getText().toString().replace(" ", "");
-+-//                                    String key = etKey.getText().toString().trim();
-+-//
-+-//                                    if (url.isEmpty()) {
-+-//                                        etURL.setError(getResources().getString(R.string.enter_server_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (url.contains(":")) {
-+-//                                        etURL.setError(getResources().getString(R.string.invalid_url));
-+-//                                        etURL.requestFocus();
-+-//                                        return;
-+-//                                    }
-+-//                                    if (key.isEmpty()) {
-+-//                                        etKey.setError(getResources().getString(R.string.enter_license_key));
-+-//                                        etKey.requestFocus();
-+-//                                        return;
-+-//                                    }
-++//                                                //If both are not entered...
-++//                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-++//                                                    url.requestFocus();
-++//                                                    url.setError(getResources().getString(R.string.enter_server_url));
-++//                                                    text.setError(getResources().getString(R.string.enter_license_key));
-++//                                                    return;
-++//                                                }
-++//
-++//                                                //If Url is empty...key is not empty...
-++//                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {
-++//                                                    url.requestFocus();
-++//                                                    url.setError(getResources().getString(R.string.enter_server_url));
-++//                                                    return;
-++//                                                }
-++//
-++//                                                //If Url is not empty...key is empty...
-++//                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-++//                                                    text.requestFocus();
-++//                                                    text.setError(getResources().getString(R.string.enter_license_key));
-++//                                                    return;
-++//                                                }
-+ //
-+-//                                    sessionManager.setMindMapServerUrl(url); //trim
-+-//                                    getMindmapDownloadURL("https://" + url + ":3004/", key);
-++//                                                //If Url has : in it...
-++//                                                if (url.getText().toString().trim().contains(":")) {
-++//                                                    url.requestFocus();
-++//                                                    url.setError(getResources().getString(R.string.invalid_url));
-++//                                                    return;
-++//                                                }
-+ //
-+-//                                }
-+-//                            })
-+-//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {
-+-//                                @Override
-+-//                                public void onClick(DialogInterface dialog, int which) {
-+-//                                    dialog.dismiss();
-+-//                                }
-+-//                            });
-+-//                    Dialog builderDialog = dialog.show();
-+-//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);
-++//                                                //If url entered is Invalid...
-++//                                                if (!url.getText().toString().trim().isEmpty()) {
-++//                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {
-++//                                                        String url_field = "https://" + url.getText().toString() + ":3004/";
-++//                                                        if (URLUtil.isValidUrl(url_field)) {
-++//                                                            key = text.getText().toString().trim();
-++//                                                            licenseUrl = url.getText().toString().trim();
-++//
-++//                                                            sessionManager.setMindMapServerUrl(licenseUrl);
-++//
-++//                                                            if (keyVerified(key)) {
-++//                                                                getMindmapDownloadURL("https://" + licenseUrl + ":3004/",key);
-++//                                                                alertDialog.dismiss();
-++//                                                            }
-++//                                                        } else {
-++//                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();
-++//                                                        }
-++//
-++//                                                    } else {
-++//                                                        //invalid url || invalid url and key.
-++//                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();
-++//                                                    }
-++//                                                } else {
-++//                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();
-++//                                                }
-++//                                            }
-++//                                        });
-++//
-++//                                        negativeButton.setOnClickListener(new View.OnClickListener() {
-++//                                            @Override
-++//                                            public void onClick(View v) {
-++//                                                alertDialog.dismiss();
-++//                                            }
-++//                                        });
-+ //
-+-//                    // }
-+-                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);
-+-                        LayoutInflater li = LayoutInflater.from(this);
-+-                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);
-+-
-+-                                        dialog.setTitle(getString(R.string.enter_license_key))
-+-                                                .setView(promptsView)
-+-                                                .setPositiveButton(getString(R.string.button_ok), null)
-+-                                                .setNegativeButton(getString(R.string.button_cancel), null);
-+-
-+-                                        AlertDialog alertDialog = dialog.create();
-+-                                        alertDialog.setView(promptsView, 20, 0, 20, 0);
-+-                                        alertDialog.show();
-+-                                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...
-+-
-+-                                        // Get the alert dialog buttons reference
-+-                                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);
-+-                                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);
-+-
-+-                                        // Change the alert dialog buttons text and background color
-+-                                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-                                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));
-+-
-+-                                        positiveButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                EditText text = promptsView.findViewById(R.id.licensekey);
-+-                                                EditText url = promptsView.findViewById(R.id.licenseurl);
-+-
-+-                                                url.setError(null);
-+-                                                text.setError(null);
-+-
-+-                                                //If both are not entered...
-+-                                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url is empty...key is not empty...
-+-                                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.enter_server_url));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url is not empty...key is empty...
-+-                                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {
-+-                                                    text.requestFocus();
-+-                                                    text.setError(getResources().getString(R.string.enter_license_key));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If Url has : in it...
-+-                                                if (url.getText().toString().trim().contains(":")) {
-+-                                                    url.requestFocus();
-+-                                                    url.setError(getResources().getString(R.string.invalid_url));
-+-                                                    return;
-+-                                                }
-+-
-+-                                                //If url entered is Invalid...
-+-                                                if (!url.getText().toString().trim().isEmpty()) {
-+-                                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {
-+-                                                        String url_field = "https://" + url.getText().toString() + ":3004/";
-+-                                                        if (URLUtil.isValidUrl(url_field)) {
-+-                                                            key = text.getText().toString().trim();
-+-                                                            licenseUrl = url.getText().toString().trim();
-+-
-+-                                                            sessionManager.setMindMapServerUrl(licenseUrl);
-+-
-+-                                                            if (keyVerified(key)) {
-+-                                                                getMindmapDownloadURL("https://" + licenseUrl + ":3004/",key);
-+-                                                                alertDialog.dismiss();
-+-                                                            }
-+-                                                        } else {
-+-                                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();
-+-                                                        }
-++//                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);
-+ 
-+-                                                    } else {
-+-                                                        //invalid url || invalid url and key.
-+-                                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();
-+-                                                    }
-+-                                                } else {
-+-                                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();
-+-                                                }
-+-                                            }
-+-                                        });
-+-
-+-                                        negativeButton.setOnClickListener(new View.OnClickListener() {
-+-                                            @Override
-+-                                            public void onClick(View v) {
-+-                                                alertDialog.dismiss();
-+-                                            }
-+-                                        });
-+-
-+-                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);
-+-
-+-                }}else {
-++                }else {
-+                     Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();
-+                 }
-+ 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_02__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_02__Default_Changelist_.xml	(date 1621420940006)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_02__Default_Changelist_.xml	(date 1621420940006)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_19-05-2021_16_02_[Default_Changelist]" date="1621420338327" recycled="false" toDelete="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_02_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19-05-2021 16:02 [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55__Default_Changelist_1.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55__Default_Changelist_1.xml	(date 1621420940084)
-+++ .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55__Default_Changelist_1.xml	(date 1621420940084)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]1" date="1621420001456" recycled="false" toDelete="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_15_55_[Default_Changelist]1/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19-05-2021 15:55 [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12__Default_Changelist_.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_19-05-2021_16_12_[Default_Changelist]" date="1621420943161" recycled="false" toDelete="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19-05-2021 16:12 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/encodings.xml
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
deleted file mode 100644
--- a/.idea/encodings.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ /dev/null	(revision 2931754a524eccd0c9372605d101a664707041c1)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding">
-    <file url="PROJECT" charset="UTF-8" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n<<<<<<< HEAD\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n=======\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"JDK\" project-jdk-type=\"JavaSDK\">\r\n>>>>>>> age_gender-based_mm_questions\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ b/.idea/misc.xml	(date 1627530426417)
@@ -1,15 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="CMakeSettings">
-    <configurations>
-      <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
-    </configurations>
-  </component>
-<<<<<<< HEAD
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
-=======
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="JDK" project-jdk-type="JavaSDK">
->>>>>>> age_gender-based_mm_questions
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"12\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ b/.idea/compiler.xml	(date 1627530426480)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="12" />
+    <bytecodeTargetLevel target="11" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ b/.idea/vcs.xml	(date 1627529782798)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"delegatedBuild\" value=\"false\" />\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"disableWrapperSourceDistributionNotification\" value=\"true\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n        <option name=\"useQualifiedModuleNames\" value=\"true\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 2931754a524eccd0c9372605d101a664707041c1)
+++ b/.idea/gradle.xml	(date 1627530426527)
@@ -1,12 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
-        <option name="delegatedBuild" value="false" />
-        <option name="testRunner" value="PLATFORM" />
-        <option name="disableWrapperSourceDistributionNotification" value="true" />
+        <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
         <option name="modules">
@@ -16,7 +13,6 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
-        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
