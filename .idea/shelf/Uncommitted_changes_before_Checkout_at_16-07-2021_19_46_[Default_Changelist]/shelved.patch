Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.intelehealth.ekalhelpline.activities.homeActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.work.ExistingPeriodicWorkPolicy;\r\nimport androidx.work.WorkManager;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.activities.activePatientsActivity.ActivePatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.loginActivity.LoginActivity;\r\nimport org.intelehealth.ekalhelpline.activities.searchPatientActivity.SearchPatientActivity;\r\nimport org.intelehealth.ekalhelpline.activities.settingsActivity.SettingsActivity;\r\nimport org.intelehealth.ekalhelpline.activities.todayPatientActivity.TodayPatientActivity;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.models.CheckAppUpdateRes;\r\nimport org.intelehealth.ekalhelpline.models.DownloadMindMapRes;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.syncModule.SyncUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;\r\nimport org.intelehealth.ekalhelpline.utilities.FileUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkConnection;\r\nimport org.intelehealth.ekalhelpline.utilities.OfflineLogin;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\nimport org.intelehealth.ekalhelpline.widget.materialprogressbar.CustomProgressDialog;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.disposables.CompositeDisposable;\r\nimport io.reactivex.disposables.Disposable;\r\nimport io.reactivex.observers.DisposableObserver;\r\nimport io.reactivex.observers.DisposableSingleObserver;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n/**\r\n * Home Screen\r\n */\r\n\r\npublic class HomeActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = HomeActivity.class.getSimpleName();\r\n    SessionManager sessionManager = null;\r\n    private ProgressDialog mSyncProgressDialog;\r\n    CountDownTimer CDT;\r\n    private boolean hasLicense = false;\r\n    int i = 5;\r\n\r\n    TextView lastSyncTextView;\r\n    TextView lastSyncAgo;\r\n    Button manualSyncButton;\r\n    //IntentFilter filter;\r\n\r\n    SyncUtils syncUtils = new SyncUtils();\r\n    CardView c1, c2, c3, c4, c5, c6;\r\n    private String key = null;\r\n    private String licenseUrl = null;\r\n\r\n    Context context;\r\n    CustomProgressDialog customProgressDialog;\r\n    private String mindmapURL = \"\";\r\n    private DownloadMindMaps mTask;\r\n    ProgressDialog mProgressDialog;\r\n\r\n    private int versionCode = 0;\r\n    private CompositeDisposable disposable = new CompositeDisposable();\r\n    TextView newPatient_textview, findPatients_textview, todaysVisits_textview,\r\n            activeVisits_textview, videoLibrary_textview, help_textview;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_home);\r\n        sessionManager = new SessionManager(this);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n\r\n        String language = sessionManager.getAppLanguage();\r\n        if (!language.equalsIgnoreCase(\"\")) {\r\n            Locale locale = new Locale(language);\r\n            Locale.setDefault(locale);\r\n            Configuration config = new Configuration();\r\n            config.locale = locale;\r\n            getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\r\n        }\r\n\r\n        setTitle(R.string.title_activity_login);\r\n        context = HomeActivity.this;\r\n        customProgressDialog = new CustomProgressDialog(context);\r\n        /*syncBroadcastReceiver = new SyncBroadcastReceiver();\r\n        filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);*/\r\n\r\n        sessionManager.setCurrentLang(getResources().getConfiguration().locale.toString());\r\n\r\n        checkAppVer();  //auto-update feature.\r\n\r\n        Logger.logD(TAG, \"onCreate: \" + getFilesDir().toString());\r\n        lastSyncTextView = findViewById(R.id.lastsynctextview);\r\n        lastSyncAgo = findViewById(R.id.lastsyncago);\r\n        manualSyncButton = findViewById(R.id.manualsyncbutton);\r\n//        manualSyncButton.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);\r\n       // c1 = findViewById(R.id.cardview_newpat);\r\n        c2 = findViewById(R.id.cardview_find_patient);\r\n        c3 = findViewById(R.id.cardview_today_patient);\r\n        c4 = findViewById(R.id.cardview_active_patients);\r\n        c5 = findViewById(R.id.cardview_video_libraby);\r\n        c6 = findViewById(R.id.cardview_help_whatsapp);\r\n\r\n        //card textview referrenced to fix bug of localization not working in some cases...\r\n     /*   newPatient_textview = findViewById(R.id.newPatient_textview);\r\n        newPatient_textview.setText(R.string.new_patient);*/\r\n\r\n        findPatients_textview = findViewById(R.id.findPatients_textview);\r\n        findPatients_textview.setText(R.string.find_patient);\r\n\r\n        todaysVisits_textview = findViewById(R.id.todaysVisits_textview);\r\n        todaysVisits_textview.setText(R.string.today_visits);\r\n\r\n        activeVisits_textview = findViewById(R.id.activeVisits_textview);\r\n        activeVisits_textview.setText(R.string.active_visits);\r\n\r\n        videoLibrary_textview = findViewById(R.id.videoLibrary_textview);\r\n        videoLibrary_textview.setText(R.string.video_library);\r\n\r\n        help_textview = findViewById(R.id.help_textview);\r\n        help_textview.setText(R.string.Whatsapp_Help_Cardview);\r\n\r\n        // manualSyncButton.setText(R.string.sync_now);\r\n        manualSyncButton.setText(R.string.refresh);\r\n\r\n        //Help section of watsapp...\r\n        c6.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String phoneNumberWithCountryCode = \"+917005308163\";\r\n                String message =\r\n                        getString(R.string.hello_my_name_is) + \" \" + sessionManager.getChwname() + \" \" +\r\n                                /*\" from \" + sessionManager.getState() + */getString(R.string.i_need_assistance);\r\n\r\n                startActivity(new Intent(Intent.ACTION_VIEW,\r\n                        Uri.parse(\r\n                                String.format(\"https://api.whatsapp.com/send?phone=%s&text=%s\",\r\n                                        phoneNumberWithCountryCode, message))));\r\n            }\r\n        });\r\n/*\r\n        c1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Loads the config file values and check for the boolean value of privacy key.\r\n                ConfigUtils configUtils = new ConfigUtils(HomeActivity.this);\r\n                if (configUtils.privacy_notice()) {\r\n                    Intent intent = new Intent(HomeActivity.this, PrivacyNotice_Activity.class);\r\n                    startActivity(intent);\r\n                } else {\r\n                    //Clear HouseHold UUID from Session for new registration\r\n                    sessionManager.setHouseholdUuid(\"\");\r\n\r\n                    Intent intent = new Intent(HomeActivity.this, IdentificationActivity.class);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n*/\r\n        c2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, SearchPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, TodayPatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c4.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(HomeActivity.this, ActivePatientActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        c5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                videoLibrary();\r\n            }\r\n        });\r\n\r\n\r\n        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n\r\n//        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n////            lastSyncAgo.setText(CalculateAgoTime());\r\n//        }\r\n\r\n        manualSyncButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, context);\r\n\r\n                if (isNetworkConnected()) {\r\n                    Toast.makeText(context, getString(R.string.syncInProgress), Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Toast.makeText(context, context.getString(R.string.failed_synced), Toast.LENGTH_LONG).show();\r\n                }\r\n\r\n                syncUtils.syncForeground(\"home\");\r\n//                if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n//                        && Locale.getDefault().toString().equalsIgnoreCase(\"en\")) {\r\n//                    lastSyncAgo.setText(sessionManager.getLastTimeAgo());\r\n//                }\r\n            }\r\n        });\r\n        if (sessionManager.isFirstTimeLaunched()) {\r\n            mSyncProgressDialog = new ProgressDialog(HomeActivity.this, R.style.AlertDialogStyle); //thats how to add a style!\r\n            mSyncProgressDialog.setTitle(R.string.syncInProgress);\r\n            mSyncProgressDialog.setCancelable(false);\r\n            mSyncProgressDialog.setProgress(i);\r\n\r\n            mSyncProgressDialog.show();\r\n\r\n            syncUtils.initialSync(\"home\");\r\n        } else {\r\n            // if initial setup done then we can directly set the periodic background sync job\r\n            WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n        }\r\n\r\n\r\n        showProgressbar();\r\n    }\r\n\r\n    //function for handling the video library feature...\r\n    private void videoLibrary() {\r\n        if (!sessionManager.getLicenseKey().isEmpty())\r\n            hasLicense = true;\r\n        //Check for license key and load the correct config file\r\n        try {\r\n            JSONObject obj = null;\r\n            if (hasLicense) {\r\n                obj = new JSONObject(Objects.requireNonNullElse\r\n                        (FileUtils.readFileRoot(AppConstants.CONFIG_FILE_NAME, context),\r\n                                String.valueOf(FileUtils.encodeJSON(context, AppConstants.CONFIG_FILE_NAME)))); //Load the config file\r\n            } else {\r\n                obj = new JSONObject(String.valueOf(FileUtils.encodeJSON(this, AppConstants.CONFIG_FILE_NAME)));\r\n            }\r\n\r\n            if (obj.has(\"video_library\")) {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                Uri uri = Uri.parse(obj.getString(\"video_library\"));\r\n                intent.setData(uri);\r\n                startActivity(intent);\r\n            } else {\r\n                Toast.makeText(context, \"No config attribute found\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } catch (JSONException e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            Toast.makeText(getApplicationContext(), \"JsonException\" + e, Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    private void showProgressbar() {\r\n\r\n\r\n// instantiate it within the onCreate method\r\n        mProgressDialog = new ProgressDialog(HomeActivity.this);\r\n        mProgressDialog.setMessage(getString(R.string.download_protocols));\r\n        mProgressDialog.setIndeterminate(true);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n        mProgressDialog.setCancelable(false);\r\n    }\r\n\r\n\r\n    private String CalculateAgoTime() {\r\n        String finalTime = \"\";\r\n\r\n        String syncTime = sessionManager.getLastSyncDateTime();\r\n\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd MMM yyyy HH:mm\", Locale.getDefault());\r\n        ParsePosition pos = new ParsePosition(0);\r\n        long then = formatter.parse(syncTime, pos).getTime();\r\n        long now = new Date().getTime();\r\n\r\n        long seconds = (now - then) / 1000;\r\n        long minutes = seconds / 60;\r\n        long hours = minutes / 60;\r\n        long days = hours / 24;\r\n\r\n        String time = \"\";\r\n        long num = 0;\r\n        if (days > 0) {\r\n            num = days;\r\n            time = days + \" \" + context.getString(R.string.day);\r\n        } else if (hours > 0) {\r\n            num = hours;\r\n            time = hours + \" \" + context.getString(R.string.hour);\r\n        } else if (minutes >= 0) {\r\n            num = minutes;\r\n            time = minutes + \" \" + context.getString(R.string.minute);\r\n        }\r\n//      <For Seconds>\r\n//      else {\r\n//            num = seconds;\r\n//            time = seconds + \" second\";\r\n//      }\r\n        if (num > 1) {\r\n            time += context.getString(R.string.s);\r\n        }\r\n        finalTime = time + \" \" + context.getString(R.string.ago);\r\n\r\n        sessionManager.setLastTimeAgo(finalTime);\r\n\r\n        return finalTime;\r\n    }\r\n\r\n    private boolean isNetworkConnected() {\r\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        return cm.getActiveNetworkInfo() != null && cm.getActiveNetworkInfo().isConnected();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_home, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n//            case R.id.syncOption:\r\n//                refreshDatabases();\r\n//                return true;\r\n            case R.id.settingsOption:\r\n                settings();\r\n                return true;\r\n            case R.id.updateProtocolsOption: {\r\n\r\n\r\n                if (NetworkConnection.isOnline(this)) {\r\n\r\n                    if (!sessionManager.getLicenseKey().isEmpty()) {\r\n\r\n                        String licenseUrl = sessionManager.getMindMapServerUrl();\r\n                        String licenseKey = sessionManager.getLicenseKey();\r\n                        getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\", licenseKey);\r\n\r\n                    } else {\r\n//                    MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n//                    // AlertDialog.Builder dialog = new AlertDialog.Builder(this,R.style.AlertDialogStyle);\r\n//                    LayoutInflater li = LayoutInflater.from(this);\r\n//                    View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n//                    dialog.setTitle(getString(R.string.enter_license_key))\r\n//                            .setView(promptsView)\r\n//                            .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//\r\n//                                    Dialog d = (Dialog) dialog;\r\n//\r\n//                                    EditText etURL = d.findViewById(R.id.licenseurl);\r\n//                                    EditText etKey = d.findViewById(R.id.licensekey);\r\n//                                    String url = etURL.getText().toString().replace(\" \", \"\");\r\n//                                    String key = etKey.getText().toString().trim();\r\n//\r\n//                                    if (url.isEmpty()) {\r\n//                                        etURL.setError(getResources().getString(R.string.enter_server_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (url.contains(\":\")) {\r\n//                                        etURL.setError(getResources().getString(R.string.invalid_url));\r\n//                                        etURL.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//                                    if (key.isEmpty()) {\r\n//                                        etKey.setError(getResources().getString(R.string.enter_license_key));\r\n//                                        etKey.requestFocus();\r\n//                                        return;\r\n//                                    }\r\n//\r\n//                                    sessionManager.setMindMapServerUrl(url); //trim\r\n//                                    getMindmapDownloadURL(\"https://\" + url + \":3004/\", key);\r\n//\r\n//                                }\r\n//                            })\r\n//                            .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {\r\n//                                @Override\r\n//                                public void onClick(DialogInterface dialog, int which) {\r\n//                                    dialog.dismiss();\r\n//                                }\r\n//                            });\r\n//                    Dialog builderDialog = dialog.show();\r\n//                    IntelehealthApplication.setAlertDialogCustomTheme(this, builderDialog);\r\n//\r\n//                    // }\r\n\r\n                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n                        LayoutInflater li = LayoutInflater.from(this);\r\n                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n\r\n                        dialog.setTitle(getString(R.string.enter_license_key))\r\n                                .setView(promptsView)\r\n                                .setPositiveButton(getString(R.string.button_ok), null)\r\n                                .setNegativeButton(getString(R.string.button_cancel), null);\r\n\r\n                        AlertDialog alertDialog = dialog.create();\r\n                        alertDialog.setView(promptsView, 20, 0, 20, 0);\r\n                        alertDialog.show();\r\n                        alertDialog.setCanceledOnTouchOutside(false); //dialog wont close when clicked outside...\r\n\r\n                        // Get the alert dialog buttons reference\r\n                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\r\n                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);\r\n\r\n                        // Change the alert dialog buttons text and background color\r\n                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n\r\n                        positiveButton.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View v) {\r\n                                EditText text = promptsView.findViewById(R.id.licensekey);\r\n                                EditText url = promptsView.findViewById(R.id.licenseurl);\r\n\r\n                                url.setError(null);\r\n                                text.setError(null);\r\n\r\n                                //If both are not entered...\r\n                                if (url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                    url.requestFocus();\r\n                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                    return;\r\n                                }\r\n\r\n                                //If Url is empty...key is not empty...\r\n                                if (url.getText().toString().trim().isEmpty() && !text.getText().toString().trim().isEmpty()) {\r\n                                    url.requestFocus();\r\n                                    url.setError(getResources().getString(R.string.enter_server_url));\r\n                                    return;\r\n                                }\r\n\r\n                                //If Url is not empty...key is empty...\r\n                                if (!url.getText().toString().trim().isEmpty() && text.getText().toString().trim().isEmpty()) {\r\n                                    text.requestFocus();\r\n                                    text.setError(getResources().getString(R.string.enter_license_key));\r\n                                    return;\r\n                                }\r\n\r\n                                //If Url has : in it...\r\n                                if (url.getText().toString().trim().contains(\":\")) {\r\n                                    url.requestFocus();\r\n                                    url.setError(getResources().getString(R.string.invalid_url));\r\n                                    return;\r\n                                }\r\n\r\n                                //If url entered is Invalid...\r\n                                if (!url.getText().toString().trim().isEmpty()) {\r\n                                    if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {\r\n                                        String url_field = \"https://\" + url.getText().toString() + \":3004/\";\r\n                                        if (URLUtil.isValidUrl(url_field)) {\r\n                                            key = text.getText().toString().trim();\r\n                                            licenseUrl = url.getText().toString().trim();\r\n\r\n                                            sessionManager.setMindMapServerUrl(licenseUrl);\r\n\r\n                                            if (keyVerified(key)) {\r\n                                                getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\", key);\r\n                                                alertDialog.dismiss();\r\n                                            }\r\n                                        } else {\r\n                                            Toast.makeText(HomeActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n                                        }\r\n\r\n                                    } else {\r\n                                        //invalid url || invalid url and key.\r\n                                        Toast.makeText(HomeActivity.this, R.string.invalid_url, Toast.LENGTH_SHORT).show();\r\n                                    }\r\n                                } else {\r\n                                    Toast.makeText(HomeActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        negativeButton.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View v) {\r\n                                alertDialog.dismiss();\r\n                            }\r\n                        });\r\n\r\n\r\n                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                    }\r\n\r\n\r\n                } else {\r\n                    Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n         /*   case R.id.sync:\r\n//                pullDataDAO.pullData(this);\r\n//                pullDataDAO.pushDataApi();\r\n//                AppConstants.notificationUtils.showNotifications(getString(R.string.sync), getString(R.string.syncInProgress), 1, this);\r\n                boolean isSynced = syncUtils.syncForeground();\r\n//                boolean i = imagesPushDAO.patientProfileImagesPush();\r\n//                boolean o = imagesPushDAO.obsImagesPush();\r\n//                if (isSynced)\r\n//                    AppConstants.notificationUtils.showNotifications_noProgress(getString(R.string.sync_not_available), getString(R.string.please_connect_to_internet), getApplicationContext());\r\n//                else\r\n//                    AppConstants.notificationUtils.showNotifications(getString(R.string.image_upload), getString(R.string.image_upload_failed), 4, this);\r\n                return true;\r\n                */\r\n//            case R.id.backupOption:\r\n//                manageBackup(true, false);  // to backup app data at any time of the day\r\n//                return true;\r\n//\r\n//            case R.id.restoreOption:\r\n//                manageBackup(false, false); // to restore app data if db is empty\r\n//                return true;\r\n\r\n            case R.id.logoutOption:\r\n//                manageBackup(true, false);\r\n\r\n                MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n                alertdialogBuilder.setMessage(R.string.sure_to_logout);\r\n                alertdialogBuilder.setPositiveButton(R.string.generic_yes, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        logout();\r\n                    }\r\n                });\r\n                alertdialogBuilder.setNegativeButton(R.string.generic_no, null);\r\n                AlertDialog alertDialog = alertdialogBuilder.create();\r\n                alertDialog.show();\r\n                Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n                Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n                positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method starts intent to another activity to change settings\r\n     *\r\n     * @return void\r\n     */\r\n    public void settings() {\r\n        Intent intent = new Intent(this, SettingsActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Logs out the user. It removes user account using AccountManager.\r\n     *\r\n     * @return void\r\n     */\r\n    public void logout() {\r\n\r\n        OfflineLogin.getOfflineLogin().setOfflineLoginStatus(false);\r\n\r\n//        parseLogOut();\r\n\r\n       /* AccountManager manager = AccountManager.get(HomeActivity.this);\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }*/\r\n     /*   Account[] accountList = manager.getAccountsByType(\"io.intelehealth.openmrs\");\r\n        if (accountList.length > 0) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                manager.removeAccount(accountList[0], HomeActivity.this, null, null);\r\n            } else {\r\n                manager.removeAccount(accountList[0], null, null); // Legacy implementation\r\n            }\r\n        }\r\n*/\r\n        Intent intent = new Intent(HomeActivity.this, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n\r\n        SyncUtils syncUtils = new SyncUtils();\r\n        syncUtils.syncBackground();\r\n        sessionManager.setReturningUser(false);\r\n        sessionManager.setLogout(true);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        //IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        //registerReceiver(syncBroadcastReceiver, filter);\r\n        checkAppVer();  //auto-update feature.\r\n//        lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        if (!sessionManager.getLastSyncDateTime().equalsIgnoreCase(\"- - - -\")\r\n                && Locale.getDefault().toString().equals(\"en\")) {\r\n//            lastSyncAgo.setText(CalculateAgoTime());\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        IntentFilter filter = new IntentFilter(AppConstants.SYNC_INTENT_ACTION);\r\n        registerReceiver(syncBroadcastReceiver, filter);\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        try {\r\n            unregisterReceiver(syncBroadcastReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean keyVerified(String key) {\r\n        //TODO: Verify License Key\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        /*new AlertDialog.Builder(this)\r\n                .setMessage(\"Are you sure you want to EXIT ?\")\r\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        moveTaskToBack(true);\r\n                        finish();\r\n\r\n                    }\r\n\r\n                })\r\n                .setNegativeButton(\"No\", null)\r\n                .show();\r\n*/\r\n        MaterialAlertDialogBuilder alertdialogBuilder = new MaterialAlertDialogBuilder(this);\r\n\r\n        // AlertDialog.Builder alertdialogBuilder = new AlertDialog.Builder(this, R.style.AlertDialogStyle);\r\n        alertdialogBuilder.setMessage(getResources().getString(R.string.sure_to_exit));\r\n        alertdialogBuilder.setPositiveButton(getResources().getString(R.string.generic_yes), new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                moveTaskToBack(true);\r\n                // finish();\r\n            }\r\n        });\r\n        alertdialogBuilder.setNegativeButton(getResources().getString(R.string.generic_no), null);\r\n\r\n        AlertDialog alertDialog = alertdialogBuilder.create();\r\n        alertDialog.show();\r\n\r\n        Button positiveButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE);\r\n        Button negativeButton = alertDialog.getButton(android.app.AlertDialog.BUTTON_NEGATIVE);\r\n\r\n        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //positiveButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n        //negativeButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n    }\r\n\r\n    private List<Integer> mTempSyncHelperList = new ArrayList<Integer>();\r\n    private BroadcastReceiver syncBroadcastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Logger.logD(\"syncBroadcastReceiver\", \"onReceive! \" + intent);\r\n\r\n            if (intent != null && intent.hasExtra(AppConstants.SYNC_INTENT_DATA_KEY)) {\r\n                int flagType = intent.getIntExtra(AppConstants.SYNC_INTENT_DATA_KEY, AppConstants.SYNC_FAILED);\r\n                if (sessionManager.isFirstTimeLaunched()) {\r\n                    if (flagType == AppConstants.SYNC_FAILED) {\r\n                        hideSyncProgressBar(false);\r\n                        /*Toast.makeText(context, R.string.failed_synced, Toast.LENGTH_SHORT).show();\r\n                        finish();*/\r\n                        new AlertDialog.Builder(HomeActivity.this)\r\n                                .setMessage(R.string.failed_initial_synced)\r\n                                .setPositiveButton(R.string.generic_ok, new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        finish();\r\n                                    }\r\n\r\n                                }).setCancelable(false)\r\n\r\n                                .show();\r\n                    } else {\r\n                        mTempSyncHelperList.add(flagType);\r\n                        if (mTempSyncHelperList.contains(AppConstants.SYNC_PULL_DATA_DONE)\r\n//                                && mTempSyncHelperList.contains(AppConstants.SYNC_PUSH_DATA_DONE)\r\n                                /*&& mTempSyncHelperList.contains(AppConstants.SYNC_PATIENT_PROFILE_IMAGE_PUSH_DONE)\r\n                                && mTempSyncHelperList.contains(AppConstants.SYNC_OBS_IMAGE_PUSH_DONE)*/) {\r\n                            hideSyncProgressBar(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            lastSyncTextView.setText(getString(R.string.last_synced) + \" \\n\" + sessionManager.getLastSyncDateTime());\r\n        }\r\n    };\r\n\r\n    private void hideSyncProgressBar(boolean isSuccess) {\r\n        if (mTempSyncHelperList != null) mTempSyncHelperList.clear();\r\n        if (mSyncProgressDialog != null && mSyncProgressDialog.isShowing()) {\r\n            mSyncProgressDialog.dismiss();\r\n            if (isSuccess) {\r\n\r\n                sessionManager.setFirstTimeLaunched(false);\r\n                sessionManager.setMigration(true);\r\n                // initial setup/sync done and now we can set the periodic background sync job\r\n                // given some delay after initial sync\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        WorkManager.getInstance().enqueueUniquePeriodicWork(AppConstants.UNIQUE_WORK_NAME, ExistingPeriodicWorkPolicy.KEEP, AppConstants.PERIODIC_WORK_REQUEST);\r\n                    }\r\n                }, 10000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMindmapDownloadURL(String url, String key) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url); //trim\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        try {\r\n            Observable<DownloadMindMapRes> resultsObservable = apiService.DOWNLOAD_MIND_MAP_RES_OBSERVABLE(key);\r\n            resultsObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<DownloadMindMapRes>() {\r\n                        @Override\r\n                        public void onNext(DownloadMindMapRes res) {\r\n                            customProgressDialog.dismiss();\r\n                            if (res.getMessage() != null && res.getMessage().equalsIgnoreCase(\"Success\")) {\r\n\r\n                                Log.e(\"MindMapURL\", \"Successfully get MindMap URL\");\r\n                                mTask = new DownloadMindMaps(context, mProgressDialog);\r\n                                mindmapURL = res.getMindmap().trim();\r\n                                sessionManager.setLicenseKey(key);\r\n                                checkExistingMindMaps();\r\n\r\n                            } else {\r\n                                Toast.makeText(context, getResources().getString(R.string.no_protocols_found), Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n                            customProgressDialog.dismiss();\r\n                            Toast.makeText(context, getResources().getString(R.string.unable_to_get_proper_response), Toast.LENGTH_SHORT).show();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n\r\n                        }\r\n                    });\r\n        } catch (IllegalArgumentException e) {\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getMessage());\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getStackTrace());\r\n        }\r\n    }\r\n\r\n    private void checkExistingMindMaps() {\r\n\r\n        //Check is there any existing mindmaps are present, if yes then delete.\r\n\r\n        File engines = new File(context.getFilesDir().getAbsolutePath(), \"/Engines\");\r\n        Log.e(TAG, \"Engines folder=\" + engines.exists());\r\n        if (engines.exists()) {\r\n            engines.delete();\r\n        }\r\n        File logo = new File(context.getFilesDir().getAbsolutePath(), \"/logo\");\r\n        Log.e(TAG, \"Logo folder=\" + logo.exists());\r\n        if (logo.exists()) {\r\n            logo.delete();\r\n        }\r\n        File physicalExam = new File(context.getFilesDir().getAbsolutePath() + \"/physExam.json\");\r\n        Log.e(TAG, \"physExam.json=\" + physicalExam.exists());\r\n        if (physicalExam.exists()) {\r\n            physicalExam.delete();\r\n        }\r\n        File familyHistory = new File(context.getFilesDir().getAbsolutePath() + \"/famHist.json\");\r\n        Log.e(TAG, \"famHist.json=\" + familyHistory.exists());\r\n        if (familyHistory.exists()) {\r\n            familyHistory.delete();\r\n        }\r\n        File pastMedicalHistory = new File(context.getFilesDir().getAbsolutePath() + \"/patHist.json\");\r\n        Log.e(TAG, \"patHist.json=\" + pastMedicalHistory.exists());\r\n        if (pastMedicalHistory.exists()) {\r\n            pastMedicalHistory.delete();\r\n        }\r\n        File config = new File(context.getFilesDir().getAbsolutePath() + \"/config.json\");\r\n        Log.e(TAG, \"config.json=\" + config.exists());\r\n        if (config.exists()) {\r\n            config.delete();\r\n        }\r\n\r\n        //Start downloading mindmaps\r\n        mTask.execute(mindmapURL, context.getFilesDir().getAbsolutePath() + \"/mindmaps.zip\");\r\n        Log.e(\"DOWNLOAD\", \"isSTARTED\");\r\n\r\n    }\r\n\r\n    private void checkAppVer() {\r\n\r\n        try {\r\n            PackageInfo pInfo = context.getPackageManager().getPackageInfo(getPackageName(), 0);\r\n            String version = pInfo.versionName;\r\n            versionCode = pInfo.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        disposable.add((Disposable) AppConstants.apiInterface.checkAppUpdate()\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribeWith(new DisposableSingleObserver<CheckAppUpdateRes>() {\r\n                    @Override\r\n                    public void onSuccess(CheckAppUpdateRes res) {\r\n                        int latestVersionCode = 0;\r\n                        if (!res.getLatestVersionCode().isEmpty()) {\r\n                            latestVersionCode = Integer.parseInt(res.getLatestVersionCode());\r\n                        }\r\n\r\n                        if (latestVersionCode > versionCode) {\r\n                            android.app.AlertDialog.Builder builder;\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this, android.R.style.Theme_Material_Dialog_Alert);\r\n                            } else {\r\n                                builder = new android.app.AlertDialog.Builder(HomeActivity.this);\r\n                            }\r\n\r\n\r\n                            builder.setTitle(getResources().getString(R.string.new_update_available))\r\n                                    .setCancelable(false)\r\n                                    .setMessage(getResources().getString(R.string.update_app_note))\r\n                                    .setPositiveButton(getResources().getString(R.string.update), new DialogInterface.OnClickListener() {\r\n                                        public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                            final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object\r\n                                            try {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + appPackageName)));\r\n                                            } catch (ActivityNotFoundException anfe) {\r\n                                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));\r\n                                            }\r\n\r\n                                        }\r\n                                    })\r\n\r\n                                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                                    .setCancelable(false);\r\n\r\n                            Dialog dialog = builder.show();\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                                int textViewId = dialog.getContext().getResources().getIdentifier(\"android:id/alertTitle\", null, null);\r\n                                TextView tv = (TextView) dialog.findViewById(textViewId);\r\n                                tv.setTextColor(getResources().getColor(R.color.white));\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable e) {\r\n                        Log.e(\"Error\", \"\" + e);\r\n                    }\r\n                })\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(revision e1387808a9737cae667efcb539e8797e3742e3d3)
+++ app/src/main/java/org/intelehealth/ekalhelpline/activities/homeActivity/HomeActivity.java	(date 1626444592154)
@@ -844,7 +844,7 @@
 
         //Check is there any existing mindmaps are present, if yes then delete.
 
-        File engines = new File(context.getFilesDir().getAbsolutePath(), "/Engines");
+        File engines = new File(context.getFilesDir().getAbsolutePath(), "/engines");
         Log.e(TAG, "Engines folder=" + engines.exists());
         if (engines.exists()) {
             engines.delete();
Index: app/src/main/java/org/intelehealth/ekalhelpline/app/AppConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.intelehealth.ekalhelpline.app;\r\n\r\n\r\nimport android.os.Environment;\r\n\r\nimport androidx.work.Constraints;\r\nimport androidx.work.NetworkType;\r\nimport androidx.work.OneTimeWorkRequest;\r\nimport androidx.work.PeriodicWorkRequest;\r\n\r\n\r\nimport java.io.File;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.intelehealth.ekalhelpline.database.InteleHealthDatabaseHelper;\r\nimport org.intelehealth.ekalhelpline.syncModule.LastSyncWork;\r\nimport org.intelehealth.ekalhelpline.syncModule.VisitSummaryWork;\r\nimport org.intelehealth.ekalhelpline.utilities.DateAndTimeUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.NotificationUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.UuidGenerator;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.syncModule.SyncWorkManager;\r\n\r\npublic class AppConstants {\r\n    //Constants\r\n    public static final String DATABASE_NAME = \"localrecords.db\";\r\n    public static final int DATABASE_VERSION = 4;\r\n    public static final String JSON_FOLDER = \"Engines\";\r\n    public static final String JSON_FOLDER_Update = \"Engines_Update\";\r\n    public static final String IMAGE_APP_ID = \"app2\";\r\n    public static final String dbfilepath = Environment.getExternalStorageDirectory() + File.separator + \"InteleHealth_DB\" + File.separator + \"Intelehealth.db\"; // directory: Intelehealth_DB   ,  filename: Intelehealth.db\r\n    public static String CONFIG_FILE_NAME = \"config.json\";\r\n    public static final String IMAGE_PATH = IntelehealthApplication.getAppContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES) + File.separator;\r\n    public static final String MESSAGE_PROGRESS = \"message_progress\";\r\n\r\n\r\n    //App vitals constants\r\n    public static final String MAXIMUM_BP_SYS = \"250\";\r\n    public static final String MAXIMUM_HEIGHT = \"272\";\r\n    public static final String MAXIMUM_WEIGHT = \"150\";\r\n    public static int APP_VERSION_CODE = 26;\r\n    public static final String MINIMUM_BP_SYS = \"50\";\r\n    public static final String MAXIMUM_BP_DSYS = \"150\";\r\n    public static final String MINIMUM_BP_DSYS = \"30\";\r\n    public static final String MAXIMUM_PULSE = \"200\";\r\n    public static final String MINIMUM_PULSE = \"30\";\r\n    public static final String MAXIMUM_TEMPERATURE_CELSIUS = \"43\";\r\n    public static final String MINIMUM_TEMPERATURE_CELSIUS = \"25\";\r\n    public static final String MINIMUM_TEMPERATURE_FARHENIT = \"77\";\r\n    public static final String MAXIMUM_TEMPERATURE_FARHENIT = \"109\";\r\n    public static final String MAXIMUM_SPO2 = \"100\";\r\n    public static final String MINIMUM_SPO2 = \"1\";\r\n    public static final String MAXIMUM_RESPIRATORY = \"80\";\r\n    public static final String MINIMUM_RESPIRATORY = \"10\";\r\n\r\n    //functions constants\r\n    public static InteleHealthDatabaseHelper inteleHealthDatabaseHelper = new InteleHealthDatabaseHelper(IntelehealthApplication.getAppContext());\r\n    public static final String UNIQUE_WORK_NAME = \"intelehealth_workmanager\";\r\n    public static ApiInterface apiInterface = ApiClient.createService(ApiInterface.class);\r\n    public static DateAndTimeUtils dateAndTimeUtils = new DateAndTimeUtils();\r\n    public static String NEW_UUID = new UuidGenerator().UuidGenerator();\r\n    public static NotificationUtils notificationUtils = new NotificationUtils();\r\n\r\n\r\n    //  Image Conversion Ratio\r\n    public static int IMAGE_JPG_QUALITY = 70;\r\n\r\n\r\n    public static int REPEAT_INTERVAL = 15;\r\n    public static Constraints MY_CONSTRAINTS = new Constraints.Builder()\r\n            .setRequiresCharging(false)\r\n            .setRequiredNetworkType(NetworkType.CONNECTED)\r\n            .setRequiresBatteryNotLow(false)\r\n            .setRequiresStorageNotLow(false)\r\n            .build();\r\n\r\n    public static PeriodicWorkRequest PERIODIC_WORK_REQUEST =\r\n            new PeriodicWorkRequest.Builder(SyncWorkManager.class, REPEAT_INTERVAL, TimeUnit.MINUTES)\r\n                    .setConstraints(MY_CONSTRAINTS)\r\n                    .build();\r\n\r\n\r\n\r\n    // Added by Venu to make the Sync Issue Solutions as intele_safe.\r\n    public static OneTimeWorkRequest VISIT_SUMMARY_WORK_REQUEST =\r\n            new OneTimeWorkRequest.Builder(VisitSummaryWork.class)\r\n                    .setConstraints(MY_CONSTRAINTS)\r\n                    .build();\r\n\r\n    public static OneTimeWorkRequest LAST_SYNC_WORK_REQUEST =\r\n            new OneTimeWorkRequest.Builder(LastSyncWork.class)\r\n                    .setConstraints(MY_CONSTRAINTS)\r\n                    .build();\r\n    /*@Lincon*/\r\n    public static final String SYNC_INTENT_ACTION = \"app.intelehealth.client.LAST_SYNC\";\r\n    public static final String SYNC_INTENT_DATA_KEY = \"SYNC_JOB_TYPE\";\r\n    public static final int SYNC_FAILED = 0;\r\n    public static final int SYNC_PULL_DATA_DONE = 1;\r\n    public static final int SYNC_PUSH_DATA_DONE = 2;\r\n    public static final int SYNC_PATIENT_PROFILE_IMAGE_PUSH_DONE = 3;\r\n    public static final int SYNC_OBS_IMAGE_PUSH_DONE = 4;\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/org/intelehealth/ekalhelpline/app/AppConstants.java	(revision e1387808a9737cae667efcb539e8797e3742e3d3)
+++ app/src/main/java/org/intelehealth/ekalhelpline/app/AppConstants.java	(date 1626444593389)
@@ -26,7 +26,7 @@
     //Constants
     public static final String DATABASE_NAME = "localrecords.db";
     public static final int DATABASE_VERSION = 4;
-    public static final String JSON_FOLDER = "Engines";
+    public static final String JSON_FOLDER = "engines";
     public static final String JSON_FOLDER_Update = "Engines_Update";
     public static final String IMAGE_APP_ID = "app2";
     public static final String dbfilepath = Environment.getExternalStorageDirectory() + File.separator + "InteleHealth_DB" + File.separator + "Intelehealth.db"; // directory: Intelehealth_DB   ,  filename: Intelehealth.db
Index: app/src/main/java/org/intelehealth/ekalhelpline/activities/setupActivity/SetupActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.intelehealth.ekalhelpline.activities.setupActivity;\r\n\r\nimport android.accounts.Account;\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.ContentValues;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.graphics.Color;\r\nimport android.database.SQLException;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.StrictMode;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.coordinatorlayout.widget.CoordinatorLayout;\r\n\r\nimport android.text.Editable;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.AdapterView;\r\nimport android.widget.AutoCompleteTextView;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.RadioButton;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\nimport com.google.gson.Gson;\r\nimport com.parse.Parse;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.InputStreamReader;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.intelehealth.ekalhelpline.R;\r\nimport org.intelehealth.ekalhelpline.app.AppConstants;\r\nimport org.intelehealth.ekalhelpline.app.IntelehealthApplication;\r\nimport org.intelehealth.ekalhelpline.models.DownloadMindMapRes;\r\nimport org.intelehealth.ekalhelpline.models.Location;\r\nimport org.intelehealth.ekalhelpline.models.loginModel.LoginModel;\r\nimport org.intelehealth.ekalhelpline.models.loginProviderModel.LoginProviderModel;\r\nimport org.intelehealth.ekalhelpline.models.statewise_location.ChildLocation;\r\nimport org.intelehealth.ekalhelpline.models.statewise_location.District_Sanch_Village;\r\nimport org.intelehealth.ekalhelpline.models.statewise_location.Result;\r\nimport org.intelehealth.ekalhelpline.models.statewise_location.State;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiClient;\r\nimport org.intelehealth.ekalhelpline.networkApiCalls.ApiInterface;\r\nimport org.intelehealth.ekalhelpline.utilities.AdminPassword;\r\nimport org.intelehealth.ekalhelpline.utilities.Base64Utils;\r\nimport org.intelehealth.ekalhelpline.utilities.DialogUtils;\r\nimport org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;\r\nimport org.intelehealth.ekalhelpline.utilities.Logger;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkChangeListener;\r\nimport org.intelehealth.ekalhelpline.utilities.NetworkConnection;\r\nimport org.intelehealth.ekalhelpline.utilities.SessionManager;\r\nimport org.intelehealth.ekalhelpline.utilities.StringEncryption;\r\nimport org.intelehealth.ekalhelpline.utilities.UrlModifiers;\r\nimport org.intelehealth.ekalhelpline.widget.materialprogressbar.CustomProgressDialog;\r\n\r\nimport org.intelehealth.ekalhelpline.activities.homeActivity.HomeActivity;\r\nimport io.reactivex.Observable;\r\nimport io.reactivex.Observer;\r\nimport io.reactivex.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.annotations.NonNull;\r\nimport io.reactivex.disposables.Disposable;\r\nimport io.reactivex.observers.DisposableObserver;\r\nimport io.reactivex.schedulers.Schedulers;\r\n\r\n\r\npublic class SetupActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = SetupActivity.class.getSimpleName();\r\n    private boolean isLocationFetched;\r\n    String BASE_URL = \"\";\r\n    private static final int PERMISSION_ALL = 1;\r\n    private long createdRecordsCount = 0;\r\n    ProgressDialog mProgressDialog;\r\n\r\n    //    protected AccountManager manager;\r\n    UrlModifiers urlModifiers = new UrlModifiers();\r\n    Base64Utils base64Utils = new Base64Utils();\r\n    String encoded = null;\r\n    AlertDialog.Builder dialog;\r\n    String key = null;\r\n    String licenseUrl = null;\r\n    SessionManager sessionManager = null;\r\n    public File base_dir;\r\n    public String[] FILES;\r\n    //        private TestSetup mAuthTask = null;\r\n    private List<Location> mLocations = new ArrayList<>();\r\n    private AutoCompleteTextView mEmailView;\r\n    private EditText mPasswordView;\r\n    private EditText mAdminPasswordView;\r\n    private EditText mUrlField;\r\n    private Button mLoginButton;\r\n    // private Spinner mDropdownLocation;\r\n    private Spinner spinner_state, spinner_district,\r\n            spinner_sanch, spinner_village;\r\n    private TextView mAndroidIdTextView;\r\n    private RadioButton r1;\r\n    private RadioButton r2;\r\n    final Handler mHandler = new Handler();\r\n    boolean click_box = false;\r\n\r\n    Context context;\r\n    private String mindmapURL = \"\";\r\n    private DownloadMindMaps mTask;\r\n    CustomProgressDialog customProgressDialog;\r\n\r\n//    commenting out code for NetworkChange Reciever for this helpline: Dated 17 may : Nishita\r\n    //    private BroadcastReceiver MyReceiver = null;\r\n    CoordinatorLayout coordinatorLayout;\r\n\r\n    HashMap<String, String> hashMap1, hashMap2, hashMap3, hashMap4;\r\n    boolean value = false;\r\n    String base_url;\r\n    Map.Entry<String, String> village_name;\r\n    int state_count = 0, district_count = 0, sanch_count = 0, village_count = 0;\r\n    private String selectedState = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_setup);\r\n        getSupportActionBar();\r\n        sessionManager = new SessionManager(this);\r\n        // Persistent login information\r\n//        manager = AccountManager.get(SetupActivity.this);\r\n        coordinatorLayout = findViewById(R.id.coordinatorLayout);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        toolbar.setTitleTextAppearance(this, R.style.ToolbarTheme);\r\n        toolbar.setTitleTextColor(Color.WHITE);\r\n        context = SetupActivity.this;\r\n        customProgressDialog = new CustomProgressDialog(context);\r\n\r\n        // Set up the login form.\r\n        mEmailView = findViewById(R.id.email);\r\n        // populateAutoComplete(); TODO: create our own autocomplete code\r\n\r\n        mLoginButton = findViewById(R.id.setup_submit_button);\r\n        mLoginButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                attemptLogin();\r\n            }\r\n        });\r\n\r\n        r1 = findViewById(R.id.demoMindmap);\r\n        r2 = findViewById(R.id.downloadMindmap);\r\n\r\n        mPasswordView = findViewById(R.id.password);\r\n\r\n        mAdminPasswordView = findViewById(R.id.admin_password);\r\n\r\n        Button submitButton = findViewById(R.id.setup_submit_button);\r\n\r\n        mUrlField = findViewById(R.id.editText_URL);\r\n        //   mDropdownLocation = findViewById(R.id.spinner_location);\r\n        spinner_state = findViewById(R.id.spinner_state);\r\n        /*spinner_district = findViewById(R.id.spinner_district);\r\n        spinner_sanch = findViewById(R.id.spinner_sanch);\r\n        spinner_village = findViewById(R.id.spinner_village);*/\r\n\r\n        spinner_state.setEnabled(false);\r\n       /* spinner_district.setEnabled(false);\r\n        spinner_sanch.setEnabled(false);\r\n        spinner_village.setEnabled(false);*/\r\n\r\n//        isOnline();\r\n//\r\n//        MyReceiver = new NetworkChangeListener() {\r\n//            @Override\r\n//            protected void onNetworkChange(String status) {\r\n//                Snackbar.make(coordinatorLayout, status, Snackbar.LENGTH_SHORT)\r\n//                        .setTextColor(getResources().getColor(R.color.white)).show();\r\n//            }\r\n//        };\r\n\r\n        mAdminPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {\r\n                if (id == R.id.admin_password || id == EditorInfo.IME_NULL) {\r\n                    attemptLogin();\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        mAndroidIdTextView = findViewById(R.id.textView_Aid);\r\n        String deviceID = \"Device Id: \" + IntelehealthApplication.getAndroidId();\r\n        mAndroidIdTextView.setText(deviceID);\r\n\r\n        submitButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                attemptLogin();\r\n                //progressBar.setVisibility(View.VISIBLE);\r\n                //progressBar.setProgress(0);\r\n\r\n            }\r\n        });\r\n        DialogUtils dialogUtils = new DialogUtils();\r\n        dialogUtils.showOkDialog(this, getString(R.string.generic_warning), getString(R.string.setup_internet), getString(R.string.generic_ok));\r\n\r\n        mUrlField.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                isLocationFetched = false;\r\n                mEmailView.setError(null);\r\n                state_count = 0;\r\n                district_count = 0;\r\n                sanch_count = 0;\r\n                village_count = 0;\r\n                empty_spinner(\"url\");\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n\r\n                mHandler.removeCallbacksAndMessages(null);\r\n                mHandler.postDelayed(userStoppedTyping, 1500); // 1.5 second\r\n\r\n\r\n            }\r\n\r\n            Runnable userStoppedTyping = new Runnable() {\r\n\r\n                @Override\r\n                public void run() {\r\n                    // user didn't typed for 1.5 seconds, do whatever you want\r\n                    if (!mUrlField.getText().toString().trim().isEmpty() && mUrlField.getText().toString().length() >= 12) {\r\n                        if (Patterns.WEB_URL.matcher(mUrlField.getText().toString()).matches()) {\r\n                            String BASE_URL = \"https://\" + mUrlField.getText().toString() + \"/openmrs/ws/rest/v1/\";\r\n                            base_url = \"https://\" + mUrlField.getText().toString() + \"/openmrs/ws/rest/v1/\";\r\n                            if (URLUtil.isValidUrl(BASE_URL) && !isLocationFetched && !BASE_URL.contains(\"?\"))\r\n                                value = getLocationFromServer(BASE_URL); //state wise locations...\r\n                            else\r\n                                Toast.makeText(SetupActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n        });\r\n\r\n        spinner_state.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                //district wise locations...\r\n                String state_uuid = \"\";\r\n\r\n                selectedState = spinner_state.getSelectedItem().toString();\r\n\r\n                if (state_count == 0) {\r\n                    if (/*value &&*/ parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap1.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                state_uuid = entry.getKey();\r\n                                village_name = entry;\r\n                            }\r\n                        }\r\n                      //  value = getLocationFromServer_District(base_url, state_uuid, \"state\");\r\n                        state_count = parent.getSelectedItemPosition();\r\n                    }\r\n                } else if (state_count == parent.getSelectedItemPosition()) {\r\n                    if (/*value &&*/ parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap1.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                state_uuid = entry.getKey();\r\n                                village_name = entry;\r\n                            }\r\n                        }\r\n                      //  value = getLocationFromServer_District(base_url, state_uuid, \"state\");\r\n                    }\r\n                } else {\r\n                    // Toast.makeText(context, \"Enter Url\", Toast.LENGTH_SHORT).show();\r\n                    //  mUrlField.getText().clear();\r\n                    empty_spinner(\"state\");\r\n                    if (/*value &&*/ parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap1.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                state_uuid = entry.getKey();\r\n                                village_name = entry;\r\n                            }\r\n                        }\r\n                      //  value = getLocationFromServer_District(base_url, state_uuid, \"state\");\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });\r\n\r\n        //this will give Sanch...\r\n/*\r\n        spinner_district.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                //district wise locations...\r\n                String district_uuid = \"\";\r\n\r\n                if (district_count == 0) {\r\n                    if (value && parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap2.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                district_uuid = entry.getKey();\r\n                            }\r\n                        }\r\n                        value = getLocationFromServer_District(base_url, district_uuid, \"district\");\r\n                        district_count = parent.getSelectedItemPosition();\r\n                    }\r\n                } else if (district_count == parent.getSelectedItemPosition()) {\r\n                    if (value && parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap2.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                district_uuid = entry.getKey();\r\n                            }\r\n                        }\r\n                        value = getLocationFromServer_District(base_url, district_uuid, \"district\");\r\n                    }\r\n                } else {\r\n//                    Toast.makeText(context, \"Enter Url\", Toast.LENGTH_SHORT).show();\r\n//                    mUrlField.getText().clear();\r\n                    empty_spinner(\"district\");\r\n                    if (value && parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap2.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                district_uuid = entry.getKey();\r\n                            }\r\n                        }\r\n                        value = getLocationFromServer_District(base_url, district_uuid, \"district\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });\r\n*/\r\n\r\n        //this will give Villages...\r\n/*\r\n        spinner_sanch.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                //sanch wise locations...\r\n                String sanch_uuid = \"\";\r\n\r\n                if (sanch_count == 0) {\r\n                    if (value && parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap3.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                sanch_uuid = entry.getKey();\r\n                            }\r\n                        }\r\n                        value = getLocationFromServer_District(base_url, sanch_uuid, \"sanch\");\r\n                        sanch_count = parent.getSelectedItemPosition();\r\n                    }\r\n                } else if (sanch_count == parent.getSelectedItemPosition()) {\r\n                    if (value && parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap3.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                sanch_uuid = entry.getKey();\r\n                            }\r\n                        }\r\n                        value = getLocationFromServer_District(base_url, sanch_uuid, \"sanch\");\r\n                    }\r\n                } else {\r\n//                    Toast.makeText(context, \"Enter Url\", Toast.LENGTH_SHORT).show();\r\n//                    mUrlField.getText().clear();\r\n                    empty_spinner(\"sanch\");\r\n                    if (value && parent.getSelectedItemPosition() > 0) {\r\n                        for (Map.Entry<String, String> entry : hashMap3.entrySet()) {\r\n                            String list = entry.getValue();\r\n                            // Do things with the list\r\n                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n                                sanch_uuid = entry.getKey();\r\n                            }\r\n                        }\r\n                        value = getLocationFromServer_District(base_url, sanch_uuid, \"sanch\");\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });\r\n*/\r\n\r\n        //to fetch village and pass as locations to location-api\r\n//        spinner_village.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n//            @Override\r\n//            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n//                //village wise locations...\r\n//\r\n//                if (village_count == 0) {\r\n//                    if (value && parent.getSelectedItemPosition() > 0) {\r\n//                        for (Map.Entry<String, String> entry : hashMap4.entrySet()) {\r\n//                            String list = entry.getValue();\r\n//                            // Do things with the list\r\n//                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n//                                //send value to the login api...\r\n//                                village_name = entry;\r\n//                            }\r\n//                        }\r\n//                        // value = getLocationFromServer_District(base_url, village_name, \"sanch\");\r\n//                        village_count = parent.getSelectedItemPosition();\r\n//                    }\r\n//                } else if (village_count == parent.getSelectedItemPosition()) {\r\n//                    if (value && parent.getSelectedItemPosition() > 0) {\r\n//                        for (Map.Entry<String, String> entry : hashMap4.entrySet()) {\r\n//                            String list = entry.getValue();\r\n//                            // Do things with the list\r\n//                            if (list.equalsIgnoreCase(parent.getItemAtPosition(position).toString())) {\r\n//                                //send value to the login api...\r\n//                                village_name = entry;\r\n//                            }\r\n//                        }\r\n//                        // value = getLocationFromServer_District(base_url, village_name, \"sanch\");\r\n//                    }\r\n//                } else {\r\n////                    Toast.makeText(context, \"Enter Url\", Toast.LENGTH_SHORT).show();\r\n////                    mUrlField.getText().clear();\r\n//                    empty_spinner(\"village\");\r\n//                }\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onNothingSelected(AdapterView<?> parent) {\r\n//\r\n//            }\r\n//        });\r\n\r\n\r\n        showProgressbar();\r\n    }\r\n\r\n    private void empty_spinner(String value) {\r\n\r\n        if (value.equalsIgnoreCase(\"state\")) {\r\n           /* List<String> list_district = new ArrayList<>();\r\n            list_district.add(\"Select District\");\r\n//            spinner_district.setEnabled(false);\r\n//            spinner_district.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_district = new LocationArrayAdapter(SetupActivity.this, list_district);\r\n            spinner_district.setAdapter(adapter_district);\r\n\r\n            List<String> list_sanch = new ArrayList<>();\r\n            list_sanch.add(\"Select Sanch\");\r\n//            spinner_sanch.setEnabled(false);\r\n//            spinner_sanch.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_sanch = new LocationArrayAdapter(SetupActivity.this, list_sanch);\r\n            spinner_sanch.setAdapter(adapter_sanch);\r\n\r\n            List<String> list_village = new ArrayList<>();\r\n            list_village.add(\"Select Village\");\r\n//            spinner_village.setEnabled(false);\r\n//            spinner_village.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_village = new LocationArrayAdapter(SetupActivity.this, list_village);\r\n            spinner_village.setAdapter(adapter_village);*/\r\n        }\r\n        /* else if (value.equalsIgnoreCase(\"district\")) {\r\n            List<String> list_sanch = new ArrayList<>();\r\n            list_sanch.add(\"Select Sanch\");\r\n//            spinner_sanch.setEnabled(false);\r\n//            spinner_sanch.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_sanch = new LocationArrayAdapter(SetupActivity.this, list_sanch);\r\n            spinner_sanch.setAdapter(adapter_sanch);\r\n\r\n            List<String> list_village = new ArrayList<>();\r\n            list_village.add(\"Select Village\");\r\n//            spinner_village.setEnabled(false);\r\n//            spinner_village.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_village = new LocationArrayAdapter(SetupActivity.this, list_village);\r\n            spinner_village.setAdapter(adapter_village);\r\n        } else if (value.equalsIgnoreCase(\"sanch\")) {\r\n            List<String> list_village = new ArrayList<>();\r\n            list_village.add(\"Select Village\");\r\n//            spinner_village.setEnabled(false);\r\n//            spinner_village.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_village = new LocationArrayAdapter(SetupActivity.this, list_village);\r\n            spinner_village.setAdapter(adapter_village);\r\n        } else if (value.equalsIgnoreCase(\"village\")) {\r\n            //do nothing\r\n        }*/ else {\r\n\r\n            List<String> list_state = new ArrayList<>();\r\n            list_state.add(\"Select Location\");\r\n            spinner_state.setEnabled(false);\r\n            spinner_state.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_state = new LocationArrayAdapter(SetupActivity.this, list_state);\r\n            spinner_state.setAdapter(adapter_state);\r\n\r\n           /* List<String> list_district = new ArrayList<>();\r\n            list_district.add(\"Select District\");\r\n            spinner_district.setEnabled(false);\r\n            spinner_district.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_district = new LocationArrayAdapter(SetupActivity.this,\r\n                    list_district);\r\n            spinner_district.setAdapter(adapter_district);\r\n\r\n            List<String> list_sanch = new ArrayList<>();\r\n            list_sanch.add(\"Select Sanch\");\r\n            spinner_sanch.setEnabled(false);\r\n            spinner_sanch.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_sanch = new LocationArrayAdapter(SetupActivity.this, list_sanch);\r\n            spinner_sanch.setAdapter(adapter_sanch);\r\n\r\n            List<String> list_village = new ArrayList<>();\r\n            list_village.add(\"Select Village\");\r\n            spinner_village.setEnabled(false);\r\n            spinner_village.setAlpha(0.4F);\r\n            LocationArrayAdapter adapter_village = new LocationArrayAdapter(SetupActivity.this, list_village);\r\n            spinner_village.setAdapter(adapter_village);*/\r\n            //    }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check username and password validations.\r\n     * Get user selected location.\r\n     */\r\n    private void attemptLogin() {\r\n\r\n        // Reset errors.\r\n        mUrlField.setError(null);\r\n        mEmailView.setError(null);\r\n        mPasswordView.setError(null);\r\n        mAdminPasswordView.setError(null);\r\n\r\n        // Store values at the time of the login attempt.\r\n        String url = mUrlField.getText().toString();\r\n        String email = mEmailView.getText().toString();\r\n        String password = mPasswordView.getText().toString();\r\n        String admin_password = mAdminPasswordView.getText().toString();\r\n\r\n\r\n        boolean cancel = false;\r\n        View focusView = null;\r\n\r\n        if (TextUtils.isEmpty(url)) {\r\n            focusView = mUrlField;\r\n            cancel = true;\r\n        }\r\n\r\n        // Check for a valid password, if the user entered one.\r\n        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {\r\n            mPasswordView.setError(getString(R.string.error_invalid_password));\r\n            focusView = mPasswordView;\r\n            cancel = true;\r\n        }\r\n\r\n        if (!TextUtils.isEmpty(admin_password) && !isPasswordValid(admin_password)) {\r\n            mAdminPasswordView.setError(getString(R.string.error_invalid_password));\r\n            focusView = mAdminPasswordView;\r\n            cancel = true;\r\n        }\r\n\r\n        // Check for a valid email address.\r\n        if (TextUtils.isEmpty(email)) {\r\n            mEmailView.setError(getString(R.string.error_field_required));\r\n            focusView = mEmailView;\r\n            cancel = true;\r\n        } else if (!isEmailValid(email)) {\r\n            mEmailView.setError(getString(R.string.error_invalid_email));\r\n            focusView = mEmailView;\r\n        }\r\n\r\n        //spinner...\r\n        if (spinner_state.getSelectedItemPosition() <= 0) {\r\n            cancel = true;\r\n            focusView = spinner_state;\r\n            TextView t = (TextView) spinner_state.getSelectedView();\r\n            t.setError(\"Select State\");\r\n            t.setTextColor(Color.RED);\r\n            Toast.makeText(SetupActivity.this, \"Select Location from dropdown\", Toast.LENGTH_LONG).show();\r\n        } /*else if (spinner_district.getSelectedItemPosition() <= 0) {\r\n            cancel = true;\r\n            focusView = spinner_district;\r\n            TextView t = (TextView) spinner_district.getSelectedView();\r\n            t.setError(\"Select District\");\r\n            focusView.setEnabled(true);\r\n            t.setTextColor(Color.RED);\r\n            Toast.makeText(SetupActivity.this, \"Select District from dropdown\", Toast.LENGTH_LONG).show();\r\n        } else if (spinner_sanch.getSelectedItemPosition() <= 0) {\r\n            cancel = true;\r\n            focusView = spinner_sanch;\r\n            TextView t = (TextView) spinner_sanch.getSelectedView();\r\n            t.setError(\"Select Sanch\");\r\n            t.setTextColor(Color.RED);\r\n            Toast.makeText(SetupActivity.this, \"Select Sanch from dropdown\", Toast.LENGTH_LONG).show();\r\n        } else if (spinner_village.getSelectedItemPosition() <= 0) {\r\n            cancel = true;\r\n            focusView = spinner_village;\r\n            TextView t = (TextView) spinner_village.getSelectedView();\r\n            t.setError(\"Select Village\");\r\n            t.setTextColor(Color.RED);\r\n            Toast.makeText(SetupActivity.this, \"Select Village from dropdown\", Toast.LENGTH_LONG).show();\r\n        }*/\r\n\r\n        if (cancel) {\r\n            // There was an error; don't attempt login and focus the first\r\n            // form field with an error.\r\n            if (focusView != null) {\r\n                if (TextUtils.isEmpty(url)) {\r\n                    mUrlField.requestFocus();\r\n                    mUrlField.setError(\"Enter Url\");\r\n                }\r\n                focusView.requestFocus();\r\n            }\r\n        } else {\r\n\r\n           /* if (village_name != null) {\r\n                String urlString = mUrlField.getText().toString();\r\n                mLoginButton.setText(getString(R.string.please_wait_progress)); //setText should be \"Login\" ...\r\n                mLoginButton.setEnabled(false);\r\n                TestSetup(urlString, email, password, admin_password, village_name);\r\n                Log.d(TAG, \"attempting setup\");\r\n            }*/\r\n\r\n            //state based login...\r\n            if(!selectedState.isEmpty() || selectedState != null || !selectedState.equalsIgnoreCase(\"\")) {\r\n                String urlString = mUrlField.getText().toString();\r\n              //  TestSetup(urlString, email, password, admin_password, village_name);\r\n                TestSetup(urlString, email, password, admin_password, village_name);\r\n                Log.d(TAG, \"attempting setup\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showProgressbar() {\r\n        // instantiate it within the onCreate method\r\n        mProgressDialog = new ProgressDialog(SetupActivity.this);\r\n        mProgressDialog.setMessage(getString(R.string.download_protocols));\r\n        mProgressDialog.setIndeterminate(true);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n        mProgressDialog.setCancelable(false);\r\n    }\r\n\r\n//    public boolean isOnline () {\r\n//        ConnectivityManager conMgr = (ConnectivityManager) getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n//        NetworkInfo netInfo = conMgr.getActiveNetworkInfo();\r\n//        if(netInfo == null || !netInfo.isConnected() || !netInfo.isAvailable()){\r\n//            DialogUtils dialogUtils = new DialogUtils();\r\n//            dialogUtils.showOkDialog(this, getString(R.string.generic_info), getString(R.string.setup_internet_not_available), getString(R.string.generic_ok));\r\n//            return false;\r\n//        }\r\n//        else\r\n//        {\r\n//            DialogUtils dialogUtils = new DialogUtils();\r\n//            dialogUtils.showOkDialog(this, getString(R.string.generic_warning), getString(R.string.setup_internet_available), getString(R.string.generic_ok));\r\n//            return true;\r\n//        }\r\n////        return true;\r\n//    }\r\n//\r\n//    @Override\r\n//    protected void onResume() {\r\n//        super.onResume();\r\n//        broadcastIntent();\r\n//    }\r\n//\r\n//    @Override\r\n//    protected void onPause() {\r\n//        super.onPause();\r\n//        unregisterReceiver(MyReceiver);\r\n//    }\r\n//\r\n//    public void broadcastIntent() {\r\n//        registerReceiver(MyReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n//    }\r\n\r\n    private boolean isEmailValid(String email) {\r\n        //TODO: Replace this with your own logic\r\n        return true;\r\n    }\r\n\r\n    private boolean isPasswordValid(String password) {\r\n        //TODO: Replace this with your own logic\r\n        return password.length() > 4;\r\n    }\r\n\r\n    private boolean getLocationFromServer_District(String url, String state_uuid, String location_wise) {\r\n        customProgressDialog.show();\r\n        value = false;\r\n        String encoded = \"\";\r\n        ApiClient.changeApiBaseUrl(url);\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        encoded = base64Utils.encoded(\"sysnurse\", \"IHNurse#1\");\r\n\r\n        try {\r\n            Observable<District_Sanch_Village> district_sanch_villageObservable =\r\n                    apiService.DISTRICT_SANCH_VILLAGE_OBSERVABLE(state_uuid, \"Basic \" + encoded);\r\n            district_sanch_villageObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<District_Sanch_Village>() {\r\n                        @Override\r\n                        public void onNext(@NonNull District_Sanch_Village district_sanch_village) {\r\n                            if (!district_sanch_village.getChildLocations().isEmpty()) {\r\n\r\n\r\n                                if (location_wise.equalsIgnoreCase(\"state\")) {\r\n                                    customProgressDialog.dismiss();\r\n                                    List<String> district_locations = getLocation_district(district_sanch_village.getChildLocations(), \"state\");\r\n                                    LocationArrayAdapter locationArrayAdapter =\r\n                                            new LocationArrayAdapter(SetupActivity.this, district_locations);\r\n\r\n                                    spinner_district.setEnabled(true);\r\n                                    spinner_district.setAlpha(1);\r\n                                    spinner_district.setAdapter(locationArrayAdapter);\r\n                                    isLocationFetched = true;\r\n\r\n                                    if (hashMap2 != null) {\r\n                                        hashMap2.clear();\r\n                                    } //to clear the previous data...\r\n                                    else {\r\n                                        hashMap2 = new HashMap<>();\r\n                                    }\r\n\r\n                                    for (int i = 0; i < district_sanch_village.getChildLocations().size(); i++) {\r\n                                        hashMap2.put(district_sanch_village.getChildLocations().get(i).getUuid(),\r\n                                                district_sanch_village.getChildLocations().get(i).getDisplay());\r\n                                    }\r\n\r\n                                } else if (location_wise.equalsIgnoreCase(\"district\")) {\r\n                                    customProgressDialog.dismiss();\r\n                                    List<String> district_locations = getLocation_district(district_sanch_village.getChildLocations(), \"district\");\r\n                                    LocationArrayAdapter locationArrayAdapter =\r\n                                            new LocationArrayAdapter(SetupActivity.this, district_locations);\r\n\r\n                                    spinner_sanch.setEnabled(true);\r\n                                    spinner_sanch.setAlpha(1);\r\n                                    spinner_sanch.setAdapter(locationArrayAdapter);\r\n                                    isLocationFetched = true;\r\n\r\n                                    if (hashMap3 != null) {\r\n                                        hashMap3.clear();\r\n                                    } //to clear the previous data...\r\n                                    else {\r\n                                        hashMap3 = new HashMap<>();\r\n                                    }\r\n\r\n                                    for (int i = 0; i < district_sanch_village.getChildLocations().size(); i++) {\r\n                                        hashMap3.put(district_sanch_village.getChildLocations().get(i).getUuid(),\r\n                                                district_sanch_village.getChildLocations().get(i).getDisplay());\r\n                                    }\r\n                                } else if (location_wise.equalsIgnoreCase(\"sanch\")) {\r\n                                    customProgressDialog.dismiss();\r\n                                    List<String> district_locations = getLocation_district(district_sanch_village.getChildLocations(), \"sanch\");\r\n                                    LocationArrayAdapter locationArrayAdapter =\r\n                                            new LocationArrayAdapter(SetupActivity.this, district_locations);\r\n\r\n                                    spinner_village.setEnabled(true);\r\n                                    spinner_village.setAlpha(1);\r\n                                    spinner_village.setAdapter(locationArrayAdapter);\r\n                                    isLocationFetched = true;\r\n\r\n                                    if (hashMap4 != null) {\r\n                                        hashMap4.clear();\r\n                                    } //to clear the previous data...\r\n                                    else {\r\n                                        hashMap4 = new HashMap<>();\r\n                                    }\r\n\r\n                                    for (int i = 0; i < district_sanch_village.getChildLocations().size(); i++) {\r\n                                        hashMap4.put(district_sanch_village.getChildLocations().get(i).getUuid(),\r\n                                                district_sanch_village.getChildLocations().get(i).getDisplay());\r\n                                    }\r\n                                }\r\n\r\n                                value = true;\r\n                            } else {\r\n                                customProgressDialog.dismiss();\r\n                                value = false;\r\n                                isLocationFetched = false;\r\n\r\n                                switch (location_wise) {\r\n                                    case \"state\":\r\n                                        Toast.makeText(SetupActivity.this, \"No District found\", Toast.LENGTH_SHORT).show();\r\n                                        state_count = 0;\r\n                                        spinner_district.setEnabled(false);\r\n                                        spinner_district.setAlpha(0.4F);\r\n                                        spinner_sanch.setEnabled(false);\r\n                                        spinner_sanch.setAlpha(0.4F);\r\n                                        spinner_village.setEnabled(false);\r\n                                        spinner_village.setAlpha(0.4F);\r\n                                        break;\r\n                                    case \"district\":\r\n                                        Toast.makeText(SetupActivity.this, \"No Sanch found\", Toast.LENGTH_SHORT).show();\r\n                                        district_count = 0;\r\n                                        spinner_sanch.setEnabled(false);\r\n                                        spinner_sanch.setAlpha(0.4F);\r\n                                        spinner_village.setEnabled(false);\r\n                                        spinner_village.setAlpha(0.4F);\r\n                                        break;\r\n                                    case \"sanch\":\r\n                                        Toast.makeText(SetupActivity.this, \"No Village found\", Toast.LENGTH_SHORT).show();\r\n                                        sanch_count = 0;\r\n                                        spinner_village.setEnabled(false);\r\n                                        spinner_village.setAlpha(0.4F);\r\n                                        break;\r\n                                }\r\n                                //Toast.makeText(SetupActivity.this, \"Unable to fetch State\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(@NonNull Throwable e) {\r\n                            value = false;\r\n                            Toast.makeText(SetupActivity.this, e.getLocalizedMessage(), Toast.LENGTH_SHORT).show();\r\n                            customProgressDialog.dismiss();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n                            value = true;\r\n                            customProgressDialog.dismiss();\r\n                        }\r\n                    });\r\n        } catch (Exception e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            mUrlField.setError(getString(R.string.url_invalid));\r\n            customProgressDialog.dismiss();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Parse locations fetched through api and provide the appropriate dropdown.\r\n     *\r\n     * @param url string of url.\r\n     */\r\n    private boolean getLocationFromServer(String url) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url);\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n\r\n        try {\r\n            Observable<State> stateObservable = apiService.STATE_OBSERVABLE();\r\n            stateObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<State>() {\r\n                        @Override\r\n                        public void onNext(@NonNull State state) {\r\n                            if (state.getResults() != null) {\r\n                                customProgressDialog.dismiss();\r\n                                List<String> state_locations = getLocation(state.getResults());\r\n                                LocationArrayAdapter locationArrayAdapter =\r\n                                        new LocationArrayAdapter(SetupActivity.this, state_locations);\r\n\r\n                                spinner_state.setEnabled(true);\r\n                                spinner_state.setAlpha(1);\r\n                                spinner_state.setAdapter(locationArrayAdapter);\r\n                                isLocationFetched = true;\r\n\r\n                                hashMap1 = new HashMap<>();\r\n                                for (int i = 0; i < state.getResults().size(); i++) {\r\n                                    hashMap1.put(state.getResults().get(i).getUuid(),\r\n                                            state.getResults().get(i).getDisplay());\r\n                                }\r\n\r\n                                value = true;\r\n                            } else {\r\n                                customProgressDialog.dismiss();\r\n                                value = false;\r\n                                isLocationFetched = false;\r\n                                Toast.makeText(SetupActivity.this, \"Unable to fetch State\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(@NonNull Throwable e) {\r\n                            value = false;\r\n                            Toast.makeText(SetupActivity.this, e.getLocalizedMessage(), Toast.LENGTH_SHORT).show();\r\n                            customProgressDialog.dismiss();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n                            value = true;\r\n                            customProgressDialog.dismiss();\r\n                        }\r\n                    });\r\n        } catch (Exception e) {\r\n            FirebaseCrashlytics.getInstance().recordException(e);\r\n            mUrlField.setError(getString(R.string.url_invalid));\r\n            customProgressDialog.dismiss();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns list of locations.\r\n     *\r\n     * @param locationList a list of type {@link Location}.\r\n     * @return list of type string.\r\n     * @see Location\r\n     */\r\n    private List<String> getLocationStringList(List<Location> locationList) {\r\n        List<String> list = new ArrayList<String>();\r\n        list.add(getString(R.string.login_location_select));\r\n        for (int i = 0; i < locationList.size(); i++) {\r\n            list.add(locationList.get(i).getDisplay());\r\n        }\r\n        return list;\r\n    }\r\n\r\n    private List<String> getLocation(List<Result> resultList) {\r\n        List<String> list = new ArrayList<>();\r\n        list.add(\"Select Location\");\r\n        for (int i = 0; i < resultList.size(); i++) {\r\n            list.add(resultList.get(i).getDisplay());\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    private List<String> getLocation_district(List<ChildLocation> childLocationList, String location_wise) {\r\n        List<String> list = new ArrayList<>();\r\n\r\n        if (location_wise.equalsIgnoreCase(\"state\")) {\r\n            list.add(\"Select District\");\r\n        } else if (location_wise.equalsIgnoreCase(\"district\")) {\r\n            list.add(\"Select Sanch\");\r\n        } else if (location_wise.equalsIgnoreCase(\"sanch\")) {\r\n            list.add(\"Select Village\");\r\n        }\r\n\r\n        for (int i = 0; i < childLocationList.size(); i++) {\r\n            list.add(childLocationList.get(i).getDisplay());\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    public void onRadioClick(View v) {\r\n\r\n        boolean checked = ((RadioButton) v).isChecked();\r\n        switch (v.getId()) {\r\n            case R.id.demoMindmap:\r\n                if (checked) {\r\n                    r2.setChecked(false);\r\n                }\r\n                break;\r\n\r\n            case R.id.downloadMindmap:\r\n                if (NetworkConnection.isOnline(this)) {\r\n                    if (checked) {\r\n                        r1.setChecked(false);\r\n                        MaterialAlertDialogBuilder dialog = new MaterialAlertDialogBuilder(this);\r\n                        // AlertDialog.Builder dialog = new AlertDialog.Builder(this, R.style.AlertDialogStyle);\r\n                        LayoutInflater li = LayoutInflater.from(this);\r\n                        View promptsView = li.inflate(R.layout.dialog_mindmap_cred, null);\r\n\r\n\r\n                        dialog.setTitle(getString(R.string.enter_license_key))\r\n                                .setView(promptsView)\r\n\r\n                                .setPositiveButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        Dialog d = (Dialog) dialog;\r\n\r\n                                        EditText text = d.findViewById(R.id.licensekey);\r\n                                        EditText url = d.findViewById(R.id.licenseurl);\r\n                                        if (text.getText().toString().isEmpty() && text.getText() == null || url.getText().toString().isEmpty() && url.getText() == null) {\r\n                                            text.setFocusable(true);\r\n                                            text.setError(getResources().getString(R.string.enter_license_key));\r\n                                        }\r\n\r\n                                        if (sessionManager.getLicenseKey() != null && sessionManager.getLicenseKey().equalsIgnoreCase(\"https://mindmaps.intelehealth.io:4040\")) {\r\n                                            text.setText(sessionManager.getLicenseKey());\r\n                                            url.setText(sessionManager.getMindMapServerUrl());\r\n                                        }\r\n\r\n\r\n                                        if (!url.getText().toString().trim().isEmpty()) {\r\n                                            if (Patterns.WEB_URL.matcher(url.getText().toString().trim()).matches()) {\r\n                                                String url_field = \"https://\" + url.getText().toString() + \":3004/\";\r\n                                                if (URLUtil.isValidUrl(url_field)) {\r\n                                                    key = text.getText().toString().trim();\r\n                                                    licenseUrl = url.getText().toString().trim();\r\n\r\n                                                    if (licenseUrl.isEmpty()) {\r\n                                                        url.setError(getResources().getString(R.string.enter_server_url));\r\n                                                        url.requestFocus();\r\n                                                        return;\r\n                                                    }\r\n                                                    if (licenseUrl.contains(\":\")) {\r\n                                                        url.setError(getResources().getString(R.string.invalid_url));\r\n                                                        url.requestFocus();\r\n                                                        return;\r\n                                                    }\r\n                                                    if (key.isEmpty()) {\r\n                                                        text.setError(getResources().getString(R.string.enter_license_key));\r\n                                                        text.requestFocus();\r\n                                                        return;\r\n                                                    }\r\n\r\n                                                    sessionManager.setMindMapServerUrl(licenseUrl);\r\n                                                    //Toast.makeText(SetupActivity.this, \"\" + key, Toast.LENGTH_SHORT).show();\r\n                                                    if (keyVerified(key)) {\r\n                                                        // create a shared pref to store the key\r\n\r\n                                                        // SharedPreferences sharedPreferences = getApplicationContext().getSharedPreferences(\"pref\",MODE_PRIVATE);\r\n\r\n                                                        //DOWNLOAD MIND MAP FILE LIST\r\n                                                        //upnew getJSONFile().execute(null, \"AllFiles\", \"TRUE\");\r\n\r\n                                                        // UpdateProtocolsTask updateProtocolsTask = new UpdateProtocolsTask(SetupActivity.this);\r\n                                                        // updateProtocolsTask.execute(null, \"AllFiles\", \"TRUE\");\r\n//                                        DownloadProtocolsTask downloadProtocolsTask = new DownloadProtocolsTask(SetupActivity.this);\r\n//                                        downloadProtocolsTask.execute(key);\r\n                                                        getMindmapDownloadURL(\"https://\" + licenseUrl + \":3004/\");\r\n\r\n                                                    }\r\n                                                } else {\r\n                                                    Toast.makeText(SetupActivity.this, getString(R.string.url_invalid), Toast.LENGTH_SHORT).show();\r\n\r\n                                                }\r\n                                            } else {\r\n                                                //invalid url || invalid url and key.\r\n                                                Toast.makeText(SetupActivity.this, R.string.enter_valid_license_url, Toast.LENGTH_SHORT).show();\r\n                                            }\r\n                                        } else {\r\n                                            Toast.makeText(SetupActivity.this, R.string.please_enter_url_and_key, Toast.LENGTH_SHORT).show();\r\n                                        }\r\n\r\n                                    }\r\n                                })\r\n\r\n                                .setNegativeButton(getString(R.string.button_cancel), new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialog, int which) {\r\n                                        dialog.dismiss();\r\n                                        r2.setChecked(false);\r\n                                        r1.setChecked(true);\r\n\r\n                                    }\r\n                                });\r\n                        AlertDialog alertDialog = dialog.create();\r\n                        alertDialog.setView(promptsView, 20, 0, 20, 0);\r\n                        alertDialog.show();\r\n                        // Get the alert dialog buttons reference\r\n                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\r\n                        Button negativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);\r\n\r\n                        // Change the alert dialog buttons text and background color\r\n                        positiveButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                        // positiveButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n                        negativeButton.setTextColor(getResources().getColor(R.color.colorPrimary));\r\n                        //negativeButton.setTypeface(Typeface.DEFAULT, Typeface.BOLD);\r\n\r\n                        IntelehealthApplication.setAlertDialogCustomTheme(this, alertDialog);\r\n\r\n\r\n                    }\r\n                } else {\r\n                    ((RadioButton) v).setChecked(false);\r\n                    Toast.makeText(context, getString(R.string.mindmap_internect_connection), Toast.LENGTH_SHORT).show();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private boolean keyVerified(String key) {\r\n        //TODO: Verify License Key\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Attempts login to the OpenMRS server.\r\n     * If successful cretes a new {@link Account}\r\n     * If unsuccessful details are saved in SharedPreferences.\r\n     */\r\n    public void TestSetup(String CLEAN_URL, String USERNAME, String PASSWORD, String ADMIN_PASSWORD, Map.Entry<String, String> location) {\r\n\r\n        ProgressDialog progress;\r\n        progress = new ProgressDialog(SetupActivity.this, R.style.AlertDialogStyle);\r\n        ;//SetupActivity.this);\r\n        progress.setTitle(getString(R.string.please_wait_progress));\r\n        progress.setMessage(getString(R.string.logging_in));\r\n        progress.show();\r\n\r\n        String urlString = urlModifiers.loginUrl(CLEAN_URL);\r\n        Logger.logD(TAG, \"usernaem and password\" + USERNAME + PASSWORD);\r\n        encoded = base64Utils.encoded(USERNAME, PASSWORD);\r\n        sessionManager.setEncoded(encoded);\r\n\r\n\r\n        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\r\n        StrictMode.setThreadPolicy(policy);\r\n        Observable<LoginModel> loginModelObservable = AppConstants.apiInterface.LOGIN_MODEL_OBSERVABLE(urlString, \"Basic \" + encoded);\r\n        loginModelObservable.subscribe(new Observer<LoginModel>() {\r\n            @Override\r\n            public void onSubscribe(Disposable d) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNext(LoginModel loginModel) {\r\n                Boolean authencated = loginModel.getAuthenticated();\r\n                Gson gson = new Gson();\r\n                sessionManager.setChwname(loginModel.getUser().getDisplay());\r\n                sessionManager.setCreatorID(loginModel.getUser().getUuid());\r\n                sessionManager.setSessionID(loginModel.getSessionId());\r\n                sessionManager.setProviderID(loginModel.getUser().getPerson().getUuid());\r\n                UrlModifiers urlModifiers = new UrlModifiers();\r\n                String url = urlModifiers.loginUrlProvider(CLEAN_URL, loginModel.getUser().getUuid());\r\n                if (authencated) {\r\n                    Observable<LoginProviderModel> loginProviderModelObservable = AppConstants.apiInterface\r\n                            .LOGIN_PROVIDER_MODEL_OBSERVABLE(url, \"Basic \" + encoded);\r\n                    loginProviderModelObservable\r\n                            .subscribeOn(Schedulers.io())\r\n                            .observeOn(AndroidSchedulers.mainThread())\r\n                            .subscribe(new DisposableObserver<LoginProviderModel>() {\r\n                                @Override\r\n                                public void onNext(LoginProviderModel loginProviderModel) {\r\n                                    if (loginProviderModel.getResults().size() != 0) {\r\n                                        for (int i = 0; i < loginProviderModel.getResults().size(); i++) {\r\n                                            Log.i(TAG, \"doInBackground: \" + loginProviderModel.getResults().get(i).getUuid());\r\n                                            sessionManager.setProviderID(loginProviderModel.getResults().get(i).getUuid());\r\n//                                                responsecode = 200;\r\n                                          /*  final Account account = new Account(USERNAME, \"io.intelehealth.openmrs\");\r\n                                            manager.addAccountExplicitly(account, PASSWORD, null);*/\r\n\r\n                                            sessionManager.setLocationName(location.getValue());\r\n                                            sessionManager.setLocationUuid(location.getKey());\r\n                                            //  sessionManager.setLocationDescription(location.getDescription());\r\n                                            sessionManager.setServerUrl(CLEAN_URL);\r\n                                            sessionManager.setServerUrlRest(BASE_URL);\r\n                                            sessionManager.setServerUrlBase(\"https://\" + CLEAN_URL + \"/openmrs\");\r\n                                            sessionManager.setBaseUrl(BASE_URL);\r\n                                            sessionManager.setSetupComplete(true);\r\n\r\n                                            //Storing State Name\r\n                                            sessionManager.setStateName(selectedState);\r\n\r\n                                            // OfflineLogin.getOfflineLogin().setUpOfflineLogin(USERNAME, PASSWORD);\r\n                                            AdminPassword.getAdminPassword(context).setUp(ADMIN_PASSWORD);\r\n\r\n                                            Parse.initialize(new Parse.Configuration.Builder(getApplicationContext())\r\n                                                    .applicationId(AppConstants.IMAGE_APP_ID)\r\n                                                    .server(\"https://\" + CLEAN_URL + \":1337/parse/\")\r\n                                                    .build()\r\n                                            );\r\n\r\n                                            SQLiteDatabase sqLiteDatabase = AppConstants.inteleHealthDatabaseHelper.getWriteDb();\r\n                                            //SQLiteDatabase read_db = AppConstants.inteleHealthDatabaseHelper.getReadableDatabase();\r\n\r\n                                            sqLiteDatabase.beginTransaction();\r\n                                            //read_db.beginTransaction();\r\n                                            ContentValues values = new ContentValues();\r\n\r\n                                            //StringEncryption stringEncryption = new StringEncryption();\r\n                                            String random_salt = getSalt_DATA();\r\n\r\n                                            //String random_salt = stringEncryption.getRandomSaltString();\r\n                                            Log.d(\"salt\", \"salt: \" + random_salt);\r\n                                            //Salt_Getter_Setter salt_getter_setter = new Salt_Getter_Setter();\r\n                                            //salt_getter_setter.setSalt(random`_salt);\r\n\r\n\r\n                                            String hash_password = null;\r\n                                            try {\r\n                                                //hash_email = StringEncryption.convertToSHA256(random_salt + mEmail);\r\n                                                hash_password = StringEncryption.convertToSHA256(random_salt + PASSWORD);\r\n                                            } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\r\n                                                FirebaseCrashlytics.getInstance().recordException(e);\r\n                                            }\r\n\r\n                                            try {\r\n                                                values.put(\"username\", USERNAME);\r\n                                                values.put(\"password\", hash_password);\r\n                                                values.put(\"creator_uuid_cred\", loginModel.getUser().getUuid());\r\n                                                values.put(\"chwname\", loginModel.getUser().getDisplay());\r\n                                                values.put(\"provider_uuid_cred\", sessionManager.getProviderID());\r\n                                                createdRecordsCount = sqLiteDatabase.insertWithOnConflict(\"tbl_user_credentials\", null, values, SQLiteDatabase.CONFLICT_REPLACE);\r\n                                                sqLiteDatabase.setTransactionSuccessful();\r\n\r\n                                                Logger.logD(\"values\", \"values\" + values);\r\n                                                Logger.logD(\"created user credentials\", \"create user records\" + createdRecordsCount);\r\n                                            } catch (SQLException e) {\r\n                                                Log.d(\"SQL\", \"SQL user credentials: \" + e);\r\n                                            } finally {\r\n                                                sqLiteDatabase.endTransaction();\r\n                                            }\r\n\r\n                                            Log.i(TAG, \"onPostExecute: Parse init\");\r\n                                            Intent intent = new Intent(SetupActivity.this, HomeActivity.class);\r\n                                            intent.putExtra(\"setup\", true);\r\n                                            if (r2.isChecked()) { // License protocol chosen\r\n                                                if (!sessionManager.getLicenseKey().isEmpty()) {\r\n                                                    sessionManager.setTriggerNoti(\"no\");\r\n                                                    startActivity(intent);\r\n                                                    finish();\r\n                                                } else {\r\n                                                    Toast.makeText(SetupActivity.this, R.string.please_enter_valid_license_key, Toast.LENGTH_LONG).show();\r\n                                                }\r\n                                            } else { // demo protocol chosen\r\n                                                sessionManager.setTriggerNoti(\"no\");\r\n                                                startActivity(intent);\r\n                                                finish();\r\n                                            }\r\n                                            progress.dismiss();\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onError(Throwable e) {\r\n                                    Logger.logD(TAG, \"handle provider error\" + e.getMessage());\r\n                                    progress.dismiss();\r\n                                }\r\n\r\n                                @Override\r\n                                public void onComplete() {\r\n\r\n                                }\r\n                            });\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable e) {\r\n                Logger.logD(TAG, \"Login Failure\" + e.getMessage());\r\n                progress.dismiss();\r\n                DialogUtils dialogUtils = new DialogUtils();\r\n                dialogUtils.showerrorDialog(SetupActivity.this, \"Error Login\", getString(R.string.error_incorrect_password), \"ok\");\r\n                mEmailView.requestFocus();\r\n                mPasswordView.requestFocus();\r\n                mLoginButton.setText(getString(R.string.action_sign_in));\r\n                mLoginButton.setEnabled(true);\r\n            }\r\n\r\n            @Override\r\n            public void onComplete() {\r\n                Logger.logD(TAG, \"completed\");\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    public String getSalt_DATA() {\r\n        BufferedReader reader = null;\r\n        String salt = null;\r\n        try {\r\n            reader = new BufferedReader(\r\n                    new InputStreamReader(getAssets().open(\"salt.env\")));\r\n\r\n            // do reading, usually loop until end of file reading\r\n            String mLine;\r\n            while ((mLine = reader.readLine()) != null) {\r\n                //process line\r\n                salt = mLine;\r\n                Log.d(\"SA\", \"SA \" + salt);\r\n            }\r\n        } catch (Exception e) {\r\n            //log the exception\r\n        } finally {\r\n            if (reader != null) {\r\n                try {\r\n                    reader.close();\r\n                } catch (Exception e) {\r\n                    //log the exception\r\n                }\r\n            }\r\n        }\r\n        return salt;\r\n\r\n    }\r\n\r\n    private void getMindmapDownloadURL(String url) {\r\n        customProgressDialog.show();\r\n        ApiClient.changeApiBaseUrl(url);\r\n        ApiInterface apiService = ApiClient.createService(ApiInterface.class);\r\n        try {\r\n            Observable<DownloadMindMapRes> resultsObservable = apiService.DOWNLOAD_MIND_MAP_RES_OBSERVABLE(key);\r\n            resultsObservable\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new DisposableObserver<DownloadMindMapRes>() {\r\n                        @Override\r\n                        public void onNext(DownloadMindMapRes res) {\r\n                            customProgressDialog.dismiss();\r\n                            if (res.getMessage() != null && res.getMessage().equalsIgnoreCase(\"Success\")) {\r\n\r\n                                Log.e(\"MindMapURL\", \"Successfully get MindMap URL\");\r\n                                mTask = new DownloadMindMaps(context, mProgressDialog);\r\n                                mindmapURL = res.getMindmap().trim();\r\n                                sessionManager.setLicenseKey(key);\r\n                                checkExistingMindMaps();\r\n\r\n                            } else {\r\n//                                Toast.makeText(SetupActivity.this, res.getMessage(), Toast.LENGTH_LONG).show();\r\n                                Toast.makeText(SetupActivity.this, getResources().getString(R.string.no_protocols_found), Toast.LENGTH_LONG).show();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n                            customProgressDialog.dismiss();\r\n                            Log.e(\"MindMapURL\", \" \" + e);\r\n                            Toast.makeText(SetupActivity.this, getResources().getString(R.string.unable_to_get_proper_response), Toast.LENGTH_LONG).show();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete() {\r\n\r\n                        }\r\n                    });\r\n        } catch (IllegalArgumentException e) {\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getMessage());\r\n            Log.e(TAG, \"changeApiBaseUrl: \" + e.getStackTrace());\r\n        }\r\n    }\r\n\r\n    private void checkExistingMindMaps() {\r\n\r\n        //Check is there any existing mindmaps are present, if yes then delete.\r\n\r\n        File engines = new File(context.getFilesDir().getAbsolutePath(), \"/Engines\");\r\n        Log.e(TAG, \"Engines folder=\" + engines.exists());\r\n        if (engines.exists()) {\r\n            engines.delete();\r\n        }\r\n        File logo = new File(context.getFilesDir().getAbsolutePath(), \"/logo\");\r\n        Log.e(TAG, \"Logo folder=\" + logo.exists());\r\n        if (logo.exists()) {\r\n            logo.delete();\r\n        }\r\n        File physicalExam = new File(context.getFilesDir().getAbsolutePath() + \"/physExam.json\");\r\n        Log.e(TAG, \"physExam.json=\" + physicalExam.exists());\r\n        if (physicalExam.exists()) {\r\n            physicalExam.delete();\r\n        }\r\n        File familyHistory = new File(context.getFilesDir().getAbsolutePath() + \"/famHist.json\");\r\n        Log.e(TAG, \"famHist.json=\" + familyHistory.exists());\r\n        if (familyHistory.exists()) {\r\n            familyHistory.delete();\r\n        }\r\n        File pastMedicalHistory = new File(context.getFilesDir().getAbsolutePath() + \"/patHist.json\");\r\n        Log.e(TAG, \"patHist.json=\" + pastMedicalHistory.exists());\r\n        if (pastMedicalHistory.exists()) {\r\n            pastMedicalHistory.delete();\r\n        }\r\n        File config = new File(context.getFilesDir().getAbsolutePath() + \"/config.json\");\r\n        Log.e(TAG, \"config.json=\" + config.exists());\r\n        if (config.exists()) {\r\n            config.delete();\r\n        }\r\n\r\n        //Start downloading mindmaps\r\n        mTask.execute(mindmapURL, context.getFilesDir().getAbsolutePath() + \"/mindmaps.zip\");\r\n        Log.e(\"DOWNLOAD\", \"isSTARTED\");\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/org/intelehealth/ekalhelpline/activities/setupActivity/SetupActivity.java	(revision e1387808a9737cae667efcb539e8797e3742e3d3)
+++ app/src/main/java/org/intelehealth/ekalhelpline/activities/setupActivity/SetupActivity.java	(date 1626444591498)
@@ -3,17 +3,13 @@
 import android.accounts.Account;
 import android.app.Dialog;
 import android.app.ProgressDialog;
-import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.ContentValues;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.IntentFilter;
 import android.graphics.Color;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.StrictMode;
@@ -44,7 +40,6 @@
 
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-import com.google.android.material.snackbar.Snackbar;
 import com.google.firebase.crashlytics.FirebaseCrashlytics;
 import com.google.gson.Gson;
 import com.parse.Parse;
@@ -77,7 +72,6 @@
 import org.intelehealth.ekalhelpline.utilities.DialogUtils;
 import org.intelehealth.ekalhelpline.utilities.DownloadMindMaps;
 import org.intelehealth.ekalhelpline.utilities.Logger;
-import org.intelehealth.ekalhelpline.utilities.NetworkChangeListener;
 import org.intelehealth.ekalhelpline.utilities.NetworkConnection;
 import org.intelehealth.ekalhelpline.utilities.SessionManager;
 import org.intelehealth.ekalhelpline.utilities.StringEncryption;
@@ -1388,7 +1382,7 @@
 
         //Check is there any existing mindmaps are present, if yes then delete.
 
-        File engines = new File(context.getFilesDir().getAbsolutePath(), "/Engines");
+        File engines = new File(context.getFilesDir().getAbsolutePath(), "/engines");
         Log.e(TAG, "Engines folder=" + engines.exists());
         if (engines.exists()) {
             engines.delete();
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_19-05-2021_16_12__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_14-07-2021_10_56__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_14-07-2021_10_56__Default_Changelist_.xml
