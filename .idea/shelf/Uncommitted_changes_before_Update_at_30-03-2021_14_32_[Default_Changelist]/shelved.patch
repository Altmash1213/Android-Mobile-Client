Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_19-03-2021_11_52_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_19-03-2021_11_52_[Default_Changelist]/shelved.patch	(revision c9f04f20046f09902d6c9d45de9ce2268e78ff32)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_19-03-2021_11_52_[Default_Changelist]/shelved.patch	(revision c9f04f20046f09902d6c9d45de9ce2268e78ff32)
@@ -1,18 +0,0 @@
-Index: app/src/main/java/app/intelehealth/client/activities/cameraActivity/CameraActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package app.intelehealth.client.activities.cameraActivity;\r\n\r\nimport android.Manifest;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.Paint;\r\nimport android.media.ExifInterface;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.HandlerThread;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\n\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.cameraview.CameraView;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\n\r\nimport app.intelehealth.client.R;\r\nimport app.intelehealth.client.activities.cameraActivity.CameraActivityPermissionsDispatcher;\r\n\r\nimport app.intelehealth.client.app.AppConstants;\r\nimport app.intelehealth.client.app.IntelehealthApplication;\r\nimport permissions.dispatcher.NeedsPermission;\r\nimport permissions.dispatcher.OnNeverAskAgain;\r\nimport permissions.dispatcher.OnPermissionDenied;\r\nimport permissions.dispatcher.OnShowRationale;\r\nimport permissions.dispatcher.PermissionRequest;\r\nimport permissions.dispatcher.RuntimePermissions;\r\n\r\n@RuntimePermissions\r\npublic class CameraActivity extends AppCompatActivity {\r\n\r\n    public static final int TAKE_IMAGE = 205;\r\n    /**\r\n     * Bundle key used for the {@link String} setting custom Image Name\r\n     * for the file generated\r\n     */\r\n    public static final String SET_IMAGE_NAME = \"IMG_NAME\";\r\n    /**\r\n     * Bundle key used for the {@link String} setting custom FilePath for\r\n     * storing the file generated\r\n     */\r\n    public static final String SET_IMAGE_PATH = \"IMG_PATH\";\r\n    /**\r\n     * Bundle key used for the {@link String} showing custom dialog\r\n     * message before starting the camera.\r\n     */\r\n    public static final String SHOW_DIALOG_MESSAGE = \"DEFAULT_DLG\";\r\n    private static final int[] FLASH_OPTIONS = {\r\n            CameraView.FLASH_OFF,\r\n            CameraView.FLASH_AUTO,\r\n            CameraView.FLASH_ON,\r\n    };\r\n    private static final int[] FLASH_ICONS = {\r\n            R.drawable.ic_flash_off,\r\n            R.drawable.ic_flash_auto,\r\n            R.drawable.ic_flash_on,\r\n    };\r\n    private static final int[] FLASH_TITLES = {\r\n            R.string.flash_off,\r\n            R.string.flash_auto,\r\n            R.string.flash_on,\r\n    };\r\n    private final String TAG = CameraActivity.class.getSimpleName();\r\n    private CameraView mCameraView;\r\n    private FloatingActionButton mFab;\r\n    private int mCurrentFlash = 0;\r\n\r\n    private Handler mBackgroundHandler;\r\n\r\n    //Pass Custom File Name Using intent.putExtra(CameraActivity.SET_IMAGE_NAME, \"Image Name\");\r\n    private String mImageName = null;\r\n    //Pass Dialog Message Using intent.putExtra(CameraActivity.SET_IMAGE_NAME, \"Dialog Message\");\r\n    private String mDialogMessage = null;\r\n    //Pass Custom File Path Using intent.putExtra(CameraActivity.SET_IMAGE_PATH, \"Image Path\");\r\n    private String mFilePath = null;\r\n    private CameraView.Callback mCallback\r\n            = new CameraView.Callback() {\r\n\r\n        @Override\r\n        public void onCameraOpened(CameraView cameraView) {\r\n            Log.d(TAG, \"onCameraOpened\");\r\n        }\r\n\r\n        @Override\r\n        public void onCameraClosed(CameraView cameraView) {\r\n            Log.d(TAG, \"onCameraClosed\");\r\n        }\r\n\r\n        @Override\r\n        public void onPictureTaken(CameraView cameraView, final byte[] data) {\r\n            Log.d(TAG, \"onPictureTaken \" + data.length);\r\n            Toast.makeText(cameraView.getContext(), R.string.picture_taken, Toast.LENGTH_SHORT)\r\n                    .show();\r\n            compressImageAndSave(data);\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    void compressImageAndSave(final byte[] data) {\r\n        getBackgroundHandler().post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (mImageName == null) {\r\n                    mImageName = \"IMG\";\r\n                }\r\n\r\n\r\n                String filePath = AppConstants.IMAGE_PATH + mImageName + \".jpg\";\r\n\r\n                File file;\r\n                if (mFilePath == null) {\r\n                    file = new File(AppConstants.IMAGE_PATH + mImageName + \".jpg\");\r\n                } else {\r\n                    file = new File(AppConstants.IMAGE_PATH + mImageName + \".jpg\");\r\n                }\r\n                OutputStream os = null;\r\n                try {\r\n                    os = new FileOutputStream(file);\r\n                    Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);\r\n                    //  Bitmap bitmap = Bitmap.createScaledBitmap(bmp, 600, 800, false);\r\n                    //  bitmap.recycle();\r\n                    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                    os.flush();\r\n                    os.close();\r\n                    bitmap.recycle();\r\n\r\n\r\n                    Bitmap scaledBitmap = null;\r\n\r\n                    BitmapFactory.Options options = new BitmapFactory.Options();\r\n                    options.inJustDecodeBounds = true;\r\n                    Bitmap bmp = BitmapFactory.decodeFile(filePath, options);\r\n\r\n                    int actualHeight = options.outHeight;\r\n                    int actualWidth = options.outWidth;\r\n                    float maxHeight = 816.0f;\r\n                    float maxWidth = 612.0f;\r\n                    float imgRatio = actualWidth / actualHeight;\r\n                    float maxRatio = maxWidth / maxHeight;\r\n\r\n                    if (actualHeight > maxHeight || actualWidth > maxWidth) {\r\n                        if (imgRatio < maxRatio) {\r\n                            imgRatio = maxHeight / actualHeight;\r\n                            actualWidth = (int) (imgRatio * actualWidth);\r\n                            actualHeight = (int) maxHeight;\r\n                        } else if (imgRatio > maxRatio) {\r\n                            imgRatio = maxWidth / actualWidth;\r\n                            actualHeight = (int) (imgRatio * actualHeight);\r\n                            actualWidth = (int) maxWidth;\r\n                        } else {\r\n                            actualHeight = (int) maxHeight;\r\n                            actualWidth = (int) maxWidth;\r\n                        }\r\n                    }\r\n\r\n                    options.inSampleSize = calculateInSampleSize(options, actualWidth, actualHeight);\r\n                    options.inJustDecodeBounds = false;\r\n                    options.inDither = false;\r\n                    options.inPurgeable = true;\r\n                    options.inInputShareable = true;\r\n                    options.inTempStorage = new byte[16 * 1024];\r\n\r\n                    try {\r\n                        bmp = BitmapFactory.decodeFile(filePath, options);\r\n                    } catch (OutOfMemoryError exception) {\r\n                        exception.printStackTrace();\r\n\r\n                    }\r\n                    try {\r\n                        scaledBitmap = Bitmap.createBitmap(actualWidth, actualHeight, Bitmap.Config.ARGB_8888);\r\n                    } catch (OutOfMemoryError exception) {\r\n                        exception.printStackTrace();\r\n                    }\r\n\r\n                    float ratioX = actualWidth / (float) options.outWidth;\r\n                    float ratioY = actualHeight / (float) options.outHeight;\r\n                    float middleX = actualWidth / 2.0f;\r\n                    float middleY = actualHeight / 2.0f;\r\n\r\n                    Matrix scaleMatrix = new Matrix();\r\n                    scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);\r\n\r\n                    Canvas canvas = new Canvas(scaledBitmap);\r\n                    canvas.setMatrix(scaleMatrix);\r\n                    canvas.drawBitmap(bmp, middleX - bmp.getWidth() / 2, middleY - bmp.getHeight() / 2, new Paint(\r\n                            Paint.FILTER_BITMAP_FLAG));\r\n\r\n                    ExifInterface exif;\r\n                    try {\r\n                        exif = new ExifInterface(filePath);\r\n\r\n                        int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0);\r\n                        Log.e(\"EXIF\", \"Exif: \" + orientation);\r\n                        Matrix matrix = new Matrix();\r\n                        if (orientation == 6) {\r\n                            matrix.postRotate(90);\r\n                            Log.e(\"EXIF\", \"Exif: \" + orientation);\r\n                        } else if (orientation == 3) {\r\n                            matrix.postRotate(180);\r\n                            Log.e(\"EXIF\", \"Exif: \" + orientation);\r\n                        } else if (orientation == 8) {\r\n                            matrix.postRotate(270);\r\n                            Log.e(\"EXIF\", \"Exif: \" + orientation);\r\n                        }\r\n                        scaledBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight(),\r\n                                matrix, true);\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    FileOutputStream out = null;\r\n                    String filename = filePath;\r\n                    try {\r\n                        out = new FileOutputStream(file);\r\n                        scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 95, out);\r\n                    } catch (FileNotFoundException e) {\r\n                        e.printStackTrace();\r\n                    } finally {\r\n                        if (bmp != null) {\r\n                            bmp.recycle();\r\n                            bmp = null;\r\n                        }\r\n                        if (scaledBitmap != null) {\r\n                            scaledBitmap.recycle();\r\n                        }\r\n                    }\r\n                    Intent intent = new Intent();\r\n                    intent.putExtra(\"RESULT\", file.getAbsolutePath());\r\n                    setResult(RESULT_OK, intent);\r\n                    Log.i(TAG, file.getAbsolutePath());\r\n                    finish();\r\n                } catch (IOException e) {\r\n                    Log.w(TAG, \"Cannot write to \" + file, e);\r\n                    setResult(RESULT_CANCELED, new Intent());\r\n                    finish();\r\n                } finally {\r\n                    if (os != null) {\r\n                        try {\r\n                            os.close();\r\n                        } catch (IOException e) {\r\n                            FirebaseCrashlytics.getInstance().recordException(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\r\n        final int height = options.outHeight;\r\n        final int width = options.outWidth;\r\n        int inSampleSize = 1;\r\n\r\n        if (height > reqHeight || width > reqWidth) {\r\n            if (width > height) {\r\n                inSampleSize = Math.round((float) height / (float) reqHeight);\r\n            } else {\r\n                inSampleSize = Math.round((float) width / (float) reqWidth);\r\n            }\r\n        }\r\n        return inSampleSize;\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        Bundle extras = getIntent().getExtras();\r\n        if (extras != null) {\r\n            if (extras.containsKey(SET_IMAGE_NAME))\r\n                mImageName = extras.getString(SET_IMAGE_NAME);\r\n            if (extras.containsKey(SHOW_DIALOG_MESSAGE))\r\n                mDialogMessage = extras.getString(SHOW_DIALOG_MESSAGE);\r\n            if (extras.containsKey(SET_IMAGE_PATH))\r\n                mFilePath = extras.getString(SET_IMAGE_PATH);\r\n        }\r\n\r\n        setContentView(R.layout.activity_camera);\r\n        mCameraView = findViewById(R.id.camera_surface_CameraView);\r\n        mFab = findViewById(R.id.take_picture);\r\n\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayShowTitleEnabled(false);\r\n\r\n        }\r\n\r\n        if (mCameraView != null) mCameraView.addCallback(mCallback);\r\n        if (mFab != null) {\r\n            mFab.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    if (mCameraView != null) {\r\n                        mCameraView.setFlash(FLASH_OPTIONS[mCurrentFlash]); // default flash as 0: FLASH_OFF\r\n                        mCameraView.takePicture();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        if (mCameraView != null) mCameraView.stop();\r\n        CameraActivityPermissionsDispatcher.startCameraWithCheck(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        if (mCameraView != null) mCameraView.stop();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.camera, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case R.id.switch_flash:\r\n                if (mCameraView != null) {\r\n                    mCurrentFlash = (mCurrentFlash + 1) % FLASH_OPTIONS.length;\r\n                    item.setTitle(FLASH_TITLES[mCurrentFlash]);\r\n                    item.setIcon(FLASH_ICONS[mCurrentFlash]);\r\n                    mCameraView.setFlash(FLASH_OPTIONS[mCurrentFlash]);\r\n                }\r\n                return true;\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\r\n                                           @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        CameraActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);\r\n    }\r\n\r\n    @NeedsPermission(Manifest.permission.CAMERA)\r\n    void startCamera() {\r\n        if (mDialogMessage != null) {\r\n            MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this)\r\n                    .setMessage(mDialogMessage)\r\n                    .setNeutralButton(getString(R.string.button_ok), new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            dialog.dismiss();\r\n                        }\r\n                    });\r\n            AlertDialog dialog = builder.show();\r\n            IntelehealthApplication.setAlertDialogCustomTheme(this, dialog);\r\n        }\r\n        if (mCameraView != null)\r\n            mCameraView.start();\r\n    }\r\n\r\n    @OnShowRationale(Manifest.permission.CAMERA)\r\n    void showRationaleForCamera(final PermissionRequest request) {\r\n        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this)\r\n                .setMessage(getString(R.string.permission_camera_rationale))\r\n                .setPositiveButton(getString(R.string.button_allow), new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        request.proceed();\r\n                    }\r\n                })\r\n                .setNegativeButton(getString(R.string.button_deny), new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        request.cancel();\r\n                    }\r\n                });\r\n        AlertDialog dialog = builder.show();\r\n        IntelehealthApplication.setAlertDialogCustomTheme(this, dialog);\r\n    }\r\n\r\n    @OnPermissionDenied(Manifest.permission.CAMERA)\r\n    void showDeniedForCamera() {\r\n        Toast.makeText(this, getString(R.string.permission_camera_denied), Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    @OnNeverAskAgain(Manifest.permission.CAMERA)\r\n    void showNeverAskForCamera() {\r\n        Toast.makeText(this, getString(R.string.permission_camera_never_askagain), Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    private Handler getBackgroundHandler() {\r\n        if (mBackgroundHandler == null) {\r\n            HandlerThread thread = new HandlerThread(\"background\");\r\n            thread.start();\r\n            mBackgroundHandler = new Handler(thread.getLooper());\r\n        }\r\n        return mBackgroundHandler;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        //do nothing\r\n        finish();\r\n\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/app/intelehealth/client/activities/cameraActivity/CameraActivity.java	(revision f78250490dc507edec9e69785ee4ba3e99ba50f5)
-+++ app/src/main/java/app/intelehealth/client/activities/cameraActivity/CameraActivity.java	(date 1616131801571)
-@@ -40,7 +40,7 @@
- import java.io.OutputStream;
- 
- import app.intelehealth.client.R;
--import app.intelehealth.client.activities.cameraActivity.CameraActivityPermissionsDispatcher;
-+
- 
- import app.intelehealth.client.app.AppConstants;
- import app.intelehealth.client.app.IntelehealthApplication;
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_19-03-2021_11_52__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_19-03-2021_11_52__Default_Changelist_.xml	(revision c9f04f20046f09902d6c9d45de9ce2268e78ff32)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_19-03-2021_11_52__Default_Changelist_.xml	(revision c9f04f20046f09902d6c9d45de9ce2268e78ff32)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_19-03-2021_11_52_[Default_Changelist]" date="1616134956062" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_19-03-2021_11_52_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 19-03-2021 11:52 [Default Changelist]" />
-</changelist>
\ No newline at end of file
